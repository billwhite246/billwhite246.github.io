<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bill&#39;s blog</title>
  
  <subtitle>coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.webpro.ltd/"/>
  <updated>2021-01-13T12:13:44.664Z</updated>
  <id>http://blog.webpro.ltd/</id>
  
  <author>
    <name>Bill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>frp内网穿透</title>
    <link href="http://blog.webpro.ltd/2021/01/12/frp/"/>
    <id>http://blog.webpro.ltd/2021/01/12/frp/</id>
    <published>2021-01-12T10:42:44.000Z</published>
    <updated>2021-01-13T12:13:44.664Z</updated>
    
    <content type="html"><![CDATA[<ul><li>以搭建web内网穿透服务为例</li></ul><h1 id="frp版本-v0-34-3"><a href="#frp版本-v0-34-3" class="headerlink" title="frp版本(v0.34.3)"></a>frp版本(v0.34.3)</h1><blockquote><p>下载地址： <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p></blockquote><h1 id="服务端配置-frps"><a href="#服务端配置-frps" class="headerlink" title="服务端配置(frps)"></a>服务端配置(frps)</h1><ul><li>服务端运行在centos7上，编辑frps.ini文件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">dashboard_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7002</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = admin<br><span class="hljs-attr">enable_prometheus</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">subdomain_host</span> = frps.webpro.ltd<br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">7001</span><br></code></pre></td></tr></table></figure></div><ul><li>frp服务端口为7000，监听新的穿透接入请求</li><li>管理面板端口为7002，通过访问服务器IP:7002，认证后可以查看frp服务状态</li><li>管理面板账户密码均为admin（不建议这样设置，属于弱口令）</li><li>http服务的端口为7001</li><li>上面的7000:7002端口可以根据自己服务器端口占用情况自由调整</li></ul><blockquote><p>配置好7000:7002端口后，还要在服务器的防火墙开放这三个端口</p></blockquote><ul><li>运行frps服务</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">前台启动命令为 ./frps -c ./frps.ini<br>后台运行命令为 nohup ./frps -c ./frps.ini &amp;<br>如需作为服务启动，建议选择后者，前者当客户端断开连接后，服务端也会关闭<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20210113200900.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20210113200900.png" class="lazyload" title></a></p><h1 id="客户端配置-frpc"><a href="#客户端配置-frpc" class="headerlink" title="客户端配置(frpc)"></a>客户端配置(frpc)</h1><ul><li>客户端运行在Windows10系统上，编辑frpc.ini文件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = 服务器IP<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[web01]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8081</span><br><span class="hljs-attr">custom_domains</span> = 用于访问内网穿透服务的域名（提前解析到服务器IP）<br></code></pre></td></tr></table></figure></div><ul><li>在cmd里面，直接输入frpc.exe即可（注意是cmd不是powershell，这两个终端语法不太相同）</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20210113200901.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20210113200901.png" class="lazyload" title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;以搭建web内网穿透服务为例&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;frp版本-v0-34-3&quot;&gt;&lt;a href=&quot;#frp版本-v0-34-3&quot; class=&quot;headerlink&quot; title=&quot;frp版本(v0.34.3)&quot;&gt;&lt;/a&gt;frp版本(v0.34
      
    
    </summary>
    
    
      <category term="frp" scheme="http://blog.webpro.ltd/categories/frp/"/>
    
    
      <category term="frp" scheme="http://blog.webpro.ltd/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>Numpy And Pandas</title>
    <link href="http://blog.webpro.ltd/2021/01/06/numpy-and-pandas/"/>
    <id>http://blog.webpro.ltd/2021/01/06/numpy-and-pandas/</id>
    <published>2021-01-06T12:45:48.000Z</published>
    <updated>2021-07-17T07:01:14.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><blockquote><p>暂停更新-<em>-</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;暂停更新-&lt;em&gt;-&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>强化学习(RL)</title>
    <link href="http://blog.webpro.ltd/2021/01/05/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-RL/"/>
    <id>http://blog.webpro.ltd/2021/01/05/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-RL/</id>
    <published>2021-01-05T12:28:34.000Z</published>
    <updated>2021-01-14T02:20:20.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li>智能体(agent)</li><li>状态(state)</li><li>行为(action)</li><li>奖利(reward)</li><li>策略(policy)</li></ul><blockquote><p>持续更新中…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;强化学习&quot;&gt;&lt;a href=&quot;#强化学习&quot; class=&quot;headerlink&quot; title=&quot;强化学习&quot;&gt;&lt;/a&gt;强化学习&lt;/h1&gt;&lt;h2 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;headerlink&quot; title=&quot;专业术语&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构(C/C+)</title>
    <link href="http://blog.webpro.ltd/2020/08/13/408/"/>
    <id>http://blog.webpro.ltd/2020/08/13/408/</id>
    <published>2020-08-13T04:57:00.000Z</published>
    <updated>2020-10-21T05:45:57.451Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>gcc -v: gcc version 5.5.0 20171010 (Ubuntu 5.5.0-12ubuntu1~16.04) </p></blockquote><h1 id="线性表-Liner-List"><a href="#线性表-Liner-List" class="headerlink" title="线性表(Liner List)"></a>线性表(Liner List)</h1><h2 id="线性表基本操作"><a href="#线性表基本操作" class="headerlink" title="线性表基本操作"></a>线性表基本操作</h2><ul><li>InitList(&amp;L) 初始化线性表</li><li>Length(L) 获取表长度</li><li>LocateElem(L,e) 按值查找</li><li>GetElem(L,i) 按位查找</li><li>ListInsert(&amp;L, i, e) 在第i个元素后插入元素e</li><li>ListDelete(&amp;L, i, &amp;e) 删除第i个元素，用e返回被删除的元素</li><li>PrintList(L) 按顺序输出表内所有元素值</li><li>DestroyList(&amp;L) 销毁线性表，即释放表所占内存</li></ul><h2 id="易错题"><a href="#易错题" class="headerlink" title="易错题"></a>易错题</h2><ul><li><input checked disabled type="checkbox"> 由100个字符串组成的序列可以称为一个线性表。</li><li>邻接表是一种存储结构，非线性表；线性表是一种逻辑结构。</li></ul><h2 id="线性表的顺序表示-Sequence-List"><a href="#线性表的顺序表示-Sequence-List" class="headerlink" title="线性表的顺序表示(Sequence List)"></a>线性表的顺序表示(Sequence List)</h2><ul><li><input checked disabled type="checkbox"> 基于数组</li><li><input checked disabled type="checkbox"> 顺序表逻辑上相邻的元素物理上也相邻</li><li><input checked disabled type="checkbox"> 自动扩容，扩容策略始终为原来容量的2倍</li><li><input checked disabled type="checkbox"> 顺序表位序从0开始（教材上要求从1开始）</li><li><input checked disabled type="checkbox"> 插入T(n)= O(n)</li><li><input checked disabled type="checkbox"> 删除T(n)= O(n)</li><li><input checked disabled type="checkbox"> 顺序查找T(n)= O(n)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10 <span class="hljs-comment">// 定义顺序表的初始长度</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">StudentInfo</span> &#123;</span><br>  <span class="hljs-keyword">char</span>* name;<br>  <span class="hljs-keyword">int</span> age;<br>&#125; stu;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SequenceList</span> &#123;</span><br>  stu* data;<br>  <span class="hljs-keyword">int</span> Length; <span class="hljs-comment">// 有效长度</span><br>&#125; sqlist;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;l)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> size)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(sqlist &amp;l)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(sqlist l, stu e)</span></span>; <span class="hljs-comment">// 查找第一个包含e中元素的项</span><br><span class="hljs-function">stu <span class="hljs-title">GetElem</span><span class="hljs-params">(sqlist l, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;l, stu e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> i, stu e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> i, stu &amp;e)</span></span>; <span class="hljs-comment">// 按序号删除元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(sqlist &amp;l)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(sqlist &amp;l)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;l)</span> </span>&#123;<br>  InitList(l, InitSize);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>  sqlist mysqlist;<br>  mysqlist.Length = <span class="hljs-number">0</span>;<br>  mysqlist.data = (stu *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(stu) * size);<br>  l = mysqlist;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(sqlist &amp;l)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> l.Length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(sqlist l, stu e)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l.Length; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(l.data[i].name, e.name) || l.data[i].age == e.age) &#123;<br>      index = i;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-function">stu <span class="hljs-title">GetElem</span><span class="hljs-params">(sqlist l, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (i &gt;=<span class="hljs-number">0</span> &amp;&amp; i &lt;= l.Length) &#123;<br>    <span class="hljs-keyword">return</span> l.data[i];<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 越界</span><br>    <span class="hljs-keyword">return</span> stu();<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;l, stu e)</span> </span>&#123;<br>  ListInsert(l, l.Length, e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> i, stu e)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> current_list_max_length = malloc_usable_size(l.data) / <span class="hljs-keyword">sizeof</span>(l.data[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">if</span> (l.Length &gt;= current_list_max_length)<br>  &#123;<br>    <span class="hljs-comment">// 溢出，扩容策略为容量×2</span><br>    sqlist new_sqlist;<br>    new_sqlist.Length = <span class="hljs-number">0</span>;<br>    new_sqlist.data = (stu *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(stu) * current_list_max_length * <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; l.Length + <span class="hljs-number">1</span>; j++) &#123;<br>      <span class="hljs-keyword">if</span> (j == i) &#123;<br>        new_sqlist.data[j].name = e.name;<br>        new_sqlist.data[j].age = e.age;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        new_sqlist.data[j].name = l.data[j &lt; i ? j : j - <span class="hljs-number">1</span>].name;<br>        new_sqlist.data[j].age = l.data[j &lt; i ? j : j - <span class="hljs-number">1</span>].age;<br>      &#125;<br>      new_sqlist.Length++;<br>    &#125;<br>    l = new_sqlist;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = l.Length; j &gt; i; j--) &#123;<br>      l.data[j].name = l.data[j<span class="hljs-number">-1</span>].name;<br>      l.data[j].age = l.data[j<span class="hljs-number">-1</span>].age;<br>    &#125;<br>    l.data[i].name = e.name;<br>    l.data[i].age = e.age;<br>    l.Length++;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(sqlist &amp;l, <span class="hljs-keyword">int</span> i, stu &amp;e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; l.Length)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; l.Length - <span class="hljs-number">2</span>; j++) &#123;<br>    l.data[j].name = l.data[j + <span class="hljs-number">1</span>].name;<br>    l.data[j].age = l.data[j + <span class="hljs-number">1</span>].age;<br>  &#125;<br>  l.Length--;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(sqlist &amp;l)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l.Length; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"[%02d] 姓名: %s, 年龄: %d\n"</span>, i+<span class="hljs-number">1</span>, l.data[i].name, l.data[i].age);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(sqlist &amp;l)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (l.data == <span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span>;<br>  <span class="hljs-built_in">free</span>(l.data);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TestSequenceList</span><span class="hljs-params">()</span> </span>&#123;<br>  sqlist mySqlist;<br>  InitList(mySqlist, <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"当前顺序表长度(有效)为: %d\n"</span>, mySqlist.Length);<br>  <span class="hljs-comment">// 插入以及动态扩容</span><br>  stu e, e1;<br>  e.name = (<span class="hljs-keyword">char</span>*)<span class="hljs-string">"Mary"</span>;<br>  e.age = <span class="hljs-number">18</span>;<br>  e1.name = (<span class="hljs-keyword">char</span>*)<span class="hljs-string">"Billy"</span>;<br>  e1.age = <span class="hljs-number">19</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    ListInsert(mySqlist, e);<br>    e.age++;<br>  &#125;<br>  ListInsert(mySqlist, <span class="hljs-number">3</span>, e1);<br>  <span class="hljs-comment">// 打印</span><br>  PrintList(mySqlist);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"当前顺序表长度(有效)为: %d\n\n"</span>, mySqlist.Length);<br>  <span class="hljs-comment">// 按位查找</span><br>  stu mystu = GetElem(mySqlist, <span class="hljs-number">3</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"4号学生姓名: %s, 年龄: %d\n\n"</span>, mystu.name, mystu.age);<br>  <span class="hljs-comment">// 按关键字查找</span><br>  stu locateByAge;<br>  locateByAge.age = <span class="hljs-number">19</span>;<br>  <span class="hljs-keyword">int</span> index = LocateElem(mySqlist, locateByAge);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"第一个年龄为19的人是: %s，序号为: %d\n\n"</span>, mySqlist.data[index].name, index);<br>  <span class="hljs-comment">// 删除</span><br>  ListDelete(mySqlist, <span class="hljs-number">3</span>, e1);<br>  PrintList(mySqlist);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"当前顺序表长度(有效)为: %d\n\n"</span>, mySqlist.Length);<br>  DestroyList(mySqlist);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  TestSequenceList();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="P19-综合应用题"><a href="#P19-综合应用题" class="headerlink" title="P19 综合应用题"></a>P19 综合应用题</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 30 <span class="hljs-comment">// 定义顺序表的MAX长度</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SequenceList</span> &#123;</span><br>  <span class="hljs-keyword">int</span>* data;<br>  <span class="hljs-keyword">int</span> Length; <span class="hljs-comment">// 有效长度</span><br>&#125; sqlist;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(sqlist &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(sqlist L, <span class="hljs-keyword">int</span> e)</span></span>; <span class="hljs-comment">// 查找第一个包含e中元素的项</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(sqlist L, <span class="hljs-keyword">int</span> i)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span></span>; <span class="hljs-comment">// 按序号删除元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(sqlist &amp;L)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(sqlist &amp;L)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  sqlist mysqlist;<br>  mysqlist.data = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * MaxSize);<br>  mysqlist.Length = <span class="hljs-number">0</span>;<br>  L = mysqlist;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> L.Length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(sqlist L, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> pos = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] == e) &#123;<br>      pos = i;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">GetElem</span><span class="hljs-params">(sqlist L, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>  i--;<br>  <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; L.Length ) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"下标越界\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.Length &gt;= MaxSize) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"容量不足, %d插入失败\n"</span>, e);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  L.data[L.Length] = e;<br>  L.Length++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.Length &gt;= MaxSize) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"容量不足, %d插入失败\n"</span>, e);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = L.Length; j &gt; i - <span class="hljs-number">1</span>; j--) &#123;<br>    L.data[j] = L.data[j - <span class="hljs-number">1</span>];<br>  &#125;<br>  L.data[i - <span class="hljs-number">1</span>] = e;<br>  L.Length++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> &amp;e)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt; L.Length ) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"下标越界\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  e = L.data[i<span class="hljs-number">-1</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; L.Length; j++)<br>  &#123;<br>    L.data[j<span class="hljs-number">-1</span>] = L.data[j];<br>  &#125;<br>  L.Length--;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"[ "</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; L.Length; j++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d  "</span>, L.data[j]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"]\n"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.data != <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-built_in">free</span>(L.data);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Del_min_P19_1</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> &amp;del_val)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"顺序表为空!\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> min_index = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; L.Length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] &lt; L.data[min_index]) &#123;<br>      min_index = i;<br>    &#125;<br>  &#125;<br>  del_val = L.data[min_index];<br>  L.data[min_index] = L.data[L.Length - <span class="hljs-number">1</span>];<br>  L.Length--;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Reverse_P19_2</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> temp;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= (L.Length - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i++) &#123;<br>    temp = L.data[L.Length - <span class="hljs-number">1</span> - i];<br>    L.data[L.Length - <span class="hljs-number">1</span> - i] = L.data[i];<br>    L.data[i] = temp;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Del_value_equal_x_P19_3_method_1</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x_times = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] != x) &#123;<br>      L.data[i - x_times] = L.data[i];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      x_times++;<br>    &#125;<br>  &#125;<br>  L.Length -= x_times;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Del_value_equal_x_P19_3_method_2</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] != x) &#123;<br>      L.data[k] = L.data[i];<br>      k++;<br>    &#125;<br>  &#125;<br>  L.Length = k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Del_between_s_t_with_sorted_list_P19_4</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (s &gt;= t) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"s、t不合理\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"顺序表为空\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> i, j;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; L.Length &amp;&amp; L.data[i] &lt; s; i++);<br>  <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; L.Length &amp;&amp; L.data[j] &lt;= t; j++);<br>  <span class="hljs-keyword">for</span> (; j &lt; L.Length; i++, j++)<br>  &#123;<br>    L.data[i] = L.data[j];<br>  &#125;<br>  L.Length = i;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Del_between_s_t_P19_5_method1</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (s &gt;= t) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"s、t不合理\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"顺序表为空\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">// l为无序顺序表</span><br>  <span class="hljs-keyword">int</span> between_s_t_times = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++) &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] &gt;= s &amp;&amp; L.data[i] &lt;= t) &#123;<br>      between_s_t_times++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      L.data[i - between_s_t_times] = L.data[i];<br>    &#125;<br>  &#125;<br>  L.Length -= between_s_t_times;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Del_between_s_t_P19_5_method2</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> s, <span class="hljs-keyword">int</span> t)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (s &gt;= t) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"s、t不合理\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"顺序表为空\n"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">// l为无序顺序表</span><br>  <span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] &lt; s || L.data[i] &gt; t) &#123;<br>      L.data[k] = L.data[i];<br>      k++;<br>    &#125;<br>  &#125;<br>  L.Length = k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Del_same_P19_6</span><span class="hljs-params">(sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> del_times = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; L.Length; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (L.data[i] == L.data[i+<span class="hljs-number">1</span>]) &#123;<br>      del_times++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      L.data[i - del_times] = L.data[i];<br>    &#125;<br>  &#125;<br>  L.Length -= del_times;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Combine_two_sorted_list_P19_7</span><span class="hljs-params">(sqlist L1, sqlist L2, sqlist &amp;L)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L1.Length + L2.Length &gt; MaxSize)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span>(i &lt; L1.Length &amp;&amp; j &lt; L2.Length)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (L1.data[i] &lt; L2.data[j]) &#123;<br>      <span class="hljs-comment">// L.data[k++] = L1.data[i++] 等价于 L.data[k] = L1.data[i]; k++; i++;</span><br>      L.data[k++] = L1.data[i++];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      L.data[k++] = L2.data[j++];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (i &lt; L1.Length) &#123;<br>    L.data[k++] = L1.data[i++];<br>  &#125;<br>  <span class="hljs-keyword">while</span> (j &lt; L2.Length) &#123;<br>    L.data[k++] = L2.data[j++];<br>  &#125;<br>  L.Length = k;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Exchange_P19_8</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span> || start &lt; <span class="hljs-number">0</span> || start &gt;= end || end &gt; L.Length) &#123;<br>          <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; (end - start + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i++)<br>        &#123;<br>          temp = L.data[start + i];<br>          L.data[start + i] = L.data[end - i];<br>          L.data[end - i] = temp;<br>        &#125;<br>      &#125;<br>  &#125; Reverse;<br>  Reverse.run(L, <span class="hljs-number">0</span>, L.Length - <span class="hljs-number">1</span>);<br>  Reverse.run(L, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>  Reverse.run(L, n, m + n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Search_X_Exchange_Or_Insert_P20_9</span><span class="hljs-params">(sqlist &amp;L, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (L.Length &lt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">int</span> high = L.Length - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">int</span> mid;<br>  <span class="hljs-keyword">while</span> (low &lt;= high)<br>  &#123;<br>    mid = (low + high) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (x == L.data[mid]) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> (x &gt; L.data[mid])<br>    &#123;<br>      low = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      high = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (L.data[mid] == x)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (mid &lt; L.Length - <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">int</span> temp = L.data[mid + <span class="hljs-number">1</span>];<br>      L.data[mid + <span class="hljs-number">1</span>] = L.data[mid];<br>      L.data[mid] = temp;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = L.Length - <span class="hljs-number">1</span>; i &gt;= low; i--) L.data[i + <span class="hljs-number">1</span>] = L.data[i];<br>    L.data[low] = x;<br>    L.Length++;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P20_10</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> &#123;</span><br>    <span class="hljs-keyword">public</span>:<br>      <span class="hljs-keyword">int</span> t;<br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= (end - start - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i++) &#123;<br>          t = arr[start + i];<br>          arr[start + i] = arr[end - i];<br>          arr[end - i] = t;<br>        &#125;<br>      &#125;<br>  &#125; Reverse;<br>  Reverse.run(arr, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>  Reverse.run(arr, <span class="hljs-number">0</span>, n - p - <span class="hljs-number">1</span>);<br>  Reverse.run(arr, n - p, n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 非最优解，该方法T(n) = O(n)</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">P20_11_MyAnswer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> combineAB[], <span class="hljs-keyword">int</span> n)</span> </span>&#123; <span class="hljs-comment">// n为A或B的长度</span><br>  <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;<br>    <span class="hljs-keyword">if</span> (A[i] &lt; B[j]) &#123;<br>      combineAB[k++] = A[i++];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      combineAB[k++] = B[j++];<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (i &lt; n) &#123;<br>    combineAB[k++] = A[i++];<br>  &#125;<br>  <span class="hljs-keyword">while</span> (j &lt; n) &#123;<br>    combineAB[k++] = B[j++];<br>  &#125;<br>  <span class="hljs-keyword">return</span> combineAB[(<span class="hljs-number">2</span> * n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>];<br>&#125;<br><br><span class="hljs-comment">// 参考答案</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">P20_11_Correct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> B[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> start1 = <span class="hljs-number">0</span>, end1 = n<span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">int</span> start2 = <span class="hljs-number">0</span>, end2 = n<span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">int</span> mid1, mid2;<br>  <span class="hljs-keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)<br>  &#123;<br>    mid1 = (start1 + end1) / <span class="hljs-number">2</span>;<br>    mid2 = (start2 + end2) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (A[mid1] == B[mid2]) &#123;<br>      <span class="hljs-keyword">return</span> A[mid1];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (A[mid1] &gt; B[mid2]) &#123;<br>      <span class="hljs-comment">// 扔掉A中较大的一半 不包括a</span><br>      <span class="hljs-comment">// 扔掉B中较小的一半 包括b</span><br>      <span class="hljs-comment">// 对于有奇数个元素的数组，去除同等数量的元素时，恰好可以以mid为分界线</span><br>      <span class="hljs-comment">// 对于有偶数个元素的数组，若去除同等数量的元素时，其中一个数组要多去掉一个，这里我们始终让舍弃较小的一半者多舍弃一个，这样保证A、B舍弃的元素数相同</span><br>      <span class="hljs-keyword">if</span> ((start1 + end1) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 元素个数为奇数</span><br>        end1 = mid1;<br>        start2 = mid2;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 元素个数为偶数，需要多舍掉B一个</span><br>        end1 = mid1;<br>        start2 = mid2 + <span class="hljs-number">1</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-comment">// 扔掉A中较小的一半 包括a</span><br>      <span class="hljs-comment">// 扔掉B中较大的一半 不包括b</span><br>      <span class="hljs-keyword">if</span> ((start1 + end1) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 元素个数为奇数</span><br>        start1 = mid1;<br>        end2 = mid2;<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 元素个数为偶数，需要多舍掉B一个</span><br>        start1 = mid1 + <span class="hljs-number">1</span>;<br>        end2 = mid2;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> A[start1] &lt; B[start2] ? A[start1] : B[start2];<br>&#125;<br><br><span class="hljs-comment">// T(n)=O(n)最优，S(n)=O(n)非最优</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P20_12_MyAnswer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> counter[n] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">int</span> main_number = arr[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>  &#123;<br>    counter[arr[i]]++;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (counter[i] &gt; counter[main_number]) &#123;<br>      main_number = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (counter[main_number] &gt; n / <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"主元素为: %d\n"</span>, (counter[main_number] &gt; n / <span class="hljs-number">2</span>) ? main_number : <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">// 参考答案, T(n) = O(1)</span><br><span class="hljs-comment">// 只有一个主元素，且主元素至少连续出现两次</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P20_12_Correct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> i, c, count = <span class="hljs-number">1</span>;<br>  c = A[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (A[i] != c) &#123;<br>      count--;<br>      <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">1</span>) &#123;<br>        c = A[i];<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      count++;<br>    &#125;<br>  &#125;<br>  count = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 确定c是否为主元素</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (A[i] == c) &#123;<br>      count++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"主元素为: %d\n"</span>, (count &gt; n / <span class="hljs-number">2</span>) ? c : <span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-comment">// 非最优速度</span><br><span class="hljs-comment">// T(n)=O(n^2)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P21_13_MyAnswer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> no_see_min = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">int</span> temp;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>  &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>      <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>        temp = arr[j];<br>        arr[j] = arr[j + <span class="hljs-number">1</span>];<br>        arr[j + <span class="hljs-number">1</span>] = temp;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt; <span class="hljs-number">0</span> &amp;&amp; arr[i] - <span class="hljs-number">1</span> != arr[i - <span class="hljs-number">1</span>]) &#123;<br>      no_see_min = arr[i] - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"未出现的最小正整数: %d\n"</span>, no_see_min == <span class="hljs-number">0</span> ? arr[n - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span> : no_see_min);<br>&#125;<br><br><span class="hljs-comment">// 参考答案</span><br><span class="hljs-comment">// 速度最优先: T(n)=O(n)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P21_13_Correct</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>  <span class="hljs-comment">// counter[0]表示1出现的次数，ounter[n-1]表示n出现的次数，...</span><br>  <span class="hljs-comment">// 如果数组长度为n，并且数组元素集合不完全是1到n这n个数，那么表示1-n中至少有一个数，在数组中没有出现</span><br>  <span class="hljs-keyword">int</span> counter[n] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">int</span> no_see_min = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (arr[i] &gt;= <span class="hljs-number">1</span> &amp;&amp; arr[i] &lt;= n) &#123;<br>      counter[arr[i] - <span class="hljs-number">1</span>]++;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (counter[i] == <span class="hljs-number">0</span>) &#123;<br>      no_see_min = i + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"未出现的最小正整数: %d\n"</span>, no_see_min == <span class="hljs-number">0</span> ? arr[n - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span> : no_see_min);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  sqlist mysqlist;<br>  InitList(mysqlist);<br>  <span class="hljs-comment">// [ 1  2  3  4  5  6  6  7  8  8  ] 该数组通用所有题目</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">6</span> || i == <span class="hljs-number">8</span>) &#123; <span class="hljs-comment">// 6、8插入双次</span><br>      ListInsert(mysqlist, i);<br>    &#125;<br>    ListInsert(mysqlist, i);<br>  &#125;<br>  PrintList(mysqlist);<br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// int del_value;</span><br>  <span class="hljs-comment">// Del_min_P19_1(mysqlist, del_value);</span><br>  <span class="hljs-comment">// printf("删除了最小元素: %d\n", del_value);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Reverse_P19_2(mysqlist);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Del_value_equal_x_P19_3_method_1(mysqlist, 6);</span><br>  <span class="hljs-comment">// Del_value_equal_x_P19_3_method_2(mysqlist, 6);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Del_between_s_t_with_sorted_list_P19_4(mysqlist, 4, 6);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Del_between_s_t_P19_5_method1(mysqlist, 4, 6);</span><br>  <span class="hljs-comment">// Del_between_s_t_P19_5_method2(mysqlist, 4, 6);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Del_same_P19_6(mysqlist);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// sqlist combine, combine1;</span><br>  <span class="hljs-comment">// InitList(combine);</span><br>  <span class="hljs-comment">// InitList(combine1);</span><br>  <span class="hljs-comment">// Combine_two_sorted_list_P19_7(mysqlist, mysqlist, combine);</span><br>  <span class="hljs-comment">// Combine_two_sorted_list_P19_7(mysqlist, combine, combine1);</span><br>  <span class="hljs-comment">// PrintList(combine1);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// 设a1 a2 ... an = mysqlist</span><br>  <span class="hljs-comment">// 设b1 b2 ... bm = mysqlist</span><br>  <span class="hljs-comment">// 则 a1 a2 ... an b1 b2 ... bm = mysqlist mysqlist</span><br>  <span class="hljs-comment">// for (int i = 1; i &lt; 9; i++) &#123;</span><br>  <span class="hljs-comment">//   if (i == 6 || i == 8) &#123; // 6、8插入双次</span><br>  <span class="hljs-comment">//     ListInsert(mysqlist, i);</span><br>  <span class="hljs-comment">//   &#125;</span><br>  <span class="hljs-comment">//   ListInsert(mysqlist, i);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// int m = mysqlist.Length / 2;</span><br>  <span class="hljs-comment">// int n = mysqlist.Length / 2;</span><br>  <span class="hljs-comment">// Exchange_P19_8(mysqlist, m, n);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// Search_X_Exchange_Or_Insert_P20_9(mysqlist, 5);</span><br>  <span class="hljs-comment">// Search_X_Exchange_Or_Insert_P20_9(mysqlist, 9);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// int n = 10;</span><br>  <span class="hljs-comment">// int arr[] = &#123;1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// P20_10(arr, n, 3);</span><br>  <span class="hljs-comment">// printf("[ ");</span><br>  <span class="hljs-comment">// for (int i = 0; i &lt; n; i++) &#123;</span><br>  <span class="hljs-comment">//   printf("%d  ", arr[i]);</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// printf("]\n");</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// int n = 10;</span><br>  <span class="hljs-comment">// int A[] = &#123;1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// int B[] = &#123;1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// int combineAB[n * 2];</span><br>  <span class="hljs-comment">// // int mid = P20_11_MyAnswer(A, B, combineAB, n);</span><br>  <span class="hljs-comment">// int mid = P20_11_Correct(A, B, n);</span><br>  <span class="hljs-comment">// printf("mid = %d\n", mid);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// int n = 10;</span><br>  <span class="hljs-comment">// int test1[] = &#123;1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// int test2[] = &#123;6, 6, 3, 6, 5, 6, 6, 7, 8, 6&#125;;</span><br>  <span class="hljs-comment">// // P20_12_MyAnswer(test1, n);</span><br>  <span class="hljs-comment">// // P20_12_MyAnswer(test2, n);</span><br>  <span class="hljs-comment">// P20_12_Correct(test1, n);</span><br>  <span class="hljs-comment">// P20_12_Correct(test2, n);</span><br>  <span class="hljs-comment">// ================================</span><br>  <span class="hljs-comment">// int n = 10;</span><br>  <span class="hljs-comment">// int test1[] = &#123;-1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// int test2[] = &#123;-1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 8&#125;;</span><br>  <span class="hljs-comment">// // P21_13_MyAnswer(test1, n);</span><br>  <span class="hljs-comment">// // P21_13_MyAnswer(test2, n);</span><br>  <span class="hljs-comment">// P21_13_Correct(test1, n);</span><br>  <span class="hljs-comment">// P21_13_Correct(test2, n);</span><br>  <span class="hljs-comment">// ================================</span><br>  PrintList(mysqlist);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h2 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h2><h2 id="循环双向链表"><a href="#循环双向链表" class="headerlink" title="循环双向链表"></a>循环双向链表</h2><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h2 id="邻接矩阵无向图操作及BFS、DFS"><a href="#邻接矩阵无向图操作及BFS、DFS" class="headerlink" title="邻接矩阵无向图操作及BFS、DFS"></a>邻接矩阵无向图操作及BFS、DFS</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 邻接矩阵存储图</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxVertex 100</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> VertexType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> EdgeType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  VertexType Vex[MaxVertex]; <span class="hljs-comment">// 顶点标</span><br>  EdgeType Edge[MaxVertex][MaxVertex]; <span class="hljs-comment">// 邻接矩阵，边表</span><br>  <span class="hljs-keyword">int</span> vernum, arcnum; <span class="hljs-comment">// 图的当前定点数、弧数</span><br>&#125; Graph;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">(Graph &amp;graph)</span></span>;                                    <span class="hljs-comment">// 打印邻接矩阵</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InsertVertex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span></span>;             <span class="hljs-comment">// 插入顶点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DeleteVertex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span></span>;             <span class="hljs-comment">// 删除顶点</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindVertexIndex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span></span>;           <span class="hljs-comment">// 查找节点对应的索引号，没找到返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span></span>;             <span class="hljs-comment">// 添加一条无向边</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RemoveEdge</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span></span>;          <span class="hljs-comment">// 移除一条无向边</span><br><span class="hljs-function">VertexType <span class="hljs-title">FirstNeighbor</span><span class="hljs-params">(Graph &amp;graph, VertexType x)</span></span>;              <span class="hljs-comment">// 某点的第一个邻接点</span><br><span class="hljs-function">VertexType <span class="hljs-title">NextNeighbor</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span></span>; <span class="hljs-comment">// 某点除y以外的下一个邻接点</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph &amp;graph)</span></span>;                                            <span class="hljs-comment">// 广度优先搜索</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS_1</span><span class="hljs-params">(Graph &amp;graph)</span></span>;                                          <span class="hljs-comment">// 广度优先搜索(不借助辅助函数)</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph &amp;graph, <span class="hljs-keyword">int</span> v)</span></span>;                                     <span class="hljs-comment">// 深度优先搜索</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">(Graph &amp;graph, VertexType x)</span></span>;                            <span class="hljs-comment">// 访问节点</span><br><br><span class="hljs-function">VertexType <span class="hljs-title">NextNeighbor</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span> </span>&#123;<br>  <span class="hljs-comment">// 要保证上一个节点就是y，才可以</span><br>  <span class="hljs-keyword">int</span> index = FindVertexIndex(graph, x);<br>  <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-keyword">char</span> pre = <span class="hljs-string">'\0'</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (graph.Edge[index][i] == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (pre == y) &#123;<br>          <span class="hljs-keyword">return</span> graph.Vex[i];<br>        &#125;<br>        pre = graph.Vex[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'\0'</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"节点%c不存在\n"</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'\0'</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function">VertexType <span class="hljs-title">FirstNeighbor</span><span class="hljs-params">(Graph &amp;graph, VertexType x)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> index = FindVertexIndex(graph, x);<br>  <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++) &#123;<br>      <span class="hljs-keyword">if</span> (graph.Edge[index][i] == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> graph.Vex[i];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'\0'</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"节点%c不存在\n"</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'\0'</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">DeleteVertex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> index = FindVertexIndex(graph, vertexName);<br>  <span class="hljs-keyword">if</span> (index &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-comment">// 右侧向左平移覆盖删除节点的整列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = index; j &lt; graph.vernum<span class="hljs-number">-1</span>; j++) &#123;<br>        graph.Edge[i][j] = graph.Edge[i][j+<span class="hljs-number">1</span>]; <span class="hljs-comment">// 第i行j列 被 第i行j+1列的值覆盖</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 下侧向上平移覆盖删除节点的整行</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; graph.vernum; i++) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; graph.vernum<span class="hljs-number">-1</span>; j++) &#123;<br>        graph.Edge[i][j] = graph.Edge[i+<span class="hljs-number">1</span>][j]; <span class="hljs-comment">// 第i行j列 被 第i+1行j列的值覆盖</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 将目前有效范围内的矩阵最外侧全部置0</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++) &#123;<br>      graph.Edge[graph.vernum - <span class="hljs-number">1</span>][i] = <span class="hljs-number">0</span>;<br>      graph.Edge[i][graph.vernum - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将删除节点后面的节点向前移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = index; i &lt; graph.vernum - <span class="hljs-number">1</span>; i++) &#123;<br>      graph.Vex[i] = graph.Vex[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    graph.vernum--;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"要删除的节点%c不存在，请检查\n"</span>, vertexName);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">FindVertexIndex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> index = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (graph.Vex[i] == vertexName)<br>    &#123;<br>      index = i;<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> index;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">RemoveEdge</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x_index = FindVertexIndex(graph, x);<br>  <span class="hljs-keyword">int</span> y_index = FindVertexIndex(graph, y);<br>  <span class="hljs-keyword">if</span> (x_index &gt; <span class="hljs-number">-1</span> &amp;&amp; y_index &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-comment">// x y 均存在</span><br>    graph.Edge[x_index][y_index] = <span class="hljs-number">0</span>;<br>    graph.Edge[y_index][x_index] = <span class="hljs-number">0</span>;<br>    graph.arcnum--;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 有点不存在</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"节点%c或%c不存在，请检查\n"</span>, x, y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(Graph &amp;graph, VertexType x, VertexType y)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> x_index = FindVertexIndex(graph, x);<br>  <span class="hljs-keyword">int</span> y_index = FindVertexIndex(graph, y);<br>  <span class="hljs-keyword">if</span> (x_index &gt; <span class="hljs-number">-1</span> &amp;&amp; y_index &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-comment">// x y 均存在</span><br>    graph.Edge[x_index][y_index] = <span class="hljs-number">1</span>;<br>    graph.Edge[y_index][x_index] = <span class="hljs-number">1</span>;<br>    graph.arcnum++;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">// 有点不存在</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"节点%c或%c不存在，请检查\n"</span>, x, y);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintMatrix</span><span class="hljs-params">(Graph &amp;graph)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"邻接矩阵为:\n"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"  "</span>);<br>  <span class="hljs-comment">// 打印表头</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>, graph.Vex[i]);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++)<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c "</span>, graph.Vex[i]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; graph.vernum; j++) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d "</span>, graph.Edge[i][j]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">InsertVertex</span><span class="hljs-params">(Graph &amp;graph, VertexType vertexName)</span> </span>&#123;<br>  <span class="hljs-comment">// 顶点名称不允许重复</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++) &#123;<br>    <span class="hljs-keyword">if</span> (graph.Vex[i] == vertexName) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">"顶点插入重复\n"</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>  graph.Vex[graph.vernum++] = vertexName;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Visit</span><span class="hljs-params">(Graph &amp;graph, VertexType x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (FindVertexIndex(graph, x) &gt; <span class="hljs-number">-1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, x);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph &amp;graph)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"广度优先遍历(1): "</span>);<br>  <span class="hljs-built_in">queue</span>&lt;VertexType&gt; Q;<br>  <span class="hljs-keyword">bool</span> visited[graph.vernum];<br>  Q.push(graph.Vex[<span class="hljs-number">0</span>]);<br>  Visit(graph, Q.front());<br>  visited[FindVertexIndex(graph, Q.front())] = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">while</span> (!Q.empty())<br>  &#123;<br>    VertexType v = Q.front();<br>    Q.pop();<br>    <span class="hljs-keyword">int</span> times = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (VertexType w = FirstNeighbor(graph, v);; w = NextNeighbor(graph, v, w))<br>    &#123;<br>      <span class="hljs-comment">// 当前节点的下一个节点循环到FirstNeighbor 或者 当前节点无下一个节点时，循环中断</span><br>      <span class="hljs-keyword">if</span> (w == FirstNeighbor(graph, v) &amp;&amp; times++ &gt; <span class="hljs-number">0</span> || w == <span class="hljs-string">'\0'</span>) <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> (!visited[FindVertexIndex(graph, w)]) &#123;<br>        Visit(graph, w);<br>        visited[FindVertexIndex(graph, w)] = <span class="hljs-literal">true</span>;<br>        Q.push(w);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BFS_1</span><span class="hljs-params">(Graph &amp;graph)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"广度优先遍历(2): "</span>);<br>  <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; Q;<br>  <span class="hljs-keyword">bool</span> visited[graph.vernum];<br>  Q.push(<span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, graph.Vex[<span class="hljs-number">0</span>]);<br>  visited[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">while</span> (!Q.empty())<br>  &#123;<br>    <span class="hljs-keyword">int</span> v = Q.front();<br>    Q.pop();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; graph.vernum; i++)<br>    &#123;<br>      <span class="hljs-keyword">if</span> (graph.Edge[v][i] &amp;&amp; !visited[i]) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, graph.Vex[i]);<br>        visited[i] = <span class="hljs-literal">true</span>;<br>        Q.push(i);<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br>&#125;<br><br><span class="hljs-keyword">bool</span> visited[MaxVertex];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph &amp;graph, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%c"</span>, graph.Vex[v]);<br>  visited[v] = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">int</span> times = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (VertexType w = FirstNeighbor(graph, graph.Vex[v]);; w = NextNeighbor(graph, graph.Vex[v], w)) &#123;<br>    <span class="hljs-comment">// 当前节点的下一个节点循环到FirstNeighbor 或者 当前节点无下一个节点时，循环中断</span><br>    <span class="hljs-keyword">if</span> (w == FirstNeighbor(graph, graph.Vex[v]) &amp;&amp; times++ &gt; <span class="hljs-number">0</span> || w == <span class="hljs-string">'\0'</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">int</span> w_index = FindVertexIndex(graph, w);<br>    <span class="hljs-keyword">if</span> (!visited[w_index])<br>      DFS(graph, w_index);<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-comment">// 初始化一个无向图 P227 图6.11</span><br>  Graph graph;<br>  InsertVertex(graph, <span class="hljs-string">'A'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'B'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'C'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'D'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'E'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'F'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'G'</span>);<br>  InsertVertex(graph, <span class="hljs-string">'H'</span>);<br>  AddEdge(graph, <span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>);<br>  AddEdge(graph, <span class="hljs-string">'A'</span>, <span class="hljs-string">'C'</span>);<br>  AddEdge(graph, <span class="hljs-string">'B'</span>, <span class="hljs-string">'D'</span>);<br>  AddEdge(graph, <span class="hljs-string">'B'</span>, <span class="hljs-string">'E'</span>);<br>  AddEdge(graph, <span class="hljs-string">'C'</span>, <span class="hljs-string">'F'</span>);<br>  AddEdge(graph, <span class="hljs-string">'C'</span>, <span class="hljs-string">'G'</span>);<br>  AddEdge(graph, <span class="hljs-string">'D'</span>, <span class="hljs-string">'E'</span>);<br>  AddEdge(graph, <span class="hljs-string">'D'</span>, <span class="hljs-string">'H'</span>);<br>  AddEdge(graph, <span class="hljs-string">'E'</span>, <span class="hljs-string">'H'</span>);<br><br>  <span class="hljs-comment">// PrintMatrix(graph);</span><br>  <span class="hljs-comment">// DeleteVertex(graph, 'B');</span><br>  <span class="hljs-comment">// RemoveEdge(graph, 'A', 'C');</span><br><br>  PrintMatrix(graph);<br><br>  <span class="hljs-comment">// char vex = 'B';</span><br>  <span class="hljs-comment">// char res = FirstNeighbor(graph, vex);</span><br>  <span class="hljs-comment">// printf("%c节点的首个邻接节点为%c\n", vex, res);</span><br>  <span class="hljs-comment">// char res1 = NextNeighbor(graph, vex, res);</span><br>  <span class="hljs-comment">// printf("%c节点的下一个邻接节点为%c\n", vex, res1);</span><br>  <span class="hljs-comment">// printf("%c节点的下下一个邻接节点为%c\n", vex, NextNeighbor(graph, vex, res1));</span><br><br>  BFS(graph);<br>  BFS_1(graph);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"深度优先遍历(1): "</span>);<br>  DFS(graph, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"\n"</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><h2 id="二分查找-折半查找-Binary-Search"><a href="#二分查找-折半查找-Binary-Search" class="headerlink" title="二分查找/折半查找(Binary Search)"></a>二分查找/折半查找(Binary Search)</h2><ul><li><input checked disabled type="checkbox"> mid = (low+high)/2 向下取整，即强转int即可</li><li><input checked disabled type="checkbox"> T(n) = O(log2n)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"../tools.h"</span></span><br><br><span class="hljs-comment">/* 二分查找 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arr[], <span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> find)</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> low = <span class="hljs-number">0</span>, high = len - <span class="hljs-number">1</span>, mid;<br>  <span class="hljs-keyword">while</span> (low &lt;= high)<br>  &#123;<br>    mid = (low + high) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (find == arr[mid]) &#123;<br>      <span class="hljs-keyword">return</span> mid;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (find &gt; arr[mid]) &#123;<br>      low = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      high = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="附录一"><a href="#附录一" class="headerlink" title="附录一"></a>附录一</h1><ul><li>tools.h</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><figcaption><span>tools.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iso646.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_INT 0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_FLOAT 1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TYPE_DOUBLE 2</span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/* ==================================== */</span><br><span class="hljs-comment">/* 预定义 */</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printf</span><span class="hljs-params">(T *<span class="hljs-built_in">list</span>)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(T *<span class="hljs-built_in">list</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">rand_list</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> type)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a, T *b)</span></span>;<br><br><span class="hljs-comment">/* ==================================== */</span><br><br><br><span class="hljs-comment">/* 快速打印数组 */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printf</span><span class="hljs-params">(T *<span class="hljs-built_in">list</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"["</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; count(<span class="hljs-built_in">list</span>); i++)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>      <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">", "</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; *(<span class="hljs-built_in">list</span> + i);<br>  &#125;<br>  <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"]"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">/* 获取数组长度 */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">count</span><span class="hljs-params">(T *p)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> malloc_usable_size(p) / <span class="hljs-keyword">sizeof</span>(*p) - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">/** 随机数组</span><br><span class="hljs-comment"> * @param int size : size of array</span><br><span class="hljs-comment"> * @param int type : the array-item's type</span><br><span class="hljs-comment"> * @param bool can_repeat : repeat number in the array</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span>* <span class="hljs-title">rand_list</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len, <span class="hljs-keyword">int</span> type, <span class="hljs-keyword">bool</span> can_repeat)</span></span><br><span class="hljs-function"></span>&#123;<br>  srand((<span class="hljs-keyword">unsigned</span>)time(<span class="hljs-literal">NULL</span>));<br>  <span class="hljs-keyword">if</span> (type == TYPE_INT &amp;&amp; len &lt; <span class="hljs-number">10</span>)<br>  &#123;<br>    <span class="hljs-keyword">int</span> *p = (<span class="hljs-keyword">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>) * len);<br>    <span class="hljs-keyword">int</span> rand_number = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> repeat_flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> sgn = <span class="hljs-number">0</span>; <span class="hljs-comment">// 随机符号，0正 1负</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    &#123;<br>      regenerate:<br>      sgn = rand() % (<span class="hljs-number">2</span> - <span class="hljs-number">0</span>) + <span class="hljs-number">0</span>;<br>      rand_number = rand() % (<span class="hljs-number">10</span> - <span class="hljs-number">0</span>) + <span class="hljs-number">0</span>;<br>      rand_number = (sgn == <span class="hljs-number">0</span> ? rand_number : rand_number * (<span class="hljs-number">-1</span>));<br>      <span class="hljs-keyword">if</span> (can_repeat)<br>      &#123;<br>        <span class="hljs-comment">// 允许数字重复</span><br>        *(p + i) = rand_number;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        repeat_flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>        &#123;<br>          <span class="hljs-keyword">if</span> (*(p + j) ==  rand_number) &#123;<br>            repeat_flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (repeat_flag) &#123;<br>          <span class="hljs-comment">// 重复了</span><br>          <span class="hljs-keyword">goto</span> regenerate;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          *(p + i) = rand_number;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == TYPE_FLOAT)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == TYPE_DOUBLE)<br>  &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/* 交换参数值 */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T *a, T *b)</span> </span>&#123;<br>  T temp = *a;<br>  *a = *b;<br>  *b = temp;<br>&#125;<br></code></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;gcc -v: gcc version 5.5.0 20171010 (Ubuntu 5.5.0-12ubuntu1~16.04) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;线性表-Liner-List&quot;&gt;&lt;a href=&quot;#线性表-L
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.webpro.ltd/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://blog.webpro.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>怎么用电脑自带软件修改图片分辨率 修改尺寸</title>
    <link href="http://blog.webpro.ltd/2020/06/01/changeImgSize/"/>
    <id>http://blog.webpro.ltd/2020/06/01/changeImgSize/</id>
    <published>2020-06-01T14:12:27.000Z</published>
    <updated>2020-06-02T10:36:32.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Powered-by-webpro-ltd"><a href="#Powered-by-webpro-ltd" class="headerlink" title="Powered by webpro.ltd"></a>Powered by webpro.ltd</h2><h2 id="本教程部分图片来源百度经验，仅供学习传播-https-jingyan-baidu-com-article-4d58d5415dba1f9dd5e9c048-html"><a href="#本教程部分图片来源百度经验，仅供学习传播-https-jingyan-baidu-com-article-4d58d5415dba1f9dd5e9c048-html" class="headerlink" title="本教程部分图片来源百度经验，仅供学习传播(https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html)"></a>本教程部分图片来源百度经验，仅供学习传播(<a href="https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html</a>)</h2><h2 id="安徽工业大学电子毕业纪念册照片处理"><a href="#安徽工业大学电子毕业纪念册照片处理" class="headerlink" title="安徽工业大学电子毕业纪念册照片处理"></a>安徽工业大学电子毕业纪念册照片处理</h2><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>每张照片准备一个对应的缩略图</li><li>每张照片要求均为jpg格式</li><li>照片需要从1.jpg往下自增编号（1.jpg,2.jpg,…）</li><li>缩略图同照片一样从1.jpg往下自增编号（1.jpg,2.jpg,…）</li><li>缩略图1.jpg要对应这个照片1.jpg</li><li>缩略图建议尺寸：125 x 125</li><li>照片建议尺寸：750 x 500</li></ul><blockquote><p>本教程使用win电脑自带的画图工具完成</p></blockquote><blockquote><p>如果照片比较大，打开后可按ctrl+滚轮进行比例缩放，调整到和屏幕尺寸相宜</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p>windows系统默认画图软件</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="右击图片"><a href="#右击图片" class="headerlink" title="右击图片"></a>右击图片</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601222801.PNG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601222801.PNG" class="lazyload" title></a></p><h3 id="点击-编辑"><a href="#点击-编辑" class="headerlink" title="点击 编辑"></a>点击 编辑</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601223801.JPG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601223801.JPG" class="lazyload" title></a></p><h3 id="点击-重新调整大小"><a href="#点击-重新调整大小" class="headerlink" title="点击 重新调整大小"></a>点击 重新调整大小</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601223914.JPG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601223914.JPG" class="lazyload" title></a></p><h3 id="输入水平或垂直百分比。"><a href="#输入水平或垂直百分比。" class="headerlink" title="输入水平或垂直百分比。"></a>输入水平或垂直百分比。</h3><ul><li><p>当勾选了 保持纵横比选项 ，软件会根据百分比和输入的水平或垂直自动调整图片尺寸。</p></li><li><p>取消勾选 保持纵横比选项 任意输入想要的水平 垂直 数值</p></li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224011.JPG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224011.JPG" class="lazyload" title></a></p><h3 id="点击-像素-，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小"><a href="#点击-像素-，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小" class="headerlink" title="点击 像素 ，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小"></a>点击 像素 ，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224026.JPG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224026.JPG" class="lazyload" title></a></p><h3 id="修改好后，点击确定，最后点击文件–-gt-保存按钮（ctrl-s），在软件下方还可看到图片此时的分辨率和大小"><a href="#修改好后，点击确定，最后点击文件–-gt-保存按钮（ctrl-s），在软件下方还可看到图片此时的分辨率和大小" class="headerlink" title="修改好后，点击确定，最后点击文件–&gt;保存按钮（ctrl+s），在软件下方还可看到图片此时的分辨率和大小"></a>修改好后，点击确定，最后点击文件–&gt;保存按钮（ctrl+s），在软件下方还可看到图片此时的分辨率和大小</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224033.JPG" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200601224033.JPG" class="lazyload" title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Powered-by-webpro-ltd&quot;&gt;&lt;a href=&quot;#Powered-by-webpro-ltd&quot; class=&quot;headerlink&quot; title=&quot;Powered by webpro.ltd&quot;&gt;&lt;/a&gt;Powered by webpro.ltd&lt;/
      
    
    </summary>
    
    
      <category term="windows10" scheme="http://blog.webpro.ltd/categories/windows10/"/>
    
    
      <category term="画图" scheme="http://blog.webpro.ltd/tags/%E7%94%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Github + jsdelivr + PicGo 搭建免费稳定高速图床</title>
    <link href="http://blog.webpro.ltd/2020/03/14/github-picBed/"/>
    <id>http://blog.webpro.ltd/2020/03/14/github-picBed/</id>
    <published>2020-03-14T00:52:27.000Z</published>
    <updated>2020-03-15T10:47:04.825Z</updated>
    
    <content type="html"><![CDATA[<style>.flex-img {  display: flex;}.flex-img-item {  text-align: center;}</style><h1 id="图床概述"><a href="#图床概述" class="headerlink" title="图床概述"></a>图床概述</h1><div class="flex-img">  <div class="flex-img-item">    <a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312153906.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312153906.png" class="lazyload"></a>    <span><b>GitHub</b></span>  </div>  <div class="flex-img-item">    <a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314110013.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314110013.png" class="lazyload"></a>    <span><b>jsdelivr</b></span>  </div>  <div class="flex-img-item">    <a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314091317.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314091317.png" class="lazyload"></a>    <span><b>PicGo</b></span>  </div></div><br><blockquote><p>为什么要用图床</p></blockquote><p>写博客文章时，往往要附带一些图片，而图片并非文字，存储方式也非单纯的以文本方式存储。往往需要把图片统一托管起来，这样操作比较方便，便于批量操作。另外我的博客使用hexo框架，静态博客框架，需要分离文章和图片，写文章时采用<code>markwodn + 图床</code>方式会获得极佳体验。</p><blockquote><p>什么是图床</p></blockquote><p>图床类似于OSS对象存储，OSS存储的对象相对来说比较广泛，而图床只是用来存储图片。将图片上传到图床，通过<code>url</code>进行图片资源访问。</p><blockquote><p>图床的选择</p></blockquote><ul><li><p>微博图床：以前用的人较多，2019年4月开始开启防盗链，已经失效。</p></li><li><p>SM.MS：香港个人开发，每个用户免费5GB空间，但速度较慢。</p></li><li><p>ImgUrl：国外图床，速度较慢。</p></li><li><p>又拍云、七牛云、腾讯云、阿里云等国内服务商：需要备案、实名认证（支付宝实名认证、人脸识别认证等等），能不透露个人信息尽量不透露，保护好隐私。</p></li><li><p>GitHub：使用公开Git仓库做存储，免费，单个文件大小有限制(不超过100MB，一张高清图片500KB左右，足够)。直接通过GitHub访问图片，速度较慢，但是配合CDN：<code>jsdelivr</code>，速度非常快，<code>jsdelivr</code>支持加速来自GitHub的文件，1MB的PDF可以秒开。</p></li><li><p>cdn.jsdelivr.net在国内的ping值<br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200315184536.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200315184536.png" class="lazyload" title></a></p></li></ul><h1 id="GitHub图床配置步骤"><a href="#GitHub图床配置步骤" class="headerlink" title="GitHub图床配置步骤"></a>GitHub图床配置步骤</h1><h2 id="创建图床仓库"><a href="#创建图床仓库" class="headerlink" title="创建图床仓库"></a>创建图床仓库</h2><ul><li>设置仓库名称</li><li>使用README.md文件初始化仓库</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113026.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113026.png" class="lazyload" title></a></p><h2 id="生成-personal-access-token"><a href="#生成-personal-access-token" class="headerlink" title="生成 personal access token"></a>生成 personal access token</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113809.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113809.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113808.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113808.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113811.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113811.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113810.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113810.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113916.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314113916.png" class="lazyload" title></a></p><ul><li>创建成功后，把token粘贴下来(GitHub不会保存token，一旦你丢失，重新生成即可)</li></ul><h2 id="下载PicGo图床管理工具"><a href="#下载PicGo图床管理工具" class="headerlink" title="下载PicGo图床管理工具"></a>下载PicGo图床管理工具</h2><p><a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo下载(GitHub)</a></p><ul><li>安装完毕后，开启GitHub图床</li><li>设定仓库名：<code>用户名/仓库名</code></li><li>设定分支名：<code>master</code></li><li>设定Token：上个步骤获取到的<code>token</code></li><li>指定存储路径：<code>/img</code>，根据自己需要设置文件夹名称</li><li>设定自定义域名（这个要设置成jsdelivr的CDN的加速地址）：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code></li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114608.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114608.png" class="lazyload" title></a></p><h1 id="测试GitHub图床"><a href="#测试GitHub图床" class="headerlink" title="测试GitHub图床"></a>测试GitHub图床</h1><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114651.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114651.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114607.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200314114607.png" class="lazyload" title></a></p><ul><li>在相册中查看上传的图片</li></ul><blockquote><p>更多灵活的用法等待你去发现！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
.flex-img {
  display: flex;
}
.flex-img-item {
  text-align: center;
}
&lt;/style&gt;

&lt;h1 id=&quot;图床概述&quot;&gt;&lt;a href=&quot;#图床概述&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="github" scheme="http://blog.webpro.ltd/categories/github/"/>
    
    
      <category term="github" scheme="http://blog.webpro.ltd/tags/github/"/>
    
      <category term="jsdelivr" scheme="http://blog.webpro.ltd/tags/jsdelivr/"/>
    
      <category term="PicGo" scheme="http://blog.webpro.ltd/tags/PicGo/"/>
    
      <category term="图床" scheme="http://blog.webpro.ltd/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>My Hexo Blog</title>
    <link href="http://blog.webpro.ltd/2020/03/05/My-Hexo-Blog/"/>
    <id>http://blog.webpro.ltd/2020/03/05/My-Hexo-Blog/</id>
    <published>2020-03-05T13:48:00.000Z</published>
    <updated>2020-03-09T12:07:12.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客全新升级为Hexo引擎"><a href="#博客全新升级为Hexo引擎" class="headerlink" title="博客全新升级为Hexo引擎"></a>博客全新升级为Hexo引擎</h1><h2 id="markdown支持测试"><a href="#markdown支持测试" class="headerlink" title="markdown支持测试"></a>markdown支持测试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 欢迎使用 Markdown在线编辑器 MdEditor</span><br><span class="hljs-strong">**Markdown是一种轻量级的「标记语言」**</span><br></code></pre></td></tr></table></figure></div><h1 id="欢迎使用-Markdown在线编辑器-MdEditor"><a href="#欢迎使用-Markdown在线编辑器-MdEditor" class="headerlink" title="欢迎使用 Markdown在线编辑器 MdEditor"></a>欢迎使用 Markdown在线编辑器 MdEditor</h1><p><strong>Markdown是一种轻量级的「标记语言」</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![](https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123251.png)<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123251.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123251.png" class="lazyload" title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客全新升级为Hexo引擎&quot;&gt;&lt;a href=&quot;#博客全新升级为Hexo引擎&quot; class=&quot;headerlink&quot; title=&quot;博客全新升级为Hexo引擎&quot;&gt;&lt;/a&gt;博客全新升级为Hexo引擎&lt;/h1&gt;&lt;h2 id=&quot;markdown支持测试&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="blog" scheme="http://blog.webpro.ltd/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://blog.webpro.ltd/tags/hexo/"/>
    
      <category term="blog" scheme="http://blog.webpro.ltd/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Centos6.10服务器入侵-&gt;重装-&gt;恢复记录</title>
    <link href="http://blog.webpro.ltd/2020/02/22/My-Server-Attacked-by-Scanner/"/>
    <id>http://blog.webpro.ltd/2020/02/22/My-Server-Attacked-by-Scanner/</id>
    <published>2020-02-21T16:00:00.000Z</published>
    <updated>2020-03-09T12:10:41.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos6-10服务器入侵-gt-重装-gt-恢复记录"><a href="#Centos6-10服务器入侵-gt-重装-gt-恢复记录" class="headerlink" title="Centos6.10服务器入侵-&gt;重装-&gt;恢复记录"></a>Centos6.10服务器入侵-&gt;重装-&gt;恢复记录</h1><ul><li>头些天在centos6.10服务器创建了一个git账户用来搭建私有Git仓库，账户和密码均为git，并且支持ssh密码远程连接，很快被黑客扫描到，通过ssh弱口令进到我的git账户，并操纵我的服务器扫描其他持续扫描其他服务器，被购买服务器的主机商的防火墙发现，锁定了我的服务器。也是在与客服的沟通中，他问我的服务器ssh密码是否过于简单，正是弱口令使我的服务器沦陷。病毒已经植入到我的系统中，为了彻底解决，客服建议我重装系统，尽管服务器上面的数据比较多，我还是硬着头皮备份、重装了一次系统，搞了整整一天，服务器上的功能基本恢复。</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123405.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123405.png" class="lazyload" title></a></p><ul><li>上一次配置服务器还是在2年前，当时安全意识较差，认为防火墙是多余的，把防火墙直接关闭，使得服务器上可以任意向外发送数据、服务器上的任何端口都向外开放；很多程序都放到root账户下运行；为了省事，设置及其简单的密码，每当看到网络安全相关资料讲解“弱口令”时，感觉弱口令离我非常遥远，不以为然。这些做法都是极其危险的，也是一步一步使我服务器沦陷的最终原因。</li></ul><h2 id="一、备份WEB站点（root账户）"><a href="#一、备份WEB站点（root账户）" class="headerlink" title="一、备份WEB站点（root账户）"></a>一、备份WEB站点（root账户）</h2><ul><li><p>我安装的WEB服务软件为国产的Kangle服务器，应该很少有人听说，Kangle就相当于平时我们所常见的Apache、Nginx，也是一款能够提供WEB访问控制服务的软件。</p></li><li><p>Kangle站点文件存放在<code>/home/ftp</code>下，Kangle一些相关的账户配置信息存储在<code>/vhs/kangle/etc</code>，首先备份这两个文件夹，然后下载压缩包到本地：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ftp<br>zip -r ftp.zip ftp<br><span class="hljs-built_in">cd</span> /vhs/kangle/etc/<br>zip -r etc.zip etc<br></code></pre></td></tr></table></figure></div><h2 id="二、备份MySQL数据库（root账户）"><a href="#二、备份MySQL数据库（root账户）" class="headerlink" title="二、备份MySQL数据库（root账户）"></a>二、备份MySQL数据库（root账户）</h2><ul><li><p>备份MySQL可以使用Navicat以root账户的身份登陆，导出所有数据库即可（安全起见，MySQL在默认状态是不允许从外网以root账户远程连接，在备份的时候需要手动设置将localhst改成%）。</p></li><li><p>MySQL配置允许远程连接</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入MySQL</span><br>mysql -uroot -p<br><br><span class="hljs-comment"># 切换到mysql库</span><br>use mysql;<br><br><span class="hljs-comment"># 查看用户表</span><br>SELECT `Host`,`User` FROM user;<br><br><span class="hljs-comment"># 更新用户表</span><br>UPDATE user SET `Host` = <span class="hljs-string">'%'</span> WHERE `User` = <span class="hljs-string">'用户名'</span> LIMIT 1;<br><br><span class="hljs-comment"># 强制刷新权限</span><br>flush privileges;<br><br><span class="hljs-comment"># 关闭mysql</span><br><span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></figure></div><ul><li><p>如果你安装了phpmyadmin也可以以root身份登陆管理页面，导出数据库。</p></li><li><p>我在服务器上设置了定时任务，即每天01:00将整个数据库备份一次，永久保存在服务器上，恰好今天在重装系统前没有对数据库再进行修改，于是我直接使用了今天凌晨1点的全备份来恢复系统。尽管安装系统时仅格式化系统盘，但是为了安全起见，我把sql备份文件下载到了本地。</p></li></ul><h2 id="三、备份tomcat9、gitea（git账户）"><a href="#三、备份tomcat9、gitea（git账户）" class="headerlink" title="三、备份tomcat9、gitea（git账户）"></a>三、备份tomcat9、gitea（git账户）</h2><ul><li>git账户下运行着tomcat和gitea(开源git仓库面板，轻量级)，将这两个相关的文件全部压缩，下载。</li></ul><h2 id="四、备份root账户下的frp内网穿透软件（root）"><a href="#四、备份root账户下的frp内网穿透软件（root）" class="headerlink" title="四、备份root账户下的frp内网穿透软件（root）"></a>四、备份root账户下的frp内网穿透软件（root）</h2><ul><li>第三步忘记了备份内网穿透，再次切换到root用户，找到frp的安装位置，压缩，下载：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>zip -r frp.zip frp<br></code></pre></td></tr></table></figure></div><h2 id="五、重装系统"><a href="#五、重装系统" class="headerlink" title="五、重装系统"></a>五、重装系统</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123407.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123407.png" class="lazyload" title></a></p><ul><li>仍然选择centos6.10，并仅格式化系统盘，手机验证码确认，重装。大概5分钟，系统重装完成.（实际这里第一次重装系统时我选的centos7，但是装完之后发现centos7与centos6之间的操作还是存在一定差异的，用着不顺手，就又重装了一次，装回了centos6）</li></ul><h2 id="六、恢复服务器环境及功能"><a href="#六、恢复服务器环境及功能" class="headerlink" title="六、恢复服务器环境及功能"></a>六、恢复服务器环境及功能</h2><ul><li>由于重装系统时保留了数据盘，因此重装完毕之后。/home目录下的文件夹并没有清空。众所周知，Linux一般是一个账户对应一个/home目录下的文件夹，我们应先把这些目录清理干净，防止造成冲突。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除git用户</span><br>userdel git<br></code></pre></td></tr></table></figure></div><ul><li><p>设置ssh，允许远程连接。我的服务器重装完毕后已经配置好ssh，直接连接即可。</p></li><li><p>重装Kangle服务器，恢复站点数据（FTP站点及服务器参数配置文件）。</p></li><li><p>重装MySQL，恢复MySQL数据：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -p mysql &gt; /backup/20200222.sql<br></code></pre></td></tr></table></figure></div><hr><ul><li>安装git(version &gt;= 2.16)</li></ul><h3 id="卸载旧版本git"><a href="#卸载旧版本git" class="headerlink" title="卸载旧版本git"></a>卸载旧版本git</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove git<br></code></pre></td></tr></table></figure></div><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum install  gcc perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure></div><h3 id="下载安装libiconv"><a href="#下载安装libiconv" class="headerlink" title="下载安装libiconv"></a>下载安装libiconv</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz<br>tar -zxvf libiconv-1.15.tar.gz<br><span class="hljs-built_in">cd</span> libiconv-1.15<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/libiconv  &amp;&amp;  make  &amp;&amp; make install<br></code></pre></td></tr></table></figure></div><h3 id="下载安装Git"><a href="#下载安装Git" class="headerlink" title="下载安装Git"></a>下载安装Git</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>wget https://www.kernel.org/pub/software/scm/git/git-2.11.0.tar.gz<br>tar -zxvf git-2.11.0.tar.gz<br><span class="hljs-built_in">cd</span> git-2.11.0<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/git-2.11.0 --with-iconv=/usr/<span class="hljs-built_in">local</span>/libiconv<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure></div><h3 id="检查版本号"><a href="#检查版本号" class="headerlink" title="检查版本号"></a>检查版本号</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123406.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123406.png" class="lazyload" title></a></p><hr><ul><li>安装jdk1.8。我安装的系统位centos6.10 x64，安装jdk1.8。具体版本号为：jdk-8u201-linux-x64.tar.gz。由于已经在本地存过jdk，直接通过SSH上传到/usr/local中：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u201-linux-x64.tar.gz<br>vi /etc/profile<br></code></pre></td></tr></table></figure></div><ul><li>在profile文件中追加如下文本：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># jdk8 env</span><br>JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/dev/jdk1.8.0_201<br>CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><span class="hljs-built_in">export</span> PATH JAVA_HOME CLASSPATH<br></code></pre></td></tr></table></figure></div><ul><li>保存退出，使环境变量生效：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></div><hr><ul><li><p>升级内核。centos6.10的默认内核版本是2.x，但是gitea内核版本要求在3.x，所以需要升级内核。</p></li><li><p>查看当前内核版本</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uname -r<br></code></pre></td></tr></table></figure></div><ul><li>查看当前系统相关信息(内核版本号、硬件架构、主机名称和操作系统类型等)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uname -a<br></code></pre></td></tr></table></figure></div><ul><li>导入public key</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br></code></pre></td></tr></table></figure></div><ul><li>安装ELRepo到CentOS</li><li>先要进入后面的网址，<a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">http://elrepo.org/tiki/tiki-index.php</a> 选择要安装的ELRepo </li><li>以下是centos6需要的资源</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure></div><ul><li>安装 kernel-lt（lt=long-term）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum --enablerepo=elrepo-kernel install kernel<span class="hljs-_">-lt</span> -y<br></code></pre></td></tr></table></figure></div><ul><li>编辑grub.conf文件，修改Grub引导顺序</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/grub.conf<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123409.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123409.png" class="lazyload" title></a></p><ul><li><p>因为一般新安装的内核在第一个位置，所以设置default=0，表示启动新内核</p></li><li><p>重启系统</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shutdown -r now<br></code></pre></td></tr></table></figure></div><ul><li>再次查看内核版本，已经升级成<code>4.4.214-1.el6.elrepo.x86_64</code></li></ul><hr><ul><li><p>创建git账户，在git账户中恢复tomcat、frp、gitea服务。为了增强密码安全性，我使用KeePass软件生成了一个128位的密码。在git账户中上传备份过的tomcat9、frp、gitea，解压并配置相关文件，启动tomcat、frp、gitea并保持在后台运行。</p></li><li><p>添加MySQL自动完整备份</p></li><li><p>在/home/backup/创建autobackupmysql.sh，编辑：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=`date +%Y%m%d`<br>mysqldump -uroot -p密码 --all-databases &gt;/home/backup/<span class="hljs-variable">$filename</span>.sql<br></code></pre></td></tr></table></figure></div><ul><li>添加cron</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br>0 1 * * * /home/backup/autobackupmysql.sh<br></code></pre></td></tr></table></figure></div><hr><h2 id="七、服务器安全性增强设置"><a href="#七、服务器安全性增强设置" class="headerlink" title="七、服务器安全性增强设置"></a>七、服务器安全性增强设置</h2><ul><li>主要从以下两方面入手：</li></ul><ol><li>禁止使用ssh密码方式连接，改为ssh证书连接。</li><li>配置安全策略较强的iptables策略，将iptables的INPUT,FORWARD,OUTPUT策略全部设置为DROP，即出现在所有进出站服务都要在iptables的INPUT和OUTPUT上添加记录，否则无法访问服务。</li></ol><ul><li>1.修改ssh连接方式，由于我有root和git两个账户，因此需要分别生成私钥。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ssh">su root<br>ssh-keygen -t rsa<br>cd ~&#x2F;.ssh<br></code></pre></td></tr></table></figure></div><ul><li>将公钥设置为服务器的登录公钥</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv id_rsa.pub authorized_keys<br></code></pre></td></tr></table></figure></div><ul><li>查看私钥并保存到本地</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat id_rsa<br></code></pre></td></tr></table></figure></div><ul><li>设置ssh，禁止密码登录，改用私钥登录</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure></div><ul><li>修改PasswordAuthentication 改为 no，然后重启sshd服务</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service sshd restart<br></code></pre></td></tr></table></figure></div><ul><li>再次连接使用ssh私钥即可直接登陆。其他账户的操作方法同root账户。</li></ul><hr><ul><li>2.iptable安全策略，首先将INPUT,FORWARD,OUTPUT策略全部设置为DROP（即白名单模式，不设置默认黑名单）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -P INPUT DROP<br>iptables -P OUTPUT ACCEPT<br>iptables -P FORWARD DROP<br></code></pre></td></tr></table></figure></div><ul><li><p>注意，上面的命令，当你执行第一条<em>iptables -P INPUT DROP</em>时，会发现你的ssh连接断开，这就说明第一条配置生效了，剩下的配置需要到主机商后台管理页面使用VNC进行连接操作。</p></li><li><p>首先开启22端口，允许其出站入站</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT<br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li><p>查看iptables状态，若22端口已添加，那么断开VNC，再到我们的ssh连接软件去操作（ssh终端可以复制粘贴，VNC不能，所以尽快配置好22端口）</p></li><li><p>首先需要开放本机回环地址（127.0.0.1），即允许本机内互相访问</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -i lo -j ACCEPT<br>iptables -A OUTPUT -o lo -j ACCEPT<br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li>添加完毕后，我的服务器还需要陆续开放WEB服务所需的80、443s端口、3306数据库端口、允许ICMP包通过（ping）等等</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 80 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT<br><br>iptables -A INPUT -p tcp --dport 443 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 443 -j ACCEPT<br><br>iptables -A INPUT -p tcp --dport 3306 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 3306 -j ACCEPT<br><br>iptables -A INPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-request -j ACCEPT<br>iptables -A OUTPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-reply -j ACCEPT<br><br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li>配置完毕后，重启防火墙</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service iptables restart<br></code></pre></td></tr></table></figure></div><ul><li>我的服务器上运行的tomcat、gitea等服务，使用Kangle服务器提供的反向代理进行使用，即代理到127.0.0.1:port，这样更加安全，避免没必要的端口暴露。</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123408.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123408.png" class="lazyload" title></a></p><ul><li>这是我的防火墙配置</li></ul><hr><blockquote><p>到这里，服务器重装及环境的恢复总算基本完成，下一步就是进行各项功能的测试。这一次的攻击事件也使我加强了对网络安全的认识，计算机网络中无时无刻都在进行这各种扫描、嗅探、入侵，只有我们防护好自己的服务器，滴水不漏，才能保证服务器和数据服务的安全可靠。</p></blockquote><hr><hr><blockquote><p>常用路径及命令</p></blockquote><ul><li>redis官方下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></li><li>redis安装——进入到安装目录，直接运行make，然后启动即可</li><li>redis安装目录：<code>/usr/local/dev/redis-3.0.5</code></li><li>redis启动 <code>nohup /usr/local/dev/redis-3.0.5/bin/redis-server /usr/local/dev/redis-3.0.5/redis.conf &amp;</code></li><li>redis测试 <code>/usr/local/dev/redis-3.0.5/bin/redis-cli</code></li><li>centos6.10添加开机自启，<code>vi /etc/rc.d/rc.local</code></li><li>环境变量文件<code>vi /etc/profile</code>,<code>source /etc/profile</code></li><li>如果上面的环境变量文件配置了不生效，则配置<code>vi /etc/bashrc</code>,<code>source /etc/bashrc</code></li><li>jdk环境配置，下载压缩包，解压到某一路径，配置profile，保存，使profile生效</li><li>springboot部署命令：<code>java -jar -Dspring.profiles.active=test demo-0.0.1-SNAPSHOT.jar</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos6-10服务器入侵-gt-重装-gt-恢复记录&quot;&gt;&lt;a href=&quot;#Centos6-10服务器入侵-gt-重装-gt-恢复记录&quot; class=&quot;headerlink&quot; title=&quot;Centos6.10服务器入侵-&amp;gt;重装-&amp;gt;恢复记录&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="centos6.10" scheme="http://blog.webpro.ltd/tags/centos6-10/"/>
    
  </entry>
  
  <entry>
    <title>How To Use Git</title>
    <link href="http://blog.webpro.ltd/2020/02/10/how-to-use-git/"/>
    <id>http://blog.webpro.ltd/2020/02/10/how-to-use-git/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2020-03-10T08:11:07.396Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>git fetch</code>和<code>git pull</code>的关系图</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309225314.jpg" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309225314.jpg" class="lazyload" title></a></p><hr><h1 id="一、Git的3层结构"><a href="#一、Git的3层结构" class="headerlink" title="一、Git的3层结构"></a>一、Git的3层结构</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">working directory</td><td align="left">工作区</td></tr><tr><td align="left">staging index</td><td align="left">暂存区</td></tr><tr><td align="left">git directory(Repository)</td><td align="left">版本库</td></tr></tbody></table><h1 id="二、Git中文件的4种状态基本状态"><a href="#二、Git中文件的4种状态基本状态" class="headerlink" title="二、Git中文件的4种状态基本状态"></a>二、Git中文件的4种状态基本状态</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">untracked</td><td align="left">未被追踪的</td></tr><tr><td align="left">modified</td><td align="left">表示工作区修改了某个文件但是还没有添加到暂存区</td></tr><tr><td align="left">Staged</td><td align="left">表示把工作区修改的文件添加到了暂存区但是没有提交到版本库</td></tr><tr><td align="left">Committed</td><td align="left">表示数据被安全的存储在本地库中</td></tr></tbody></table><h1 id="三、vscode中文件的Git状态提示"><a href="#三、vscode中文件的Git状态提示" class="headerlink" title="三、vscode中文件的Git状态提示"></a>三、vscode中文件的Git状态提示</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>M</code></td><td align="left">修改了文件但没有提交到暂存区</td></tr><tr><td align="left"><code>A</code></td><td align="left">增加的文件</td></tr><tr><td align="left"><code>C</code></td><td align="left">文件的一个新拷贝</td></tr><tr><td align="left"><code>D</code></td><td align="left">删除的一个文件</td></tr><tr><td align="left"><code>M</code></td><td align="left">文件的内容或者mode被修改了</td></tr><tr><td align="left"><code>R</code></td><td align="left">文件名被修改了</td></tr><tr><td align="left"><code>T</code></td><td align="left">文件的类型被修改了</td></tr><tr><td align="left"><code>U</code></td><td align="left">文件没有被合并(你需要完成合并才能进行提交)</td></tr><tr><td align="left"><code>X</code></td><td align="left">未知状态。(很可能是遇到git的bug了，你可以向git提交bug report)</td></tr></tbody></table><h1 id="四、指令"><a href="#四、指令" class="headerlink" title="四、指令"></a>四、指令</h1><h2 id="配置指令"><a href="#配置指令" class="headerlink" title="配置指令"></a>配置指令</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git config –list</td><td align="left">查看配置信息</td></tr><tr><td align="left">git config –global user.name Bill</td><td align="left">配置用户信息姓名</td></tr><tr><td align="left">git config –global user.email <a href="mailto:xxx@mail.com">xxx@mail.com</a></td><td align="left">配置用户信息邮箱</td></tr><tr><td align="left">git log</td><td align="left">查看提交日志</td></tr><tr><td align="left">git log –oneline</td><td align="left">查看提交日志一行一条记录</td></tr></tbody></table><h2 id="Git提交"><a href="#Git提交" class="headerlink" title="Git提交"></a>Git提交</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git add fileName</td><td align="left">提交到暂存区</td></tr><tr><td align="left">git commit -m “提交信息”</td><td align="left">提交到版本库</td></tr><tr><td align="left">git commit -am “提交信息”</td><td align="left">一次性提交到版本库</td></tr><tr><td align="left">git commit –amend</td><td align="left">撤销上一次提交，并将暂存区的文件重新提交</td></tr><tr><td align="left">git checkout – fileName</td><td align="left">拉取暂存区的文件并将其替换工作区的文件</td></tr><tr><td align="left">git reset HEAD fileName</td><td align="left">拉取最近一次提交到版本库的这个文件到暂存区，该操作不影响工作区</td></tr></tbody></table><h2 id="Git删除"><a href="#Git删除" class="headerlink" title="Git删除"></a>Git删除</h2><h3 id="方法一：先在文件资源管理器中删除文件，然后-git-add"><a href="#方法一：先在文件资源管理器中删除文件，然后-git-add" class="headerlink" title="方法一：先在文件资源管理器中删除文件，然后 git add ."></a>方法一：先在文件资源管理器中删除文件，然后 git add .</h3><h3 id="方法二：git-rm-fileName"><a href="#方法二：git-rm-fileName" class="headerlink" title="方法二：git rm fileName"></a>方法二：git rm fileName</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git rm -cached fileName</td><td align="left">不小心把追踪的文件添加到暂存区，想删除暂存区的文件但是不修改工作区的文件</td></tr><tr><td align="left">git rm -f fileName</td><td align="left">工作区和暂存区都删除</td></tr></tbody></table><h2 id="Git重命名"><a href="#Git重命名" class="headerlink" title="Git重命名"></a>Git重命名</h2><h3 id="例如：修改index-html的文件名"><a href="#例如：修改index-html的文件名" class="headerlink" title="例如：修改index.html的文件名"></a>例如：修改index.html的文件名</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">mv index.html index1.html</td><td align="left">一般重命名文件操作，Git会看做是删除了旧文件，新建新文件，新文件的状态是U(untracked)状态</td></tr><tr><td align="left">git mv index.html index1.html</td><td align="left">如果用git mv,Git会知道这是重命名了文件，改文件的状态是R(rename)状态</td></tr></tbody></table><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git branch</td><td align="left">查看分支</td></tr><tr><td align="left">git branch dev</td><td align="left">创建dev分支</td></tr><tr><td align="left">git checkout dev</td><td align="left">切换到dev分支</td></tr><tr><td align="left">git branch -d dev</td><td align="left">删除dev分支</td></tr><tr><td align="left">git branch -m dev fix</td><td align="left">修改dev分支的名称为fix</td></tr><tr><td align="left">git branch -d fix</td><td align="left">删除dev分支</td></tr><tr><td align="left">git checkout -b fix</td><td align="left">撤销删除fix分支并切换到fix分支</td></tr></tbody></table><h2 id="Git合并分支"><a href="#Git合并分支" class="headerlink" title="Git合并分支"></a>Git合并分支</h2><h3 id="先切换到-master-分支"><a href="#先切换到-master-分支" class="headerlink" title="先切换到 master 分支"></a>先切换到 master 分支</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git merge dev</td><td align="left">当前分支与dev分支合并</td></tr></tbody></table><ul><li>如果有冲突，即同一个文件同一行有不同的修改，将会提示用户手动决定用哪个版本</li><li>实际多人协作开发时，合并时为Fast-forward（快进式合并），即没有冲突</li></ul><h2 id="比较不同代码版本区别"><a href="#比较不同代码版本区别" class="headerlink" title="比较不同代码版本区别"></a>比较不同代码版本区别</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git diff</td><td align="left">比较工作区和暂存区的区别</td></tr><tr><td align="left">git diff –staged</td><td align="left">比较暂存区与版本库中的差异</td></tr><tr><td align="left">git diff hashValue1 hashValue2</td><td align="left">比较两个版本的差异</td></tr></tbody></table><ul><li>例如当前为master分支，执行 <code>git diff dev</code> 可以比较当前分支和dev分支的差异</li></ul><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><ul><li>git stash 将当前工作去的文件暂存（不提交），然后切换分支。应用场景：当正在dev分支上开发某个项目，这时项目中出现一个bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用git stash命令将修改的内容保存至堆栈区，然后顺利切换到hotfix分支进行bug修复，修复完成后，再次切回到dev分支，从堆栈中恢复刚刚保存的内容</li></ul><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git stash list</td><td align="left">查看本地保存的代码列表</td></tr><tr><td align="left">git stash pop stash@{1}</td><td align="left">还原代码并删除本地保存</td></tr><tr><td align="left">git stash drop stash@{0}</td><td align="left">删除这个修改</td></tr></tbody></table><h2 id="Git推送"><a href="#Git推送" class="headerlink" title="Git推送"></a>Git推送</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git push <a href="https://xxx.git" target="_blank" rel="noopener">https://xxx.git</a> master</td><td align="left">将本地的当前分支推送到远程的master分支上</td></tr></tbody></table><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git remote add myStudy <a href="mailto:git@gitee.com">git@gitee.com</a>:xxx/studyGit.git</td><td align="left">myStudy指代替代仓库地址</td></tr><tr><td align="left">git remote -v</td><td align="left">查看仓库地址</td></tr><tr><td align="left">git remote remove myStudy</td><td align="left">删除添加的指代单词</td></tr></tbody></table><h2 id="Git-Tag-Release"><a href="#Git-Tag-Release" class="headerlink" title="Git Tag (Release)"></a>Git Tag (Release)</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git tag</td><td align="left">列出已有的tag</td></tr><tr><td align="left">git tag -l “v1.1”</td><td align="left">加上-l命令可以使用通配符来过滤tag</td></tr><tr><td align="left">git tag v1.0</td><td align="left">新建tag</td></tr><tr><td align="left">git tag -a tagName -m “my tag”</td><td align="left">还可以加上-a参数来创建一个带备注的tag，备注信息由-m指定</td></tr><tr><td align="left">git show tagName</td><td align="left">查看tag的详细信息，包括commit号等</td></tr><tr><td align="left">git tag -a v1.2 9fceb02 -m “my tag”</td><td align="left">打tag不必要在head之上，也可通过commit号在之前的版本上打</td></tr><tr><td align="left">git push origin v1.0</td><td align="left">将tag同步到远程服务器</td></tr><tr><td align="left">git push origin –tags</td><td align="left">推送本地所有tag</td></tr><tr><td align="left">git checkout v1.0</td><td align="left">跟分支一样，可以直接切换到某个tag去。<br>这个时候不位于任何分支，处于游离状态，可以考虑基于这个tag创建一个分支</td></tr><tr><td align="left">git tag -d v0.1.2</td><td align="left">删除某个tag，本地删除</td></tr><tr><td align="left">git push origin :refs/tags/v0.1.2</td><td align="left">远端删除</td></tr></tbody></table><h2 id="Git误删commit后的恢复方法"><a href="#Git误删commit后的恢复方法" class="headerlink" title="Git误删commit后的恢复方法"></a>Git误删commit后的恢复方法</h2><ul><li><p>1）通过git log可以查看我们之前提交的commit_id</p></li><li><p>2）复制你需要回滚的commit_id。不过windows下的命令行是不能复制文本的，为此你可以到github上查看仓库的commit历史，上面是可以直接复制的,复制好后在命令行执行：<code>git reset --hard commit_id</code></p></li><li><p>3）执行: <code>git push origin HEAD --force</code> 提交当前HEAD,这样就能够将错误的提交删除，回滚至其之前的代码</p></li><li><p>但是如果当你回滚代码以后发现commit_id复制错了或者回滚错了怎么办呢？不要慌，按下面的方法做：</p><ul><li>1）执行：<code>git reflog</code><br>  你能在命令行中看到你的历史操作，复制你要恢复操作最前面的hash值</li><li>2）执行 <code>git reset --hard hash</code> 命令中最后要输的hash就是你要恢复的历史记录最前面黄色部分的hash值<br>  比如 <code>git reset --hard 4458e09</code>，这样就成功解决问题了。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;和&lt;code&gt;git pull&lt;/code&gt;的关系图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@maste
      
    
    </summary>
    
    
      <category term="git" scheme="http://blog.webpro.ltd/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.webpro.ltd/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli小工具 – oneLifeCache缓存</title>
    <link href="http://blog.webpro.ltd/2020/01/26/vue-cli-tool-oneLifeCache/"/>
    <id>http://blog.webpro.ltd/2020/01/26/vue-cli-tool-oneLifeCache/</id>
    <published>2020-01-25T16:00:00.000Z</published>
    <updated>2020-03-09T14:36:08.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oneLifeCache"><a href="#oneLifeCache" class="headerlink" title="oneLifeCache"></a>oneLifeCache</h1><p>用于vue-cli的前端缓存插件</p><ul><li>vue-cli2已测试</li><li>vue-cli3未测试，理论上没问题</li></ul><blockquote><p>oneLifeCache-v2与oneLifeCache版本存在较大改动，因此要分开说明</p></blockquote><blockquote><p>挂载到vue-cli2(两版本挂载方式相同)</p></blockquote><ul><li>main.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// oneLifeCache</span><br><span class="hljs-keyword">import</span> oneLifeCache <span class="hljs-keyword">from</span> <span class="hljs-string">'@/utils/oneLifeCache'</span><br><span class="hljs-comment">// 挂载全局</span><br><span class="hljs-comment">// eslint-disable-next-line new-cap</span><br>Vue.prototype.$cache = <span class="hljs-keyword">new</span> oneLifeCache()<br></code></pre></td></tr></table></figure></div><blockquote><h2 id="oneLifeCache-v2-版本"><a href="#oneLifeCache-v2-版本" class="headerlink" title="oneLifeCache-v2 版本"></a>oneLifeCache-v2 版本</h2></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">this</span>.$cache.set(key, value)       <span class="hljs-comment">// 添加k-v；若k重复，将覆盖旧值</span><br><span class="hljs-keyword">this</span>.$cache.getAndSet(key, value) <span class="hljs-comment">// 重设k的值</span><br><span class="hljs-keyword">this</span>.$cache.getAndRemove(key)     <span class="hljs-comment">// 通过k获取值后删除之</span><br><span class="hljs-keyword">this</span>.$cache.remove(key)           <span class="hljs-comment">// 通过k删除节点</span><br><span class="hljs-keyword">this</span>.$cache.clear()               <span class="hljs-comment">// 清空缓存</span><br></code></pre></td></tr></table></figure></div><blockquote><h2 id="oneLifeCache-版本"><a href="#oneLifeCache-版本" class="headerlink" title="oneLifeCache 版本"></a>oneLifeCache 版本</h2></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">this</span>.$cache.set(key, value) <span class="hljs-comment">// 添加k-v；若k重复，将添加失败</span><br><span class="hljs-keyword">this</span>.$cache.get(key)        <span class="hljs-comment">// 通过k获取值</span><br><span class="hljs-keyword">this</span>.$cache.read(key)       <span class="hljs-comment">// 通过k获取值后删除之</span><br><span class="hljs-keyword">this</span>.$cache.clear()         <span class="hljs-comment">// 清空缓存</span><br></code></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;oneLifeCache&quot;&gt;&lt;a href=&quot;#oneLifeCache&quot; class=&quot;headerlink&quot; title=&quot;oneLifeCache&quot;&gt;&lt;/a&gt;oneLifeCache&lt;/h1&gt;&lt;p&gt;用于vue-cli的前端缓存插件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="vue-cli" scheme="http://blog.webpro.ltd/categories/vue-cli/"/>
    
    
      <category term="vue-cli2" scheme="http://blog.webpro.ltd/tags/vue-cli2/"/>
    
      <category term="vue-cli3" scheme="http://blog.webpro.ltd/tags/vue-cli3/"/>
    
  </entry>
  
  <entry>
    <title>springboot package war</title>
    <link href="http://blog.webpro.ltd/2020/01/13/springboot-package-war/"/>
    <id>http://blog.webpro.ltd/2020/01/13/springboot-package-war/</id>
    <published>2020-01-12T16:00:00.000Z</published>
    <updated>2020-03-10T08:11:29.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要打war包"><a href="#为什么要打war包" class="headerlink" title="为什么要打war包?"></a>为什么要打war包?</h1><p>springboot默认打包是jar包，通过java -xxx.jar命令可以直接跑起来。一般的jar包，每一个springboot项目运行后都有对应的Tomcat服务器启动，每个Tomcat占一个端口、jvm占用内存，尤其是多个springboot的jar包在一台服务器上，包不好管理且端口比较混乱，耗内存，不如启动一个Tomcat服务器，将springboot打成war包放到webapps下面统一运行管理，这样所有打成war包的项目都可以在同一个端口下运行。</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="亲测的springboot版本：2-0-6-RELEASE"><a href="#亲测的springboot版本：2-0-6-RELEASE" class="headerlink" title="亲测的springboot版本：2.0.6.RELEASE"></a>亲测的springboot版本：2.0.6.RELEASE</h2><h2 id="将pom-xml文件首部的jar改成war"><a href="#将pom-xml文件首部的jar改成war" class="headerlink" title="将pom.xml文件首部的jar改成war"></a>将pom.xml文件首部的jar改成war</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="去除内置的Tomcat容器（a-b两种方式都可）"><a href="#去除内置的Tomcat容器（a-b两种方式都可）" class="headerlink" title="去除内置的Tomcat容器（a/b两种方式都可）"></a>去除内置的Tomcat容器（a/b两种方式都可）</h2><ul><li><p>a.去掉spring-boot-starter-tomcat(如果没有tomcat字样，忽略本步骤)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div></li><li><p>b.添加依赖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。</span><br><span class="hljs-comment">        相当于compile，但是打包阶段做了exclude操作--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div></li></ul><h2 id="新建启动类：主要是SpringApplicationBuilder-configure-方法"><a href="#新建启动类：主要是SpringApplicationBuilder-configure-方法" class="headerlink" title="新建启动类：主要是SpringApplicationBuilder configure 方法"></a>新建启动类：主要是SpringApplicationBuilder configure 方法</h2><ul><li><p>原xxxApplication.java启动类里面的其他东西要原封不动的搬过来（比如@MapperScan等）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span></span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> builder.sources(App<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SpringApplication.run(App<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">args</span>)</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div></li><li><p>新建该类成功后，将原来的xxxApplication.java文件保留，打开文件，将里面的代码全部注释。</p></li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package<br></code></pre></td></tr></table></figure></div><ul><li>打包完成会显示 BUILD SUCCESS,war包在target目录下</li></ul><h1 id="测试war包"><a href="#测试war包" class="headerlink" title="测试war包"></a>测试war包</h1><ul><li>在本地启动tomcat服务器，将打好的war包放到webapps目录下</li><li>访问<code>http://localhost:[端口号]/[打包项目名]/</code>进行测试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要打war包&quot;&gt;&lt;a href=&quot;#为什么要打war包&quot; class=&quot;headerlink&quot; title=&quot;为什么要打war包?&quot;&gt;&lt;/a&gt;为什么要打war包?&lt;/h1&gt;&lt;p&gt;springboot默认打包是jar包，通过java -xxx.jar命令可以直
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>开发常用命令笔记</title>
    <link href="http://blog.webpro.ltd/2019/12/27/work-cmd/"/>
    <id>http://blog.webpro.ltd/2019/12/27/work-cmd/</id>
    <published>2019-12-27T13:23:23.000Z</published>
    <updated>2020-03-12T01:58:03.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos6-10配置jdk8"><a href="#centos6-10配置jdk8" class="headerlink" title="centos6.10配置jdk8"></a>centos6.10配置jdk8</h2><h3 id="1、下载JDK"><a href="#1、下载JDK" class="headerlink" title="1、下载JDK"></a>1、下载JDK</h3><p>这里选择JDK8，去官网下载即可。<br>jdk-8u11-linux-i586.tar.gz</p><h3 id="2、上传到服务器，解压"><a href="#2、上传到服务器，解压" class="headerlink" title="2、上传到服务器，解压"></a>2、上传到服务器，解压</h3><p>通过ssh，将<code>jdk-8u11-linux-i586.tar.gz</code>放到<code>/usr/local</code>下。<br>解压：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf jdk-8u11-linux-i586.tar.gz<br></code></pre></td></tr></table></figure></div><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br></code></pre></td></tr></table></figure></div><p>文件末尾追加如下内容：（路径根据自己的实际情况修改）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># set java environment</span><br>JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/jdk1.8.0_11<br>JRE_HOME=/usr/<span class="hljs-built_in">local</span>/jdk1.8.0_11/jre<br>CLASS_PATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JRE_HOME</span>/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin<br><span class="hljs-built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH<br></code></pre></td></tr></table></figure></div><h3 id="4、配置文件生效"><a href="#4、配置文件生效" class="headerlink" title="4、配置文件生效"></a>4、配置文件生效</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></div><h3 id="5、查看jdk版本"><a href="#5、查看jdk版本" class="headerlink" title="5、查看jdk版本"></a>5、查看jdk版本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123652.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200308123652.png" class="lazyload" title></a></p><hr><h2 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h2><ul><li>创建项目/脚手架<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue init webpack project-name<br></code></pre></td></tr></table></figure></div></li></ul><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure></div><h3 id="编译（打包）项目"><a href="#编译（打包）项目" class="headerlink" title="编译（打包）项目"></a>编译（打包）项目</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure></div><h3 id="安装HTTP请求"><a href="#安装HTTP请求" class="headerlink" title="安装HTTP请求"></a>安装HTTP请求</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save vue-resource<br></code></pre></td></tr></table></figure></div><h3 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save vue-router<br></code></pre></td></tr></table></figure></div><h3 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios<br>npm install --save axios<br></code></pre></td></tr></table></figure></div><hr><h2 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建项目/脚手架<br>vue create project-name<br></code></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;centos6-10配置jdk8&quot;&gt;&lt;a href=&quot;#centos6-10配置jdk8&quot; class=&quot;headerlink&quot; title=&quot;centos6.10配置jdk8&quot;&gt;&lt;/a&gt;centos6.10配置jdk8&lt;/h2&gt;&lt;h3 id=&quot;1、下载JDK&quot;&gt;
      
    
    </summary>
    
    
    
      <category term="centos6.10" scheme="http://blog.webpro.ltd/tags/centos6-10/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://blog.webpro.ltd/2019/09/29/study-datastructure/"/>
    <id>http://blog.webpro.ltd/2019/09/29/study-datastructure/</id>
    <published>2019-09-28T16:00:00.000Z</published>
    <updated>2020-03-13T14:25:02.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><!-- # Introduction --><ul><li>数据结构入门</li><li>Powered by Bill</li><li>date: 2019/09/29</li><li>blog: <a href="https://www.webpro.ltd" target="_blank" rel="noopener">https://www.webpro.ltd</a></li></ul><p>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。<br>数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的存储结构。<br>数据结构的研究内容是构造复杂软件系统的基础，它的核心技术是分解与抽象。通过分解可以划分出数据的3个层次；再通过抽象，舍弃数据元素的具体内容，就得到逻辑结构。类似地，通过分解将处理要求划分成各种功能，再通过抽象舍弃实现细节，就得到运算的定义。上述两个方面的结合可以将问题变换为数据结构。这是一个从具体（即具体问题）到抽象（即数据结构）的过程。然后，通过增加对实现细节的考虑进一步得到存储结构和实现运算，从而完成设计任务。这是一个从抽象（即数据结构）到具体（即具体实现）的过程。</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200313222251.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200313222251.png" class="lazyload" title></a></p><hr><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Q1-为什么要学数据结构？"><a href="#Q1-为什么要学数据结构？" class="headerlink" title="Q1: 为什么要学数据结构？"></a>Q1: 为什么要学数据结构？</h2><blockquote><ul><li>承前启后：学语言-&gt;学算法-&gt;写程序</li><li>高级计算机程序设计的理论指导</li><li>提升编程能力</li><li>面试中经常问到</li></ul></blockquote><h2 id="Q2：有哪些数据结构？"><a href="#Q2：有哪些数据结构？" class="headerlink" title="Q2：有哪些数据结构？"></a>Q2：有哪些数据结构？</h2><blockquote><ul><li>线性表、栈、（字符）串、数组、广义表、树、二叉树、图</li><li>重点是线性表、二叉树</li><li>对于每种数据结构会讲解其添加、更新、删除、查询、排序等操作的实现</li></ul></blockquote><h2 id="Q3：学习境界？"><a href="#Q3：学习境界？" class="headerlink" title="Q3：学习境界？"></a>Q3：学习境界？</h2><blockquote><ul><li><strong>境界一</strong> 听懂理论，听懂算法思路</li><li><strong>境界二</strong> 完成主要数据结构的基本算法实现（入门）</li><li><strong>境界三</strong> 更多数据结构，更多算法的实现（进一步提高数据结构功底）</li><li><strong>境界四</strong> 融会贯通、举一反三，在后续开发中综合应用数据结构知识</li></ul></blockquote><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>algorithm 英[ˈælɡərɪðəm] 美[ˈælɡərɪðəm]</p><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><p>For Example: 求 1+2+3+…+100 = ?</p><ol><li>依次相加<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>    res += i;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure></div></li><li>高斯求和<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> add_max = <span class="hljs-number">100</span>;<br><span class="hljs-comment">/* 梯形面积公式算法 */</span><br>res = (<span class="hljs-number">1</span> + add_max) * add_max / <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 三角形面积公式算法 (0+1+2+...+100, h = 101)*/</span><br>res = add_max * (add_max + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></div></li><li>递归<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*sum(100) = sum(99) + 100</span><br><span class="hljs-comment">sum(99) = sum(98) + 99</span><br><span class="hljs-comment">=&gt;</span><br><span class="hljs-comment">sum(100) = sum(98) + 99 + 100</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">sum(100) = sum(1) + 2 + ... + 99 + 100*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> sum(m<span class="hljs-number">-1</span>) + m;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum(<span class="hljs-number">100</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div></li></ol><blockquote><p>以上3个算法显然<strong>高斯求和</strong>算法的时间复杂度及空间复杂度最优</p></blockquote><h2 id="算法特征："><a href="#算法特征：" class="headerlink" title="算法特征："></a><strong>算法特征：</strong></h2><ol><li>输入</li><li>输出</li><li>可行性</li><li>有穷性</li><li>确定性</li></ol><h1 id="时间复杂度-Time-Complexity-定义"><a href="#时间复杂度-Time-Complexity-定义" class="headerlink" title="时间复杂度(Time Complexity)定义"></a>时间复杂度(Time Complexity)定义</h1><blockquote><ul><li>（1）时间频度：T(n)，n表示问题的规模。一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。</li><li>（2）时间复杂度：一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。在T(n)=4n²-2n+2中，就有f(n)=n²，使得T（n)/f(n)的极限值为4，那么O(f(n))，也就是时间复杂度为O(n²)</li><li>时间复杂度一般讨论最坏的时间复杂度</li></ul></blockquote><blockquote><ul><li>定义O（最坏情况&lt;=），例如T(n) = O(n²)</li><li>定义Ω（最好情况&gt;=），例如T(n) = Ω(n²)</li><li>定义Θ（最好情况与最坏情况同阶），例如T(n) = Θ(n²)</li></ul></blockquote><h1 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h1><ol><li>找出算法中的基本语句<br><br>执行次数最多的就是基本语句，通常是最内层循环的循环体</li><li>计算基本语句的执行次数的数量级</li><li>用O表示</li></ol><p>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为T(n)。<br><br>　　一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T（n)/f (n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=O(f(n)),称O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br><br>　　在各种不同算法中，若算法中语句执行次数为一个常数，则时间复杂度为O(1),另外，<strong>在时间频度不相同时，时间复杂度有可能相同，如T(n)=n2+3n+4与T(n)=4n2+2n+1它们的频度不同，但时间复杂度相同，都为O(n2)。</strong></p><h2 id="时间复杂度计算例题"><a href="#时间复杂度计算例题" class="headerlink" title="时间复杂度计算例题"></a>时间复杂度计算例题</h2><p>1.T(n) = 1, T(n) = O(1)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></div><p>100个简单语句其时间复杂度仍为O(1)</p><p>2.一个循环的时间复杂度为O(n)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)&#123;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>T(n) = n, T(n) = O(n)</p><ol start="3"><li><p>时间复杂度为O(log2(n))</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)&#123;<br>    count++;<br>&#125;<br><span class="hljs-comment">/*1,2,4,8,16,32,...</span><br><span class="hljs-comment">设循环x次，则2^x = n =&gt; x = log2(n)</span><br><span class="hljs-comment">T(n) = log2(n)</span><br><span class="hljs-comment">T(n) = O(log2(n))*/</span><br></code></pre></td></tr></table></figure></div></li><li><p>时间复杂度为O(n²)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br><span class="hljs-comment">/*T(n) = n x n</span><br><span class="hljs-comment">T(n) = O(n²)*/</span><br></code></pre></td></tr></table></figure></div></li><li><p>时间复杂度为O(nlog2(n))</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br></code></pre></td></tr></table></figure></div></li><li><p>时间复杂度为O(n²)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>        count++;<br><span class="hljs-comment">/*T(n) = n x (1+2+3+...+n) = 0.5n + 0.5n²</span><br><span class="hljs-comment">T(n) = O(n²)*/</span><br></code></pre></td></tr></table></figure></div></li></ol><h2 id="常用的时间复杂度级别"><a href="#常用的时间复杂度级别" class="headerlink" title="常用的时间复杂度级别"></a>常用的时间复杂度级别</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_1.4-1.jpg" data-fancybox="group" data-caption="常用的时间复杂度级别" class="fancybox"><img alt="常用的时间复杂度级别" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_1.4-1.jpg" class="lazyload" title="常用的时间复杂度级别"></a></p><h1 id="空间复杂度-Space-Complexity-定义"><a href="#空间复杂度-Space-Complexity-定义" class="headerlink" title="空间复杂度(Space Complexity)定义"></a>空间复杂度(Space Complexity)定义</h1><p>类似于时间复杂度的讨论，一个算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。空间复杂度(SpaceComplexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地&quot;进行的，是节省存储的算法，有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</p><p><strong>S(n) = O(g(n))</strong></p><ol><li><p>空间复杂度 O(1)。如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)<br>举例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-keyword">int</span> m = i + j;<br></code></pre></td></tr></table></figure></div><p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)</p></li><li><p>空间复杂度 O(n)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span>[] m = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>这段代码中，第一行new了一个数组出来，这个数据占用的大小为n，这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)</p></li></ol><p><strong>由此可见，递归算法效率低下，体现在空间复杂度高。</strong></p><hr><h1 id="线性表-linearlist"><a href="#线性表-linearlist" class="headerlink" title="线性表(linearlist)"></a>线性表(linearlist)</h1><blockquote><ul><li>Java的LinkList底层是双向链表</li><li>ArryList是顺序表</li></ul></blockquote><ol><li>相同的数据类型</li><li>序列（顺序性）</li><li>有序</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是连续的一块内存空间</p><h2 id="链表-—-链式存储结构"><a href="#链表-—-链式存储结构" class="headerlink" title="链表 — 链式存储结构"></a>链表 — 链式存储结构</h2><p>非连续的内存空间</p><h1 id="线性表实现"><a href="#线性表实现" class="headerlink" title="线性表实现"></a>线性表实现</h1><blockquote><ul><li>Java中ArrayList底层采用数组实现</li><li>Java中LinkedList底层采用双向链表实现</li><li>我们通过对ArrayList和LinkedList的简单实现练习线性表</li><li>实际上的ArrayList和LinkedList比我们写的要复杂</li><li>无论是ArrayList还是LinkedList，其都有以下（包括但不限于）方法，与存储结构无关。因此我们定义了如下接口，给ArrayList和LinkedList使用</li></ul></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表</span><br><span class="hljs-comment"> * 和存储结构无关</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">List</span> </span>&#123;<br><br>    <span class="hljs-comment">// 返回线性表的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 返回线性表中序号为 i 的数据元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;<br><br>    <span class="hljs-comment">// 线性表为空返回True，否则返回False</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 判断线性表是否包含数据元素 e</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 返回数据元素e在线性表中的序号</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到线性表中i号的位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到线性表的末尾</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到object之前</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到object之后</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 删除线性表序号为i的元素 并返回之</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;<br><br>    <span class="hljs-comment">// 删除线性表中第一个与e相同的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 替换线性表中序号为i的数据元素为e，返回原数据元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 输出List</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="ArrayList实现"><a href="#ArrayList实现" class="headerlink" title="ArrayList实现"></a>ArrayList实现</h1><blockquote><ul><li>ArrayList底层是数组</li></ul></blockquote><p>Ⅰ. 用Java模拟实现ArrayList基本操作</p><h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 顺序表</span><br><span class="hljs-comment"> * 底层采用数组，但是长度可以动态变化</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * java.util.ArrayList每次扩容操作增加 1/2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Object[] elementData; <span class="hljs-comment">// 底层是一个数组，目前还没有确定长度</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The size of the ArrayList (the number of elements it contains).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size; <span class="hljs-comment">// 元素的个数</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 没有指定长度，默认长度为4</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">4</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initialCapacity 数组的初始长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// 给数组分配指定数量空间</span><br>    elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    <span class="hljs-comment">// 指定顺序表的元素个数</span><br>    size = <span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt;= size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组索引越界异常: "</span> + i);<br>&#125;<br><span class="hljs-keyword">return</span> elementData[i];<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">return</span> indexOf(e) &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(e == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(elementData[i] == <span class="hljs-keyword">null</span>)<br><span class="hljs-keyword">return</span> i;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(e.equals(elementData[i]))<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br><span class="hljs-comment">// i 的位置要正确</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt; size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组索引越界异常: "</span> + i);<br>&#125;<br><span class="hljs-comment">// 数组满了，就扩容</span><br><span class="hljs-keyword">if</span>(size == elementData.length) &#123;<br>grow();<br>&#125;<br><span class="hljs-comment">// 后移i及其后面的元素，从最后一个元素开始</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = size; j &gt; i; j--) &#123;<br>elementData[j] = elementData[j-<span class="hljs-number">1</span>];<br>&#125;<br>elementData[i] = e;<br>size++;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 创建一个新的数组，其长度是elementData的两倍</span><br>elementData = Arrays.copyOf(elementData, elementData.length*<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 数组满了，就扩容</span><br><span class="hljs-keyword">if</span>(size + <span class="hljs-number">1</span> &gt;= elementData.length) &#123;<br>grow();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br><span class="hljs-keyword">if</span>(obj.equals(elementData[i])) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = size - <span class="hljs-number">1</span>; j &gt;= i; j--)<br>elementData[j+<span class="hljs-number">1</span>] = elementData[j];<br>elementData[i] = e;<br>size++;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// addAfter可以看作是：找到obj的下一个元素，调用addBefore</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(obj.equals(elementData[i]))<br><span class="hljs-keyword">return</span> addBefore(elementData[i + <span class="hljs-number">1</span>], e);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>Object remove_obj = elementData[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; size; j++) &#123;<br>elementData[j] = elementData[j+<span class="hljs-number">1</span>];<br>&#125;<br>size--;<br><span class="hljs-keyword">return</span> remove_obj;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = indexOf(e);<br><span class="hljs-keyword">if</span>( index &gt;= <span class="hljs-number">0</span>) &#123;<br>remove(index);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br>elementData[i] = e;<br><span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"[]"</span>;<br>&#125;<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"["</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(i != size - <span class="hljs-number">1</span>) &#123;<br>builder.append(elementData[i] + <span class="hljs-string">","</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>builder.append(elementData[i]);<br>&#125;<br>&#125;<br>builder.append(<span class="hljs-string">"]"</span>);<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="TestArrayList类"><a href="#TestArrayList类" class="headerlink" title="TestArrayList类"></a>TestArrayList类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArrayList</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>list.add(<span class="hljs-number">123</span>);<br>list.add(<span class="hljs-number">321</span>);<br>list.add(<span class="hljs-number">456</span>);<br>list.add(<span class="hljs-number">654</span>);<br>list.add(<span class="hljs-number">678</span>);<br>list.add(<span class="hljs-number">789</span>);<br>list.add(<span class="hljs-number">678</span>);<br>list.add(<span class="hljs-number">5</span>, <span class="hljs-number">666</span>);<br><br>System.out.println(list.size());<br>System.out.println(list.isEmpty());<br>System.out.println(list.get(<span class="hljs-number">2</span>));<br>System.out.println(list.toString());<br>System.out.println(list.contains(<span class="hljs-number">678</span>));<br>System.out.println(list.addBefore(<span class="hljs-number">321</span>, <span class="hljs-number">777</span>));<br>System.out.println(list.addAfter(<span class="hljs-number">321</span>, <span class="hljs-number">777</span>));<br>System.out.println(list.toString());<br>System.out.println(list.get(<span class="hljs-number">2</span>));<br>System.out.println(list.remove(<span class="hljs-number">0</span>));<br>System.out.println(list.toString());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. 用C语言模拟实现ArrayList基本操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><br></code></pre></td></tr></table></figure></div><h1 id="LinkedList实现"><a href="#LinkedList实现" class="headerlink" title="LinkedList实现"></a>LinkedList实现</h1><blockquote><ul><li>LinkedList底层是双向链表</li><li>我们用单项链表实现MyLinkedList</li></ul></blockquote><p>Ⅰ. 用Java模拟实现LinkedList基本操作</p><h2 id="LinkedList类"><a href="#LinkedList类" class="headerlink" title="LinkedList类"></a>LinkedList类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Node head; <span class="hljs-comment">// 头节点，不存储数据，为了编程</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;  <span class="hljs-comment">// 一共有几个节点</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SingleLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>head = <span class="hljs-keyword">new</span> Node();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-comment">// 和顺序表不一样，要从头节点逐个开始查找</span><br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> p.data;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span> </span>&#123;<br>Node p = head.next;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(e))<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span> </span>&#123;<br>Node p = head.next;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(e))<br><span class="hljs-keyword">return</span> i;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 如果i的位置错误，报错</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt; size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组指针越界异常: "</span> + i);<br>&#125;<br><span class="hljs-comment">// 找到前一个节点，从head开始找</span><br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>p = p.next;<br>&#125;<br><span class="hljs-comment">// 创建一个节点</span><br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br><span class="hljs-comment">// 指向新节点的直接后继</span><br>newNode.next = p.next;<br><span class="hljs-comment">// 指向新节点的直接前驱</span><br>p.next = newNode;<br>size++;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br>Node p = head.next;<br>Node pre = head;<br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br><span class="hljs-keyword">if</span>(obj == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(obj)) &#123;<br>pre.next = newNode;<br>newNode.next = p;<br>size++;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>p = p.next;<br>pre = pre.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 取obj的下一个元素进行addBefore操作</span><br>Node p = head.next;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(obj))<br><span class="hljs-keyword">return</span> addBefore(p.next.data, e);<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>p = p.next;<br>Node remove_obj = p.next;<br>p.next = p.next.next;<br>size--;<br><span class="hljs-keyword">return</span> remove_obj;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = indexOf(e);<br><span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span>) &#123;<br>remove(index);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>p = p.next;<br>Node old = p.next;<br>newNode.next = p.next.next;<br>p.next = newNode;<br><span class="hljs-keyword">return</span> old;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"[]"</span>;<br>&#125;<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"["</span>);<br>Node p = head.next;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(i != size - <span class="hljs-number">1</span>) &#123;<br>builder.append(p.data + <span class="hljs-string">","</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>builder.append(p.data);<br>&#125;<br>p = p.next;<br>&#125;<br>builder.append(<span class="hljs-string">"]"</span>);<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="TestLinkedList类"><a href="#TestLinkedList类" class="headerlink" title="TestLinkedList类"></a>TestLinkedList类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSingleLinkedList</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>SingleLinkedList list = <span class="hljs-keyword">new</span> SingleLinkedList();<br>list.add(<span class="hljs-string">"123"</span>);<br>list.add(<span class="hljs-string">"321"</span>);<br>list.add(<span class="hljs-string">"456"</span>);<br>list.add(<span class="hljs-string">"654"</span>);<br>list.add(<span class="hljs-string">"678"</span>);<br>list.add(<span class="hljs-string">"789"</span>);<br>list.add(<span class="hljs-string">"678"</span>);<br><br>System.out.println(list.toString());<br><br>list.add(<span class="hljs-number">2</span>, <span class="hljs-string">"666"</span>);<br><br>System.out.println(list.size());<br>System.out.println(list.isEmpty());<br>System.out.println(list.get(<span class="hljs-number">5</span>));<br>System.out.println(list.toString());<br><br>System.out.println(list.contains(<span class="hljs-string">"678"</span>));<br>System.out.println(list.contains(<span class="hljs-string">"66666"</span>));<br><br>System.out.println(<span class="hljs-string">"addBefore  "</span> + list.addBefore(<span class="hljs-string">"123"</span>, <span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addBefore  "</span> + list.toString());<br><br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.addAfter(<span class="hljs-string">"678"</span>, <span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.toString());<br><br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.remove(<span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.toString());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. 用C语言模拟实现LinkedList基本操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><br></code></pre></td></tr></table></figure></div><h1 id="其他线性表"><a href="#其他线性表" class="headerlink" title="其他线性表"></a>其他线性表</h1><blockquote><ul><li>一般为了编程方便，头节点和尾节点（如果存在）是不存储数据的</li><li>为了保持算法的一致性，有时添加首尾节点</li></ul></blockquote><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_2.4-1.png" data-fancybox="group" data-caption="双向链表" class="fancybox"><img alt="双向链表" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_2.4-1.png" class="lazyload" title="双向链表"></a></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_2.4-2.png" data-fancybox="group" data-caption="循环链表" class="fancybox"><img alt="循环链表" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_2.4-2.png" class="lazyload" title="循环链表"></a></p><h2 id="Java中"><a href="#Java中" class="headerlink" title="Java中"></a>Java中</h2><ul><li>Vector 顺序表</li><li>ArrayList 顺序表</li><li>LinkedList 双向链表</li></ul><p>Vector、ArrayList底层均为可变长度的数组。Vector线程安全，效率低，已基本弃用；ArrayList线程不安全，效率高。ArrayList扩容策略为每次扩容原长度的50%。</p><hr><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>本节分为</p><ul><li>栈（Stack）</li><li>队列（Quene）</li><li>Java中的栈和队列</li><li>Disruptor并发框架中的Quene</li></ul><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><blockquote><ul><li>操作受限的线性表</li></ul></blockquote><ul><li>先进后出，删除与加入均在栈顶操作</li><li>栈也称为堆栈，是一种线性表。</li><li>堆栈的特性： 最先放入堆栈中的内容最后被拿出来，最后放入堆栈中的内容最先被拿出来， 被称为先进后出、后进先出。</li><li>堆栈中两个最重要的操作是PUSH和POP，两个是相反的操作。</li><li>PUSH：在堆栈的顶部加入一 个元素。</li><li>POP：在堆栈顶部移去一个元素， 并将堆栈的大小减一。</li></ul><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.1-2.jpg" data-fancybox="group" data-caption="栈2" class="fancybox"><img alt="栈2" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.1-2.jpg" class="lazyload" title="栈2"></a></li><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.1-1.jpg" data-fancybox="group" data-caption="栈1" class="fancybox"><img alt="栈1" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.1-1.jpg" class="lazyload" title="栈1"></a></li></ul><p>其限制是仅允许在表的一端进行插入、删除操作，不允许在其他任何地方进行插入、删除操作。表中进行插入删除的一端称为栈顶（top），栈顶保存的元素称为栈顶元素。相对于表的另一端成为栈底（bottom）。</p><ul><li>插入操作 -&gt; 入栈</li><li>删除操作 -&gt; 出栈</li><li>专业词汇：push入栈，pop出栈，peek栈顶元素</li></ul><h2 id="栈的接口"><a href="#栈的接口" class="headerlink" title="栈的接口:"></a>栈的接口:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Stack</span> </span>&#123;<br><br>    <span class="hljs-comment">// 获取元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 取栈顶元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="队列（Quene）"><a href="#队列（Quene）" class="headerlink" title="队列（Quene）"></a>队列（Quene）</h1><p>队列(Queue)也是一种运算受限的线性表，它的运算限制与栈不同，是两头都有限制，插入只能在表的一端进行(只进不出)，而删除只能在表的另一端进行(只出不进)，允许删除的一端称为队尾(rear)，允许插入的一端称为队头 (Front),队列的操作原则是<strong>先进先出</strong>的，所以队列又称作FIFO表(First In First Out)</p><ul><li><p>顺序存储</p></li><li><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-1.jpg" data-fancybox="group" data-caption="顺序存储" class="fancybox"><img alt="顺序存储" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-1.jpg" class="lazyload" title="顺序存储"></a></p></li><li><p>环形队列</p></li><li><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-3.jpg" data-fancybox="group" data-caption="环形队列" class="fancybox"><img alt="环形队列" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-3.jpg" class="lazyload" title="环形队列"></a></p></li><li><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-2.jpg" data-fancybox="group" data-caption="环形队列" class="fancybox"><img alt="环形队列" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-2.jpg" class="lazyload" title="环形队列"></a></p></li></ul><ul><li>技术案例：多线程中的就绪队列和阻塞队列</li><li>主要操作：入队、出队</li></ul><h2 id="队列的接口"><a href="#队列的接口" class="headerlink" title="队列的接口:"></a>队列的接口:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Quene</span> </span>&#123;<br><br>    <span class="hljs-comment">// 获取队列长度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> bollean <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 入队</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enquence</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 出队</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">dequence</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 取队首元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="其他队列"><a href="#其他队列" class="headerlink" title="其他队列"></a>其他队列</h2><h2 id="双端队列Deque"><a href="#双端队列Deque" class="headerlink" title="双端队列Deque"></a>双端队列Deque</h2><ul><li><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-4.jpg" data-fancybox="group" data-caption="双端队列Deque" class="fancybox"><img alt="双端队列Deque" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-4.jpg" class="lazyload" title="双端队列Deque"></a></p></li><li><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-5.jpg" data-fancybox="group" data-caption="双端队列Deque" class="fancybox"><img alt="双端队列Deque" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_3.2-5.jpg" class="lazyload" title="双端队列Deque"></a></p></li><li><blockquote><p>操作受限的双端队列Deque</p></blockquote></li></ul><h1 id="Java中的栈和队列类"><a href="#Java中的栈和队列类" class="headerlink" title="Java中的栈和队列类"></a>Java中的栈和队列类</h1><ul><li>Stack类： 已过时，因为public class Stack&lt;E&gt; extends Vector&lt;E&gt;</li><li>Quene 队列类</li><li>Deque 双端队列（一般默认受限规则为栈操作）</li></ul><h2 id="例：用栈实现10进制转2进制"><a href="#例：用栈实现10进制转2进制" class="headerlink" title="例：用栈实现10进制转2进制"></a>例：用栈实现10进制转2进制</h2><p>Ⅰ. Java语言实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.stackquene;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 10进制转换成2进制</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConvert</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 给定一个10进制数</span><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">// 定义一个空栈</span><br>Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br><br><span class="hljs-comment">// 把10进制数转2进制数</span><br><span class="hljs-keyword">int</span> t = n; <span class="hljs-comment">// 被除数</span><br><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">// 除以2求余数</span><br><span class="hljs-keyword">int</span> mod = t % <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// 输出余数</span><br><span class="hljs-comment">//System.out.println(mod);</span><br>stack.push(mod);<br><br><span class="hljs-comment">// 除以二得到商</span><br><span class="hljs-comment">// 使用商做被除数</span><br>t = t / <span class="hljs-number">2</span>;<br><br>&#125;<span class="hljs-keyword">while</span>(t &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// 商&gt;0</span><br><br><span class="hljs-comment">// 输出结果</span><br>System.out.print(n + <span class="hljs-string">"  --------&gt; "</span>);<br><span class="hljs-keyword">while</span>(!stack.isEmpty()) &#123;<br>System.out.print(stack.pop());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. C语言实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// I am C</span><br></code></pre></td></tr></table></figure></div><h1 id="Disruptor并发框架中的Quene"><a href="#Disruptor并发框架中的Quene" class="headerlink" title="Disruptor并发框架中的Quene"></a>Disruptor并发框架中的Quene</h1><p>Disruptor框架介绍</p><ul><li><p>极高性能、并发、无锁的编程框架 - Disruptor</p></li><li><p>建立在JVM平台上</p></li><li><p>每秒可处理6百万订单[官方自述]</p></li><li><p>运行在内存中</p></li><li><p>采用事件源驱动方式</p></li><li><p>无锁的Queue（高并发无锁队列事件）</p></li></ul><hr><p>[RingBuffer]是Disruptor的核心</p><p>RingBuffer采用数组实现，无首尾指针</p><ul><li><p>Quene:</p></li><li><p><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281322545530346.png" data-fancybox="group" data-caption="Quene" class="fancybox"><img alt="Quene" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281322545530346.png" class="lazyload" title="Quene"></a></p></li><li><p>RingBuffer是一个环形队列，起到缓存的效果：</p></li><li><p><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281328527622065.png" data-fancybox="group" data-caption="RingBuffer" class="fancybox"><img alt="RingBuffer" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281328527622065.png" class="lazyload" title="RingBuffer"></a> =&gt; <a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281330142821375.png" data-fancybox="group" data-caption="RingBuffer" class="fancybox"><img alt="RingBuffer" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281330142821375.png" class="lazyload" title="RingBuffer"></a></p></li></ul><p>随着不停的填充RingBuffer，序号会一直增长，直到超过这个环的最大长度（会覆盖旧的序号）</p><p>如何计算序号指向的元素？采用mod运算，序号%长度=索引，例如计算上图10的索引，10%8=2，在第2的位置</p><p>关于设置环的最大长度。上图的环长度只有8，在实际情况&gt;&gt;8。长度尽量设置成2n，比如1024、2048</p><p>为什么长度尽量设置成2n？如此可采用”与”运算计算索引号，即序号&amp;(长度-1)=索引号，其效率要高于mod计算效率</p><p>通过”生产者-&gt;RingBuffer-&gt;消费者”运作，下图是一个最简单的处理链</p><ul><li><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281339519490792.png" data-fancybox="group" data-caption="生产者-&gt;RingBuffer-&gt;消费者" class="fancybox"><img alt="生产者-&gt;RingBuffer-&gt;消费者" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281339519490792.png" class="lazyload" title="生产者-&gt;RingBuffer-&gt;消费者"></a></li></ul><p>实际情况中，生产者和消费者必定是多个线程执行。</p><hr><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><p>树的基本概念</p><h2 id="什么是树？"><a href="#什么是树？" class="headerlink" title="什么是树？"></a>什么是树？</h2><p>树状图是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br>每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树；</p><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-1.png" data-fancybox="group" data-caption="树" class="fancybox"><img alt="树" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-1.png" class="lazyload" title="树"></a></li></ul><h2 id="树（tree）是包含n（n-gt-0）个结点的有穷集，其中："><a href="#树（tree）是包含n（n-gt-0）个结点的有穷集，其中：" class="headerlink" title="树（tree）是包含n（n&gt;0）个结点的有穷集，其中："></a>树（tree）是包含n（n&gt;0）个结点的有穷集，其中：</h2><blockquote><ul><li>（1）每个元素称为结点（node）；</li><li>（2）有一个特定的结点被称为根结点或树根（root）。</li><li>（3）除根结点之外的其余数据元素被分为m（m≥0）个互不相交的集合T1，T2，……Tm-1，其中每一个集合Ti（1&lt;=i&lt;=m）本身也是一棵树，被称作原树的子树（subtree）。</li></ul></blockquote><h2 id="下面的关于Tree的术语主要来自维基百科"><a href="#下面的关于Tree的术语主要来自维基百科" class="headerlink" title="下面的关于Tree的术语主要来自维基百科"></a>下面的关于Tree的术语主要来自维基百科</h2><table><thead><tr><th>术语</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>Root</td><td>根节点</td><td>The top node in a tree.</td></tr><tr><td>Child</td><td>子节点</td><td>A node directly connected to another node when moving away from the Root.</td></tr><tr><td>Leaf</td><td>叶子节点</td><td>A node with no children</td></tr><tr><td>Edge</td><td>边</td><td>The connection between one node and another.</td></tr><tr><td>Path</td><td>路径</td><td>A sequence of nodes and edges connecting a node with a descendant.</td></tr><tr><td>Height</td><td>节点高度</td><td>The height of a node is the number of edges on the longest path between that node and a leaf.</td></tr><tr><td>Level</td><td>层级</td><td>The level of a node is defined by 1 + (the number of connections between the node and the root).</td></tr><tr><td>Depth</td><td>深度</td><td>The depth of a node is the number of edges from the tree’s root node to the node.</td></tr><tr><td>Degree</td><td>度</td><td>The number of subtrees of a node.</td></tr></tbody></table><h2 id="相关术语-中文版"><a href="#相关术语-中文版" class="headerlink" title="相关术语 中文版"></a>相关术语 中文版</h2><ul><li>节点的度：一个节点含有的子树的个数称为该节点的度；</li><li>叶节点或终端节点：度为0的节点称为叶节点；</li><li>非终端节点或分支节点：度不为0的节点；</li><li>双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li><li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li><li>树的度：一棵树中，最大的节点的度称为树的度；</li><li>节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</li><li>树的高度或深度：树中节点的最大层次；</li><li>堂兄弟节点：双亲在同一层的节点互为堂兄弟；</li><li>节点的祖先：从根到该节点所经分支上的所有节点；</li><li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li>森林：由m（m&gt;=0）棵互不相交的树的集合称为森林；</li></ul><hr><h2 id="下面通过几个图解释树的几个比较重要的概念"><a href="#下面通过几个图解释树的几个比较重要的概念" class="headerlink" title="下面通过几个图解释树的几个比较重要的概念"></a>下面通过几个图解释树的几个比较重要的概念</h2><h2 id="Edge、Root、Leaf"><a href="#Edge、Root、Leaf" class="headerlink" title="Edge、Root、Leaf"></a>Edge、Root、Leaf</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-2.png" data-fancybox="group" data-caption="Edge、Root、Leaf" class="fancybox"><img alt="Edge、Root、Leaf" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-2.png" class="lazyload" title="Edge、Root、Leaf"></a></li></ul><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-3.png" data-fancybox="group" data-caption="Path" class="fancybox"><img alt="Path" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-3.png" class="lazyload" title="Path"></a></li></ul><h2 id="Height"><a href="#Height" class="headerlink" title="Height"></a>Height</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-4.png" data-fancybox="group" data-caption="Height" class="fancybox"><img alt="Height" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-4.png" class="lazyload" title="Height"></a></li></ul><p>需要注意的是叶子节点的高度为0，如果树只有一个节点，那么这个节点的高也是0</p><h2 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-5.png" data-fancybox="group" data-caption="Depth" class="fancybox"><img alt="Depth" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-5.png" class="lazyload" title="Depth"></a></li></ul><p>需要注意的是根节点的深度（Depth）是0.</p><p>从Height和Depth的对比，它们的方向刚好是相反的。<br>对于Height和Depth不用死记，我们可以把树倒过来看，也就是我们现实生活当中的树，求某个节点的Height那肯定是从根部往上的方向；<br>如果是求某个节点的深度，方向肯定是向下的。</p><h2 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h2><ul><li><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-6.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-6.png" class="lazyload" title="Level"></a></li></ul><p>节点的Level是从1开始的，Level = Depth+1，根节点的Level=1</p><p>也有很多书籍上Level是从0开始的，这样的话Level就等于Depth，根节点的Level=0</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是一个每个最结最多只能有两个分支的树，左边的分支称之为左子树，右边的分支称之为右子树。</p><p>也就是说二叉树节点的度最大也就是2，而普通的树，节点的度是没有限制的。</p><h1 id="二叉树的分类"><a href="#二叉树的分类" class="headerlink" title="二叉树的分类"></a>二叉树的分类</h1><h2 id="完美-满二叉树-Perfect-Binary-Tree"><a href="#完美-满二叉树-Perfect-Binary-Tree" class="headerlink" title="完美/满二叉树(Perfect Binary Tree)"></a>完美/满二叉树(Perfect Binary Tree)</h2><p>完美二叉树（满二叉树）。完美二叉树满足两个特性：</p><ol><li>所有的几点都包含两个子节点</li><li>所有的叶子节点的Height或者Level都相等</li></ol><p>例：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-7.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-7.png" class="lazyload" title="Level"></a></p><h2 id="完全二叉树-Complete-Binary-Tree"><a href="#完全二叉树-Complete-Binary-Tree" class="headerlink" title="完全二叉树(Complete Binary Tree)"></a>完全二叉树(Complete Binary Tree)</h2><p>完全二叉树是 除了最后一层都是满的（都有两个子节点），并且最后一层的节点是从左往右排列的。<br>完全二叉树，通俗点说就是节点按层从左往右排列。如果最后一层排满了就是完美二叉树，没有满则是完全二叉树。<br>所以完美二叉树一定是完全二叉树，完全二叉树不一定是完美二叉树。</p><p>一个完全二叉树可以高效的使用数组来表示。</p><p>例：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-8.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-8.png" class="lazyload" title="Level"></a></p><h1 id="完满二叉树-Full-Binary-Tree"><a href="#完满二叉树-Full-Binary-Tree" class="headerlink" title="完满二叉树(Full Binary Tree)"></a>完满二叉树(Full Binary Tree)</h1><p>完满二叉树就简单了，就是每个节点都有两个子节点。也就是说它比完美二叉树少了一个条件。</p><p>例：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-9.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.0-9.png" class="lazyload" title="Level"></a></p><h1 id="二叉树实现"><a href="#二叉树实现" class="headerlink" title="二叉树实现"></a>二叉树实现</h1><h2 id="二叉树的遍历策略"><a href="#二叉树的遍历策略" class="headerlink" title="二叉树的遍历策略"></a>二叉树的遍历策略</h2><blockquote><p>将整个二叉树分为三部分</p><blockquote><ul><li>根</li><li>左子树</li><li>右子树</li></ul></blockquote></blockquote><blockquote><p>遍历方式</p><blockquote><ul><li>方式一<blockquote><ul><li>先序（根）遍历 根-&gt;左子-&gt;右子</li><li>中序（根）遍历 左子-&gt;根-&gt;右子</li><li>后序（根）遍历 左子-&gt;右子-&gt;根</li></ul></blockquote></li><li>方式二<blockquote><ul><li>按层次遍历</li></ul></blockquote></li></ul></blockquote></blockquote><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-1.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-1.png" class="lazyload" title="Level"></a></p><ul><li>先序遍历（DLR）: 1 4 5 2 3 6 7</li><li>中序遍历（LDR）: 4 5 1 3 2 6 7</li><li>后序遍历（LRD）: 5 4 3 7 6 2 1</li></ul><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p>已知某二叉树，其<br>后序遍历结果为：5 4 3 7 6 2 1，<br>中序遍历结果为：4 5 1 3 2 6 7，<br>求其先序遍历（DLR）结果？</p><p>解：</p><p>∵ 后序遍历顺序为左子-&gt;右子-&gt;根</p><p>∴ 可知root节点为 1</p><p>由中序遍历结果得下图</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-2.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-2.png" class="lazyload" title="Level"></a></p><p>在分析根1的左子树，由于 4 5 是按照中序遍历排列，可推得<br><strong>4为左子树的根，5为左子树的根的右子</strong><br>或者<br><strong>5为左子树的根，4为左子树根的左子</strong></p><p>由于在后序遍历中排列顺序为 5 4 3 7 6 2 1，<br>5 4 是根1的左子树，顺序为左子-&gt;右子-&gt;根，由于左子树至少有根，因此排列顺序为右子-&gt;根，即得到如下图：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-3.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-3.png" class="lazyload" title="Level"></a></p><p>现在我们来分析root的右子树排列状态：</p><p>由后序遍历结果 3 7 6 2 得2为右子树得根，又中序遍历结果为 3 2 6 7<br>因此我们可以得出下图：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-4.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-4.png" class="lazyload" title="Level"></a></p><p>后序遍历结果 6 7 ， 中序遍历结果 7 6，易得7为根，6为右子，得出二叉树图形为：</p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-1.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/datastructure_4.2-1.png" class="lazyload" title="Level"></a></p><p>得先序遍历结果为：<strong>1 4 5 2 3 6 7</strong></p><hr><h2 id="按层次遍历（广度优先搜索）"><a href="#按层次遍历（广度优先搜索）" class="headerlink" title="按层次遍历（广度优先搜索）"></a>按层次遍历（广度优先搜索）</h2><p>结果为 <strong>1 4 2 5 3 6 7</strong></p><h1 id="二叉树接口"><a href="#二叉树接口" class="headerlink" title="二叉树接口"></a>二叉树接口</h1><h2 id="二叉链表节点"><a href="#二叉链表节点" class="headerlink" title="二叉链表节点"></a>二叉链表节点</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.btree;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉链表的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> Object value;     <span class="hljs-comment">// 节点值</span><br><span class="hljs-keyword">public</span> Node leftChild;   <span class="hljs-comment">// 左子树引用</span><br><span class="hljs-keyword">public</span> Node rightChild;  <span class="hljs-comment">// 右子树引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object value, Node leftChild, Node rightChild)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.value = value;<br><span class="hljs-keyword">this</span>.leftChild = leftChild;<br><span class="hljs-keyword">this</span>.rightChild = rightChild;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object value)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.value = value;<br><span class="hljs-keyword">this</span>.leftChild = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">this</span>.rightChild = <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"Node [value="</span> + value + <span class="hljs-string">", leftChild="</span> + leftChild + <span class="hljs-string">", rightChild="</span> + rightChild + <span class="hljs-string">"]"</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="二叉树接口-1"><a href="#二叉树接口-1" class="headerlink" title="二叉树接口"></a>二叉树接口</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.btree;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树的接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否空树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树节点数量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取二叉树的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询指定值的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">findKey</span><span class="hljs-params">(Object value)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 前序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 前序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按照层次遍历二叉树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">levelOrderByStack</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="二叉树操作"><a href="#二叉树操作" class="headerlink" title="二叉树操作"></a>二叉树操作</h1><blockquote><p>未完待续</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;!-- # Introduction --&gt;
&lt;ul&gt;
&lt;li&gt;数据结构入门&lt;/li&gt;
&lt;li&gt;Powered by Bill&lt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.webpro.ltd/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构 算法" scheme="http://blog.webpro.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux c 程序设计考试 复习</title>
    <link href="http://blog.webpro.ltd/2019/08/09/Linux-c-review1/"/>
    <id>http://blog.webpro.ltd/2019/08/09/Linux-c-review1/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2020-03-12T13:23:14.109Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匹配字符串在文件中出现的行号"><a href="#匹配字符串在文件中出现的行号" class="headerlink" title="匹配字符串在文件中出现的行号"></a>匹配字符串在文件中出现的行号</h1><blockquote><p>打开一文本文件，给出字符串(char *pattern)在文件哪些行出现过，在屏幕上显示匹配的行号和该行文本。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><figcaption><span>findstr.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computed</span><span class="hljs-params">(FILE *fd, <span class="hljs-keyword">char</span> *pattern)</span></span>&#123;<br>    <span class="hljs-comment">// windows 中 换行符为 \r\n</span><br>    <span class="hljs-comment">// unix 中 换行符为 \n</span><br>    <span class="hljs-comment">// 因此可以使用 \n 作为统一换行标志</span><br><br>    <span class="hljs-keyword">char</span> ch;                            <span class="hljs-comment">// 单字符缓存</span><br>    <span class="hljs-keyword">int</span> line = <span class="hljs-number">1</span>;                       <span class="hljs-comment">// 当前行数</span><br>    <span class="hljs-keyword">char</span> current_line_content[<span class="hljs-number">256</span>];     <span class="hljs-comment">// 当前行字符串缓存</span><br>    <span class="hljs-keyword">int</span> temp_idx = <span class="hljs-number">0</span>;                   <span class="hljs-comment">// 当前行的匹配列数</span><br>    <span class="hljs-keyword">int</span> current_idx = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 当前行的列数</span><br>    <span class="hljs-keyword">int</span> current_status = <span class="hljs-number">0</span>;             <span class="hljs-comment">// 当前行无匹配成功状态 当一行中有一个匹配后，就不再对其后面的字符串进行比较了</span><br><br>    <span class="hljs-keyword">while</span>((ch = fgetc(fd)) != EOF)&#123;<br>        <span class="hljs-comment">// 换行后行数+1</span><br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'\n'</span>)&#123;<br>            <span class="hljs-keyword">if</span>(current_status)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"line[%d], content[%s]\n"</span>, line, current_line_content);<br>                current_status = <span class="hljs-number">0</span>;<br>            &#125;<br>            line++;<br>            <span class="hljs-built_in">memset</span>(current_line_content, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(current_line_content));<br>            current_idx = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'\r'</span>)&#123;<br>            <span class="hljs-comment">// 对于win系统忽略掉\r</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            current_line_content[current_idx] = ch;<br>            current_idx++;<br>            <span class="hljs-keyword">if</span>(!current_status)&#123;<br>                <span class="hljs-keyword">if</span>(ch == pattern[temp_idx])&#123;<br>                    temp_idx++;<br>                    <span class="hljs-keyword">if</span>(pattern[temp_idx] == <span class="hljs-string">'\0'</span>)&#123;<br>                        <span class="hljs-comment">// 匹配成功</span><br>                        temp_idx = <span class="hljs-number">0</span>;<br>                        current_status = <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 不匹配从头来</span><br>                    temp_idx = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">// 第 0 个参数是运行的文件名</span><br>        perror(<span class="hljs-string">"请传参: ./main filename pattern"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">char</span>* file_name = (<span class="hljs-keyword">char</span>*)argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">char</span>* pattern   = (<span class="hljs-keyword">char</span>*)argv[<span class="hljs-number">2</span>];<br><br>    FILE *fd;     <span class="hljs-comment">// 文件句柄</span><br><br>    <span class="hljs-keyword">if</span>((fd = fopen(file_name, <span class="hljs-string">"r"</span>)) == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">"文件打开失败"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    computed(fd, pattern);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试匹配的文件：find"><a href="#测试匹配的文件：find" class="headerlink" title="测试匹配的文件：find"></a>测试匹配的文件：find</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><figcaption><span>file find</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">Mr. liu, would you care for another helping?<br>No more, thank you. I'm quite full.<br>Did you enjoy the meal?<br>I'm so glad you like it.<br>Thank you very much for your hospitality.<br></code></pre></td></tr></table></figure></div><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -o findstr findstr.c<br></code></pre></td></tr></table></figure></div><h2 id="测试1-在find文件中查找包含you字符串的行并输出"><a href="#测试1-在find文件中查找包含you字符串的行并输出" class="headerlink" title="测试1 在find文件中查找包含you字符串的行并输出"></a>测试1 在find文件中查找包含you字符串的行并输出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find you</span><br>line[1], content[Mr. liu, would you care <span class="hljs-keyword">for</span> another helping?]<br>line[2], content[No more, thank you. I<span class="hljs-string">'m quite full.]</span><br><span class="hljs-string">line[3], content[Did you enjoy the meal?]</span><br><span class="hljs-string">line[4], content[I'</span>m so glad you like it.]<br>line[5], content[Thank you very much <span class="hljs-keyword">for</span> your hospitality.]<br></code></pre></td></tr></table></figure></div><h2 id="测试2-在find文件中查找包含Mr字符串的行并输出"><a href="#测试2-在find文件中查找包含Mr字符串的行并输出" class="headerlink" title="测试2 在find文件中查找包含Mr字符串的行并输出"></a>测试2 在find文件中查找包含Mr字符串的行并输出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find Mr</span><br>line[1], content[Mr. liu, would you care <span class="hljs-keyword">for</span> another helping?]<br></code></pre></td></tr></table></figure></div><h2 id="测试3-输入一个不存在的文件"><a href="#测试3-输入一个不存在的文件" class="headerlink" title="测试3 输入一个不存在的文件"></a>测试3 输入一个不存在的文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find2 you</span><br>文件打开失败: No such file or directory<br></code></pre></td></tr></table></figure></div><h2 id="测试4-输入错误的参数个数"><a href="#测试4-输入错误的参数个数" class="headerlink" title="测试4 输入错误的参数个数"></a>测试4 输入错误的参数个数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find</span><br>请传参: ./main filename pattern: Success<br></code></pre></td></tr></table></figure></div><h1 id="父子进程管道通讯"><a href="#父子进程管道通讯" class="headerlink" title="父子进程管道通讯"></a>父子进程管道通讯</h1><h2 id="方式1-重定向I-O"><a href="#方式1-重定向I-O" class="headerlink" title="方式1 重定向I/O"></a>方式1 重定向I/O</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><figcaption><span>pipe1.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>]; <span class="hljs-comment">// fd[0]为读 fd[1]为写</span><br>    <span class="hljs-keyword">pid_t</span> pid;<br><br>    <span class="hljs-comment">/*创建管道 */</span><br>    <span class="hljs-keyword">if</span>(pipe(fd) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to pipe"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*创建子进程 */</span><br>    <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to fork"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 父进程</span><br>        close(fd[<span class="hljs-number">0</span>]);<br>        dup(fd[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"我是父进程"</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 子进程</span><br>        close(fd[<span class="hljs-number">1</span>]);<br>        dup(fd[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">char</span> str[<span class="hljs-number">256</span>];<br>        fgets(str, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./run pipe1</span><br><br>--------- project pipe1 start ---------<br><br>我是父进程<br>--------- project pipe1 end ---------<br></code></pre></td></tr></table></figure></div><h2 id="方式2-标准方法"><a href="#方式2-标准方法" class="headerlink" title="方式2 标准方法"></a>方式2 标准方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFSZ PIPE_BUF <span class="hljs-comment">/* PIPE_BUF 管道默认一次性读写数据的长度 , PIPE_BUF大小为&lt;limits.h&gt;中规定*/</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>]; <span class="hljs-comment">// fd[0]为读 fd[1]为写</span><br>    <span class="hljs-keyword">char</span> buf[BUFSZ];<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">ssize_t</span> len;<br><br>    <span class="hljs-comment">/*创建管道 */</span><br>    <span class="hljs-keyword">if</span>(pipe(fd) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to pipe"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*创建子进程 */</span><br>    <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to fork"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<br>        close(fd[<span class="hljs-number">0</span>]);                         <span class="hljs-comment">/*父进程中关闭管道的读出端*/</span><br>        write(fd[<span class="hljs-number">1</span>], <span class="hljs-string">"我是父进程\n"</span>, <span class="hljs-number">20</span>);  <span class="hljs-comment">/*父进程向管道写入数据*/</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        close(fd[<span class="hljs-number">1</span>]);                   <span class="hljs-comment">/*子进程中关闭管道的写入端*/</span><br>        len = read(fd[<span class="hljs-number">0</span>], buf, BUFSZ);  <span class="hljs-comment">/*子进程读取管道数据*/</span><br>        <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">0</span>)&#123;<br>            perror ( <span class="hljs-string">"process failed when read a pipe "</span> );<br>            <span class="hljs-built_in">exit</span>( <span class="hljs-number">1</span> );<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            write(STDOUT_FILENO, buf, len);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试运行-1"><a href="#测试运行-1" class="headerlink" title="测试运行"></a>测试运行</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./run pipe</span><br><br>--------- project pipe start ---------<br><br>我是父进程<br><br>--------- project pipe end ---------<br></code></pre></td></tr></table></figure></div><h2 id="附：run脚本代码-兼容运行带MySQL操作头的代码编译"><a href="#附：run脚本代码-兼容运行带MySQL操作头的代码编译" class="headerlink" title="附：run脚本代码(兼容运行带MySQL操作头的代码编译)"></a>附：run脚本代码(兼容运行带MySQL操作头的代码编译)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"\n--------- project <span class="hljs-variable">$1</span> start ---------\n"</span><br>g++ -o <span class="hljs-variable">$1</span> <span class="hljs-variable">$1</span>.c `mysql_config --cflags --libs`;./<span class="hljs-variable">$1</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">"\n--------- project <span class="hljs-variable">$1</span> end ---------\n"</span><br>rm <span class="hljs-variable">$1</span>;<br></code></pre></td></tr></table></figure></div><h1 id="ls-l命令结果说明"><a href="#ls-l命令结果说明" class="headerlink" title="ls -l命令结果说明"></a>ls -l命令结果说明</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>例如</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@webpro1 VmwareShare]<span class="hljs-comment"># ls -l</span><br>总用量 88<br>-rwxrwxrwx. 1 root root 88204 8月   9 08:49 mlocate.rpm<br>-rwxrwxrwx. 1 root root    56 8月   9 09:07 <span class="hljs-built_in">test</span><br>-rwxrwxrwx. 1 root root     7 8月   8 12:20 新文件~<br>-rwxrwxrwx. 1 root root    15 8月   8 20:02 新文件.txt<br></code></pre></td></tr></table></figure></div><ul><li>对于 - rwx  rwx  rwx 的第一列：</li></ul><table><thead><tr><th align="left">第一个属性</th><th align="left">文件类型</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">Linux中最多的一种文件类型<br>包括纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件。</td></tr><tr><td align="left">d</td><td align="left">二，目录文件类型</td></tr><tr><td align="left">c</td><td align="left">串行端口的接口设备，例如键盘、鼠标等等</td></tr><tr><td align="left">b</td><td align="left">可随机存储装置。<br>存储数据以供系统存取的接口设备，简单而言就是硬盘。<br>例如一号硬盘的代码是 /dev/hda1等文件</td></tr><tr><td align="left">s</td><td align="left">套接字文件，这类文件通常用在网络数据连接。<br>可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信，最常在var/run目录中看到这种文件类型。</td></tr><tr><td align="left">p</td><td align="left">管道文件。FIFO也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO是first-in-first-out(先进先出)的缩写。第一个属性为</td></tr><tr><td align="left">l</td><td align="left">链接文件，类似Windows下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]。</td></tr></tbody></table><ul><li><p>对于 - rwx  rwx  rwx 的第二、三、四列：</p></li><li><p>第二、三、四列分别代表拥有者 、群组 、其它组的权限设定</p></li><li><p>权限：rwx</p><ul><li>r - 读</li><li>w - 写</li><li>x - 运行</li></ul></li><li><p>rwx对应的数字</p></li></ul><table><thead><tr><th>标志字母</th><th>代表数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table><ul><li>如何计算并设置权限<ul><li>常见的权限表示形式有：<ul><li>-rw——- (600)      只有拥有者有读写权限。</li><li>-rw-r–r– (644)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。</li><li>-rwx—— (700)     只有拥有者有读、写、执行权限。</li><li>-rwxr-xr-x (755)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</li><li>-rwx–x–x (711)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</li><li>-rw-rw-rw- (666)   所有用户都有文件读、写权限。</li><li>-rwxrwxrwx (777)  所有用户都有读、写、执行权限。</li></ul></li><li>例1:<code>rw-------</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rw-</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">4+2+0</td><td align="left">0+0+0</td><td align="left">0+0+0</td></tr><tr><td align="left">6</td><td align="left">0</td><td align="left">0</td></tr></tbody></table></li><li>例2:<code>rw-r--r--</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rw-</td><td align="left">r–</td><td align="left">r–</td></tr><tr><td align="left">4+2+0</td><td align="left">4+0+0</td><td align="left">4+0+0</td></tr><tr><td align="left">6</td><td align="left">4</td><td align="left">4</td></tr></tbody></table></li><li>例3:<code>rwxrwxrwx</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rwx</td><td align="left">rwx</td><td align="left">rwx</td></tr><tr><td align="left">4+2+1</td><td align="left">4+2+1</td><td align="left">4+2+1</td></tr><tr><td align="left">7</td><td align="left">7</td><td align="left">7</td></tr></tbody></table></li></ul></li></ul><h1 id="reboot和init6之间的区别"><a href="#reboot和init6之间的区别" class="headerlink" title="reboot和init6之间的区别"></a>reboot和init6之间的区别</h1><ul><li><p>Linux中重启的两个命令：reboot和init6之间的区别</p></li><li><p>Init 6是重新启动机器； reboot也是重新启动机器；</p></li><li><p>那这两个命令到底有什么区别呢？</p><ul><li><p>对这两个操作使用man命令看到的内容如下：</p><ul><li><p>“init 6” 基于一系列/etc/inittab文件，并且每个应用都会有一个相应shutdown脚本。</p></li><li><p>“init 6”调用一系列shutdown脚本(/etc/rc0.d/K*)来使系统优雅关机;</p></li><li><p>‘reboot’并不执行这些过程，reboot更是一个kernel级别的命令，</p></li><li><p>不对应用使用shutdown脚本。</p></li><li><p>reboot - reboot performs a sync(1M) operation on the disks, andthen amulti- user reboot is initiated. See init(1M) fordetails.init 6 Stop the operating system and reboot to the state defined by the initdefault entry in /etc/inittab.</p></li><li><p>我们应该在通常情况下使用 init 6.</p></li><li><p>在出问题的状况下或强制重启时使用reboot</p></li></ul></li></ul></li></ul><ul><li><p>Linux系统有7个运行级别(runlevel)：</p><ul><li><p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p></li><li><p>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p></li><li><p>运行级别2：多用户状态(没有NFS)</p></li><li><p>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p></li><li><p>运行级别4：系统未使用，保留</p></li><li><p>运行级别5：X11控制台，登陆后进入图形GUI模式</p></li><li><p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p></li></ul></li></ul><h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /</span><br>bin   cache  dev  home  lib    media  opt   root  sbin  srv  tmp  var<br>boot  data   etc  init  lib64  mnt    proc  run   snap  sys  usr<br></code></pre></td></tr></table></figure></div><h2 id="树状目录结构"><a href="#树状目录结构" class="headerlink" title="树状目录结构"></a>树状目录结构</h2><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312190212.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312190212.png" class="lazyload" title></a></p><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>/bin</td><td>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</td></tr><tr><td>/boot</td><td>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</td></tr><tr><td>/dev</td><td>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</td></tr><tr><td>/etc</td><td>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</td></tr><tr><td>/home</td><td>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</td></tr><tr><td>/lib</td><td>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</td></tr><tr><td>/lost+found</td><td>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</td></tr><tr><td>/media</td><td>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</td></tr><tr><td>/mnt</td><td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</td></tr><tr><td>/opt</td><td>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</td></tr><tr><td>/proc</td><td>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，<br>比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：<code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></td></tr><tr><td>/root</td><td>该目录为系统管理员，也称作超级权限者的用户主目录。</td></tr><tr><td>/sbin</td><td>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</td></tr><tr><td>/selinux</td><td>这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</td></tr><tr><td>/srv</td><td>该目录存放一些服务启动之后需要提取的数据。</td></tr><tr><td>/sys</td><td>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</td></tr><tr><td>/tmp</td><td>这个目录是用来存放一些临时文件的。</td></tr><tr><td>/usr</td><td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</td></tr><tr><td>/usr/bin</td><td>系统用户使用的应用程序。</td></tr><tr><td>/usr/sbin</td><td>超级用户使用的比较高级的管理程序和系统守护程序。</td></tr><tr><td>/usr/src</td><td>内核源代码默认的放置目录。</td></tr><tr><td>/var</td><td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td></tr><tr><td>/run</td><td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</td></tr></tbody></table><blockquote><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p></blockquote><ul><li>/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</li><li>/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</li><li>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</li><li>/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</li></ul><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li>声明：本节大部分语法教程来自<a href="https://www.runoob.com" target="_blank" rel="noopener">runoob</a>，<code>runoob</code>版权所有，这里粘贴仅供学习</li></ul><h2 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a><code>ls</code>指令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxr-xr-x 0 root root 512 Jul  5 08:20 Desktop<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Documents<br>drwxr-xr-x 0 root root 512 Jun 20 07:17 Downloads<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Music<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Pictures<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Public<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Templates<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Videos<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /</span><br>bin   cache  dev  home  lib    media  opt   root  sbin  srv  tmp  var<br>boot  data   etc  init  lib64  mnt    proc  run   snap  sys  usr<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls</span><br>Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videosroot@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -a</span><br>.              .cache   Documents      .<span class="hljs-built_in">local</span>    Pictures  Public       .viminfo     .xsession-errors<br>..             .config  Downloads      .mozilla  .pki      Templates    .vnc<br>.bash_history  .dbus    .gvfs          Music     .presage  .thumbnails  .Xauthority<br>.bashrc        Desktop  .ICEauthority  .nano     .profile  Videos       .xsession<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxr-xr-x 0 root root 512 Jul  5 08:20 Desktop<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Documents<br>drwxr-xr-x 0 root root 512 Jun 20 07:17 Downloads<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Music<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Pictures<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Public<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Templates<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Videos<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /|grep -n lib</span><br>9:lib<br>10:lib64<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /|grep lib</span><br>lib<br>lib64<br></code></pre></td></tr></table></figure></div><h2 id="chmod更改权限"><a href="#chmod更改权限" class="headerlink" title="chmod更改权限"></a><code>chmod</code>更改权限</h2><ul><li><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p></li><li><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p></li><li><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><table><thead><tr><th>权限</th><th>数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table></li><li><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul></li><li><p>查看权限、更改权限</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rw-rw-rw- 1 root root   6 Aug 10 10:23 test.txt<br></code></pre></td></tr></table></figure></div>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># chmod 777 test.txt</span><br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rwxrwxrwx 1 root root   6 Aug 10 10:23 test.txt*<br></code></pre></td></tr></table></figure></div>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># chmod 640 test.txt</span><br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rw-r----- 1 root root   6 Aug 10 10:23 test.txt<br></code></pre></td></tr></table></figure></div></li></ul><h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ls</td><td>列出目录</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>pwd</td><td>显示目前的目录</td></tr><tr><td>mkdir</td><td>创建一个新的目录</td></tr><tr><td>rmdir</td><td>删除一个空的目录</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>rm</td><td>移除文件或目录</td></tr><tr><td>mv</td><td>移动文件与目录，或修改文件与目录的名称</td></tr></tbody></table><blockquote><p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp</p></blockquote><h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># ls [-aAdfFhilnrRSt] 目录名称[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称[root@www ~]# ls [--full-time] 目录名称</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：<br>  -a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)<br>  -d ：仅列出目录本身，而不是列出目录内的文件数据(常用)<br>  -l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p></li><li><p>示例</p>  <div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls</span><br>test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -l</span><br>total 0<br>-rw-r----- 1 root root 6 Aug 10 10:23 test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -a</span><br>.  ..  test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -al</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 .<br>drwx------ 0 root root 512 Aug 10 10:23 ..<br>-rw-r----- 1 root root   6 Aug 10 10:23 test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -d</span><br>.<br></code></pre></td></tr></table></figure></div></li></ul><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><ul><li>cd是Change Directory的缩写，这是用来变换工作目录的命令。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [相对路径或绝对路径]<br></code></pre></td></tr></table></figure></div><ul><li>示例<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># cd /</span><br>root@DESKTOP-P9B04K1:/<span class="hljs-comment"># cd /root</span><br>root@DESKTOP-P9B04K1:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure></div></li></ul><h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><ul><li>pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># pwd [-P]</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li><code>-P</code>：显示出确实的路径，而非使用连结 (link) 路径。</li></ul></li><li><p>实例显示出实际的工作目录，而非连结档本身的目录名而已。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /var/mail   &lt;==注意，/var/mail是一个连结档</span><br>[root@www mail]<span class="hljs-comment"># pwd/var/mail         &lt;==列出目前的工作目录</span><br>[root@www mail]<span class="hljs-comment"># pwd -P/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～</span><br>[root@www mail]<span class="hljs-comment"># ls -ld /var/mail</span><br>lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail<br><span class="hljs-comment"># 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail </span><br><span class="hljs-comment"># 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！</span><br></code></pre></td></tr></table></figure></div></li></ul><h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><ul><li>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir [-mp] 目录名称<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：<br>  -m ：配置文件的权限。<br>  -p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</p></li><li><p>实例：请到/tmp底下尝试创建数个新目录看看：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /tmp[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录[root@www tmp]# mkdir test1/test2/test3/test4</span><br>mkdir: cannot create directory `test1/test2/test3/test4<span class="hljs-string">': </span><br><span class="hljs-string">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="hljs-string">[root@www tmp]# mkdir -p test1/test2/test3/test4</span><br></code></pre></td></tr></table></figure></div></li><li><p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p></li><li><p>实例：创建权限为 rwx–x–x 的目录。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>实例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mkdir -m 711 test2[root@www tmp]# ls -l</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:50 <span class="hljs-built_in">test</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure></div></li><li><p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p></li><li><p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p></li></ul><h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rmdir [-p] 目录名称<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-p ：连同上一级『空的』目录也一起删除</li></ul></li><li><p>删除 runoob 目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># rmdir runoob/</span><br></code></pre></td></tr></table></figure></div></li><li><p>将 mkdir 实例中创建的目录(/tmp 底下)删除掉！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># ls -l   &lt;==看看有多少目录存在？drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2[root@www tmp]<span class="hljs-comment"># rmdir test   &lt;==可直接删除掉，没问题[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！rmdir: `test1': Directory not empty</span><br>[root@www tmp]<span class="hljs-comment"># rmdir -p test1/test2/test3/test4</span><br>[root@www tmp]<span class="hljs-comment"># ls -l        &lt;==您看看，底下的输出中test与test1不见了！</span><br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure></div></li><li><p>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</p></li><li><p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p></li></ul><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><ul><li>cp 即拷贝文件和目录。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>-r：递归持续复制，用於目录的复制行为；(常用)</li><li>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li>-u：若 destination 比 source 旧才升级 destination ！</li></ul></li><li><p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cp ~/.bashrc /tmp/bashrc[root@www ~]# cp -i ~/.bashrc /tmp/bashrc</span><br>cp: overwrite `/tmp/bashrc<span class="hljs-string">'? n  &lt;==n不覆盖，y为覆盖</span><br></code></pre></td></tr></table></figure></div></li></ul><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm [-fir] 文件或目录<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul></li><li><p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># rm -i bashrc</span><br>rm: remove regular file `bashrc<span class="hljs-string">'? y</span><br></code></pre></td></tr></table></figure></div></li><li><p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p></li></ul><h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul></li><li><p>复制一文件，创建一目录，将文件移动到目录中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /tmp</span><br>[root@www tmp]<span class="hljs-comment"># cp ~/.bashrc bashrc</span><br>[root@www tmp]<span class="hljs-comment"># mkdir mvtest</span><br>[root@www tmp]<span class="hljs-comment"># mv bashrc mvtest</span><br></code></pre></td></tr></table></figure></div></li><li><p>将某个文件移动到某个目录去，就是这样做！</p></li><li><p>将刚刚的目录名称更名为 mvtest2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mv mvtest mvtest2</span><br></code></pre></td></tr></table></figure></div></li><li><p>对于如下指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mv obj1 obj2</span><br></code></pre></td></tr></table></figure></div><ul><li>当 obj1为普通文件，obj2在系统中不存在，那么这条指令会将文件名obj1改成obj2</li><li>当 obj1为普通文件，obj2为一目录，那么会将obj1移动到obj2中</li><li>当 obj1为一目录，obj2为一目录，这条指令会将obj1移动到obj2下成为其子目录</li><li>当 obj1为一目录，obj2为一文件，这条指令不会正常执行，会报错: mv: cannot overwrite non-directory ‘obj2’ with directory ‘obj1’</li></ul></li></ul><h1 id="who命令"><a href="#who命令" class="headerlink" title="who命令"></a>who命令</h1><blockquote><p>Linux who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p></blockquote><ul><li><p>使用权限：所有使用者都可使用。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">who - [husfV] [user]<br></code></pre></td></tr></table></figure></div></li><li><p>参数说明：</p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li><li>-w 或-T或–mesg或–message或–writable：显示用户的信息状态栏；</li><li>–help：在线帮助；</li><li>–version：显示版本信息。</li></ul></li><li><p>实例</p><ul><li>显示当前登录系统的用户<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who  //显示当前登录系统的用户root   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)</span><br></code></pre></td></tr></table></figure></div></li><li>显示标题栏<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -HNAME   LINE     TIME       COMMENT</span><br>root   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>显示用户登录来源<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -l -HNAME   LINE     TIME       IDLE     PID COMMENT</span><br>LOGIN  tty4     2014-05-13 12:11        852 id=4LOGIN  tty5     2014-05-13 12:11        855 id=5LOGIN  tty2     2014-05-13 12:11        862 id=2LOGIN  tty3     2014-05-13 12:11        864 id=3LOGIN  tty6     2014-05-13 12:11        867 id=6LOGIN  tty1     2014-05-13 12:11       1021 id=1<br></code></pre></td></tr></table></figure></div></li><li>显示终端属性<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -T -HNAME    LINE     TIME       COMMENT</span><br>root   + tty7     2014-05-13 12:12 (:0)root   + pts/0    2014-05-14 17:09 (:0.0)root   - pts/1    2014-05-14 18:51 (192.168.1.17)root   - pts/2    2014-05-14 19:48 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>只显示当前用户<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -m -HNAME   LINE     TIME       COMMENT</span><br>root   pts/1    2014-05-14 18:51 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>精简模式显示<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -qroot root root root# users=4</span><br></code></pre></td></tr></table></figure></div></li></ul></li></ul><h1 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：史上最全Vim快捷键键位图 — 入门到进阶</p><h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><ul><li>vim 键盘图：<br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312212055.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200312212055.png" class="lazyload" title></a></li></ul><h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><blockquote><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p></blockquote><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><ul><li>以下是常用的几个命令：<ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。</li><li>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</li><li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li></ul></li></ul><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><ul><li>在命令模式下按下i就进入了输入模式。</li><li>在输入模式中，可以使用以下按键：<ul><li>字符按键以及Shift组合，输入字符</li><li>ENTER，回车键，换行</li><li>BACK SPACE，退格键，删除光标前一个字符</li><li>DEL，删除键，删除光标后一个字符</li><li>方向键，在文本中移动光标</li><li>HOME/END，移动光标到行首/行尾</li><li>Page Up/Page Down，上/下翻页</li><li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li>ESC，退出输入模式，切换到命令模式</li></ul></li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><ul><li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li><li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li><li>在底线命令模式中，基本的命令有（已经省略了冒号）：<ul><li>q 退出程序</li><li>w 保存文件</li></ul></li><li>按ESC键可随时退出底线命令模式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;匹配字符串在文件中出现的行号&quot;&gt;&lt;a href=&quot;#匹配字符串在文件中出现的行号&quot; class=&quot;headerlink&quot; title=&quot;匹配字符串在文件中出现的行号&quot;&gt;&lt;/a&gt;匹配字符串在文件中出现的行号&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;打开一文本文件，给
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>写个网站流量统计插件</title>
    <link href="http://blog.webpro.ltd/2019/05/29/get-my-site-pageview/"/>
    <id>http://blog.webpro.ltd/2019/05/29/get-my-site-pageview/</id>
    <published>2019-05-28T16:00:00.000Z</published>
    <updated>2020-03-12T01:56:21.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件效果"><a href="#插件效果" class="headerlink" title="插件效果"></a>插件效果</h1><ul><li>闲来无事写个简易网站流量统计插件:</li><li>开发用到: php mysql js html</li><li>效果如下</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162203.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162203.png" class="lazyload" title></a></p><ul><li><input checked disabled type="checkbox"> 简易的流量统计插件，数据大致参考即可，没有高级算法，仅统计下IP和PV</li><li><input checked disabled type="checkbox"> 不防刷，用软件数据分分钟刷上去</li><li><input checked disabled type="checkbox"> 插件非常轻，对网站加载速度影响大概在5ms左右</li></ul><h1 id="统计数据分析"><a href="#统计数据分析" class="headerlink" title="统计数据分析"></a>统计数据分析</h1><ol><li>今日IP</li><li>今日PV</li><li>昨日IP</li><li>昨日PV</li><li>当前在线</li></ol><h1 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h1><h2 id="如何准确获取到客户端IP"><a href="#如何准确获取到客户端IP" class="headerlink" title="如何准确获取到客户端IP"></a>如何准确获取到客户端IP</h2><blockquote><p>统计IP需要获取到客户端真实的IP地址，仅js实现效果并不好。在这里我采用了[搜狐]的接口</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></div><h3 id="将搜狐提供的js嵌入到网页，访问结果如下"><a href="#将搜狐提供的js嵌入到网页，访问结果如下" class="headerlink" title="将搜狐提供的js嵌入到网页，访问结果如下:"></a>将搜狐提供的js嵌入到网页，访问结果如下:</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162450.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162450.png" class="lazyload" title></a></p><ul><li>直接返回了一个 returnCitySN 对象，我们可以获得准确的IP地址、cid(cid是什么给我留言)、地区</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> returnCitySN = &#123;<span class="hljs-string">"cip"</span>: <span class="hljs-string">"223.241.141.73"</span>, <span class="hljs-string">"cid"</span>: <span class="hljs-string">"340000"</span>, <span class="hljs-string">"cname"</span>: <span class="hljs-string">"安徽省"</span>&#125;;<br></code></pre></td></tr></table></figure></div><h3 id="通过returnCitySN获取ip、cname"><a href="#通过returnCitySN获取ip、cname" class="headerlink" title="通过returnCitySN获取ip、cname"></a>通过returnCitySN获取ip、cname</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ip = returnCitySN.cip;<br><span class="hljs-keyword">var</span> cname = returnCitySN.cname;<br></code></pre></td></tr></table></figure></div><blockquote><p>至此，IP已经拿到</p></blockquote><h2 id="后端存储方法"><a href="#后端存储方法" class="headerlink" title="后端存储方法"></a>后端存储方法</h2><ul><li>前端将IP、cname、访问的url传输到后端</li></ul><h3 id="wnzz-visit表（直接存储访问记录）"><a href="#wnzz-visit表（直接存储访问记录）" class="headerlink" title="wnzz_visit表（直接存储访问记录）"></a>wnzz_visit表（直接存储访问记录）</h3><table><thead><tr><th>键名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>自动编号</td><td>int11</td></tr><tr><td>ip</td><td>ip地址</td><td>varchar128</td></tr><tr><td>cname</td><td>地区</td><td>varchar255</td></tr><tr><td>url</td><td>访问地址</td><td>varchar255</td></tr><tr><td>time</td><td>访问时间戳</td><td>int11</td></tr><tr><td>siteid</td><td>统计站点编号</td><td>int11</td></tr></tbody></table><ul><li>字段 siteid，用来标记和区分不同的站点，这样可以实现多站点统计，只需要确保siteid不重复即可</li></ul><h3 id="wnzz-cal表（聚合一天的数据，存储计算结果）"><a href="#wnzz-cal表（聚合一天的数据，存储计算结果）" class="headerlink" title="wnzz_cal表（聚合一天的数据，存储计算结果）"></a>wnzz_cal表（聚合一天的数据，存储计算结果）</h3><ul><li>该表的作用是，当某一天已经过去时，自动计算某一天IP和PV总值，记录在这个表中</li></ul><blockquote><p>为什么需要这个表？因为当日统计的IP和PV都是动态计算的，php从数据库读出所有访问的数据，然后再对数据进行统计，如此方法加大了服务器的开销，所以对于一些不必要的重复计算，我们计算一次，存储其即可，下次需要直接读取。</p></blockquote><table><thead><tr><th>键名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>自动编号</td><td>int11</td></tr><tr><td>timestamp</td><td>某一天0点的时间戳</td><td>int11</td></tr><tr><td>timestr</td><td>某一天用字符表示，例如2019-05-05</td><td>varchar255</td></tr><tr><td>ips</td><td>IP总数</td><td>int11</td></tr><tr><td>pvs</td><td>PV总数</td><td>int11</td></tr><tr><td>siteid</td><td>统计站点编号</td><td>int11</td></tr></tbody></table><h2 id="计算IP、PV"><a href="#计算IP、PV" class="headerlink" title="计算IP、PV"></a>计算IP、PV</h2><ul><li><p>首先需要确认 siteid 和统计事件的区间</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//设置北京时间为默认时区</span><br>date_default_timezone_set(<span class="hljs-string">'PRC'</span>);<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 现在对应今日0点的时间戳</span><br>$today = strtotime(date(<span class="hljs-string">"Y-m-d"</span>), $now);<br><span class="hljs-comment">// 现在对应昨日0点的时间戳</span><br>$yesterday = $today - <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 现在对应明日0点的时间戳</span><br>$tomorrow = $today + <span class="hljs-number">86400</span>;<br></code></pre></td></tr></table></figure></div></li><li><p>动态统计一下今天的数据，即 <code>today&lt;=time&lt;tomorrow</code>，执行如下sql语句</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">- 原生SQL写法<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`wnzz_visit`</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`time`</span>&gt;&#123;$today&#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`time`</span>&lt;&#123;$tomorrow&#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`siteid`</span>=&#123;$siteid&#125;;<br></code></pre></td></tr></table></figure></div></li><li><p>持久层框架写法(下面提供)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">$res_t = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$today&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$tomorrow&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br></code></pre></td></tr></table></figure></div></li><li><p>从数据库读出的数据形如如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">coq</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coq">datas=&gt;[<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.3"</span>]<br><br>]<br></code></pre></td></tr></table></figure></div></li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310163423.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310163423.png" class="lazyload" title></a></p><ul><li>用PHP实现<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array(ips, pvs)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal_ipandpv</span><span class="hljs-params">($datas)</span></span>&#123;<br>    <span class="hljs-comment">// echo "emmm&lt;br/&gt;";</span><br>    <span class="hljs-comment">// print_r($datas);</span><br>    <span class="hljs-comment">// $ip['192.168.1.1'] = 10;</span><br>    $ip = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span>($datas <span class="hljs-keyword">as</span> $index =&gt; $item)&#123;<br>        <span class="hljs-keyword">if</span>(array_key_exists($item[<span class="hljs-string">'ip'</span>], $ip))&#123;<br>            <span class="hljs-comment">// 统计过</span><br>            $ip[$item[<span class="hljs-string">'ip'</span>]] += <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 没统计过</span><br>            $ip[$item[<span class="hljs-string">'ip'</span>]] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 累加IP和PV</span><br>    $ips = <span class="hljs-number">0</span>;<br>    $pvs = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span>($ip <span class="hljs-keyword">as</span> $keyip =&gt; $count)&#123;<br>        $ips++;<br>        $pvs += $count;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [$ips, $pvs];<br>&#125;<br></code></pre></td></tr></table></figure></div></li></ul><h2 id="计算当前在线人数"><a href="#计算当前在线人数" class="headerlink" title="计算当前在线人数"></a>计算当前在线人数</h2><ul><li><p>访问记录在十分钟以内的即算作在线</p></li><li><p>SQL语句</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`wnzz_visit`</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`time`</span>&gt;&#123;$onlineMin &#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`siteid`</span>=&#123;$siteid&#125;;<br></code></pre></td></tr></table></figure></div></li></ul><h1 id="插件总体代码实现"><a href="#插件总体代码实现" class="headerlink" title="插件总体代码实现"></a>插件总体代码实现</h1><h2 id="前端（js）"><a href="#前端（js）" class="headerlink" title="前端（js）"></a>前端（js）</h2><ul><li><p>domain变量是后端接口地址，这里我开发用的本地IP</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://pv.sohu.com/cityjson?ie=utf-8</span><br><span class="hljs-keyword">var</span> domain = <span class="hljs-string">"http://127.0.0.1/vsCode/wnzz/"</span>;<br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.href;<br><span class="hljs-keyword">var</span> siteid = <span class="hljs-number">1000</span>;<br><br>$.<span class="hljs-keyword">get</span>(domain + "?ip=" + returnCitySN["cip"] + "&amp;cname=" + returnCitySN["cname"] + "&amp;url=" + url + "&amp;siteid=" + siteid, function(result)&#123;<br>    <span class="hljs-built_in">console</span>.log(result);<br>&#125;);<br><br>$.<span class="hljs-keyword">get</span>(domain + "?act=<span class="hljs-keyword">get</span>&amp;siteid=" + siteid, function(result)&#123;<br>    $(<span class="hljs-string">"#wnzz"</span>).text(result);<br>&#125;);<br></code></pre></td></tr></table></figure></div></li><li><p>在引入上面的脚本之前要先引入jQuery库和下面的搜狐库</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div></li><li><p>访问结果会显示在ID为wnzz的标签中</p></li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><p>后端使用PHP</p></li><li><p>在下面的代码之前需要引用<a href="/pan/BeanANDTools.zip">Bean.class.php、Tools.class.php</a>，下载之后直接引用。即可以下为wnzz服务端接口</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// ============================ //</span><br><span class="hljs-comment">//                              //</span><br><span class="hljs-comment">//        数据库参数配置         //</span><br><span class="hljs-comment">//                              //</span><br><span class="hljs-comment">// ============================ //</span><br>define(<span class="hljs-string">"DB_HOST"</span>, <span class="hljs-string">"127.0.0.1"</span>);<br><span class="hljs-comment">// 数据库地址</span><br>define(<span class="hljs-string">"DB_USER"</span>, <span class="hljs-string">"root"</span>);<br><span class="hljs-comment">// 数据库用户名</span><br>define(<span class="hljs-string">"DB_PASSWD"</span>, <span class="hljs-string">"root"</span>);<br><span class="hljs-comment">// 数据库密码</span><br>define(<span class="hljs-string">"DB_NAME"</span>, <span class="hljs-string">"wnzz"</span>);<br><span class="hljs-comment">// 数据库名</span><br><span class="hljs-comment">//设置北京时间为默认时区</span><br>date_default_timezone_set(<span class="hljs-string">'PRC'</span>);<br><span class="hljs-comment">//输出当前时间</span><br><span class="hljs-comment">// echo date("Y-m-d H:i:s",time());  //2016-08-11 10:30:32</span><br><span class="hljs-comment">//获得当日凌晨的时间戳</span><br><span class="hljs-comment">// $today = strtotime(date("Y-m-d"),time());</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"./Tools.class.php"</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"./Bean.class.php"</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ip</span><br><span class="hljs-comment"> * cname</span><br><span class="hljs-comment"> * url</span><br><span class="hljs-comment"> * siteid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">siteid </span><br><span class="hljs-comment">1000-1999 我的字段</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 存储访客数据</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'ip'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'cname'</span>]) &amp;&amp; $_GET[<span class="hljs-string">'url'</span>] &amp;&amp; $_GET[<span class="hljs-string">'siteid'</span>]) &#123;<br>$ip = anti_sqlin($_GET[<span class="hljs-string">'ip'</span>]);<br>$cname = anti_sqlin($_GET[<span class="hljs-string">'cname'</span>]);<br>$url = anti_sqlin($_GET[<span class="hljs-string">'url'</span>]);<br>$siteid = (int)$_GET[<span class="hljs-string">'siteid'</span>];<br>$bean = <span class="hljs-keyword">new</span> Bean();<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 存储</span><br>$bean-&gt;save(<span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"ip=&#123;$ip&#125;"</span>, <span class="hljs-string">"cname=&#123;$cname&#125;"</span>, <span class="hljs-string">"url=&#123;$url&#125;"</span>, <span class="hljs-string">"time=&#123;$now&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-comment">// 获取访问记录</span><br>&#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'act'</span>]) &amp;&amp; $_GET[<span class="hljs-string">'act'</span>] == <span class="hljs-string">'get'</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'siteid'</span>])) &#123;<br>$siteid = (int)$_GET[<span class="hljs-string">'siteid'</span>];<br><span class="hljs-comment">// init</span><br>$y_ips = <span class="hljs-number">0</span>;<br>$y_pvs = <span class="hljs-number">0</span>;<br>$t_ips = <span class="hljs-number">0</span>;<br>$t_pvs = <span class="hljs-number">0</span>;<br>$online = <span class="hljs-number">0</span>;<br>$bean = <span class="hljs-keyword">new</span> Bean();<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 现在对应今日0点的时间戳</span><br>$today = strtotime(date(<span class="hljs-string">"Y-m-d"</span>), $now);<br><span class="hljs-comment">// 现在对应昨日0点的时间戳</span><br>$yesterday = $today - <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 现在对应明日0点的时间戳</span><br>$tomorrow = $today + <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 查找昨天的记录</span><br>$res = $bean-&gt;findByX([<span class="hljs-string">'timestr'</span>, <span class="hljs-string">'ips'</span>, <span class="hljs-string">'pvs'</span>], <span class="hljs-string">"wnzz_cal"</span>, [<span class="hljs-string">"timestamp=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-keyword">if</span>($res[<span class="hljs-string">'status'</span>] == <span class="hljs-string">'data'</span>) &#123;<br><span class="hljs-comment">// 有数据直接读</span><br>$y_ips = $res[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'ips'</span>];<br>$y_pvs = $res[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'pvs'</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 计算并存储</span><br>$res_m = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$today&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas = $res_m[<span class="hljs-string">'data'</span>];<br>$ipsandpvs = cal_ipandpv($datas);<br><span class="hljs-comment">// 存储</span><br><span class="hljs-comment">// $ips</span><br><span class="hljs-comment">// $pvs</span><br><span class="hljs-comment">// $yesterday</span><br><span class="hljs-comment">// $yesterday_timestamp</span><br>$ips = $ipsandpvs[<span class="hljs-number">0</span>];<br>$pvs = $ipsandpvs[<span class="hljs-number">1</span>];<br>$yesterday_timestamp = date(<span class="hljs-string">"Y-m-d"</span>, $yesterday);<br>$y_ips = $ips;<br>$y_pvs = $pvs;<br>$res1 = $bean-&gt;save(<span class="hljs-string">"wnzz_cal"</span>, [<span class="hljs-string">"ips=&#123;$ips&#125;"</span>, <span class="hljs-string">"pvs=&#123;$pvs&#125;"</span>, <span class="hljs-string">"timestamp=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"timestr=&#123;$yesterday_timestamp&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-comment">// print_r($res1);</span><br>&#125;<br><span class="hljs-comment">// 查找今天的记录</span><br>$res_t = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$today&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$tomorrow&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas_t = $res_t[<span class="hljs-string">'data'</span>];<br>$ipsandpvs_t = cal_ipandpv($datas_t);<br>$ips_t = $ipsandpvs_t[<span class="hljs-number">0</span>];<br>$pvs_t = $ipsandpvs_t[<span class="hljs-number">1</span>];<br>$t_ips = $ips_t;<br>$t_pvs = $pvs_t;<br><span class="hljs-comment">// 获取当前在线，10min内为在线</span><br><span class="hljs-comment">// 用PV计算当前在线数</span><br>$onlineMin = $now - <span class="hljs-number">600</span>;<br>$res_o = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$onlineMin&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas_o = $res_o[<span class="hljs-string">'data'</span>];<br>$ipsandpvs_o = cal_ipandpv($datas_o);<br>$ips_o = $ipsandpvs_o[<span class="hljs-number">0</span>];<br>$pvs_o = $ipsandpvs_o[<span class="hljs-number">1</span>];<br><span class="hljs-comment">// $t_ips = $ips_o;</span><br>$online = $pvs_o;<br><span class="hljs-comment">// $y_ips = 0;</span><br><span class="hljs-comment">// $y_pvs = 0;</span><br><span class="hljs-comment">// $t_ips = 0;</span><br><span class="hljs-comment">// $t_pvs = 0;</span><br><span class="hljs-comment">// $online = 0;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">"webpro统计|今日IP[&#123;$t_ips&#125;]|今日PV[&#123;$t_pvs&#125;]|昨日IP[&#123;$y_ips&#125;]|昨日PV[&#123;$y_pvs&#125;]|当前在线[&#123;$online&#125;]"</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array(ips, pvs)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal_ipandpv</span><span class="hljs-params">($datas)</span> </span>&#123;<br><span class="hljs-comment">// echo "emmm&lt;br/&gt;";</span><br><span class="hljs-comment">// print_r($datas);</span><br><span class="hljs-comment">// $ip['192.168.1.1'] = 10;</span><br>$ip = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>($datas <span class="hljs-keyword">as</span> $index =&gt; $item) &#123;<br><span class="hljs-keyword">if</span>(array_key_exists($item[<span class="hljs-string">'ip'</span>], $ip)) &#123;<br><span class="hljs-comment">// 统计过</span><br>$ip[$item[<span class="hljs-string">'ip'</span>]] += <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 没统计过</span><br>$ip[$item[<span class="hljs-string">'ip'</span>]] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 累加IP和PV</span><br>$ips = <span class="hljs-number">0</span>;<br>$pvs = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">foreach</span>($ip <span class="hljs-keyword">as</span> $keyip =&gt; $count) &#123;<br>$ips++;<br>$pvs += $count;<br>&#125;<br><span class="hljs-keyword">return</span> [$ips, $pvs];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anti_sqlin</span><span class="hljs-params">($data)</span> </span>&#123;<br>$data = str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">""</span>, $data);<br><span class="hljs-keyword">return</span> $data;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="在要统计的页面中安装"><a href="#在要统计的页面中安装" class="headerlink" title="在要统计的页面中安装"></a>在要统计的页面中安装</h1><h2 id="在合适位置添加统计代码"><a href="#在合适位置添加统计代码" class="headerlink" title="在合适位置添加统计代码"></a>在合适位置添加统计代码</h2><ul><li>在head代码处添加、或者有的网站后台管理中留有网站统计填写等合适位置，添加如下代码(xxx/xxx.js改成自己的服务器上的JS地址)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://xxx/xxx.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310164440.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310164440.png" class="lazyload" title></a></p><ul><li>然后在你需要显示统计数据的地方添加如下div标签</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"wnzz"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="插件测试"><a href="#插件测试" class="headerlink" title="插件测试"></a>插件测试</h2><ul><li>安装好后，刷新网站进行测试</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162203.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200310162203.png" class="lazyload" title></a></p><blockquote><p>安装成功！</p></blockquote><ul><li>如果要实现多网站统计，设置不同的siteid，避免siteid重复即可！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;插件效果&quot;&gt;&lt;a href=&quot;#插件效果&quot; class=&quot;headerlink&quot; title=&quot;插件效果&quot;&gt;&lt;/a&gt;插件效果&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;闲来无事写个简易网站流量统计插件:&lt;/li&gt;
&lt;li&gt;开发用到: php mysql js html&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="php" scheme="http://blog.webpro.ltd/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.webpro.ltd/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu1604在安装gcc时(build-essential)遇到依赖问题的解决办法</title>
    <link href="http://blog.webpro.ltd/2019/05/28/ubuntu1604-install-gcc-has-problem/"/>
    <id>http://blog.webpro.ltd/2019/05/28/ubuntu1604-install-gcc-has-problem/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2020-03-22T10:26:47.226Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>是apt源太旧的导致的。更换apt源就可解决。另外国外的apt源下载速度比较慢，也可以参照此教程换下apt源。</p></blockquote><h1 id="更换一下apt源"><a href="#更换一下apt源" class="headerlink" title="更换一下apt源"></a>更换一下apt源</h1><h2 id="root用户下-gt-备份一下"><a href="#root用户下-gt-备份一下" class="headerlink" title="root用户下-&gt;备份一下"></a>root用户下-&gt;备份一下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>  /etc/apt<br>cp  sources.list  sources.list.backup<br></code></pre></td></tr></table></figure></div><h2 id="编辑sources-list、显示行号-set-nu"><a href="#编辑sources-list、显示行号-set-nu" class="headerlink" title="编辑sources.list、显示行号:set nu"></a>编辑sources.list、显示行号<code>:set nu</code></h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim  sources.list<br></code></pre></td></tr></table></figure></div><h2 id="vim删除指定定行数：假设文件一共15行，删除所有文本。按ESC"><a href="#vim删除指定定行数：假设文件一共15行，删除所有文本。按ESC" class="headerlink" title="vim删除指定定行数：假设文件一共15行，删除所有文本。按ESC"></a>vim删除指定定行数：假设文件一共15行，删除所有文本。按ESC</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:1,15d<br></code></pre></td></tr></table></figure></div><h2 id="打开-https-mirror-tuna-tsinghua-edu-cn-help-ubuntu-清华apt源地址，选择你的Ubuntu版本，例如我的是1604"><a href="#打开-https-mirror-tuna-tsinghua-edu-cn-help-ubuntu-清华apt源地址，选择你的Ubuntu版本，例如我的是1604" class="headerlink" title="打开 https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604"></a>打开 <a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604</a></h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><figcaption><span>sources.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 默认注释了源码镜像以提高 apt  update  速度，如有需要可自行取消注释<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-updates  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-updates  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-backports  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-backports  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-security  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-security  main  restricted  universe  multiverse<br><br># 预发布软件源，不建议启用<br><br># deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-proposed  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-proposed  main  restricted  universe  multiverse<br></code></pre></td></tr></table></figure></div><h2 id="直接复制粘贴即可，然后更新apt源"><a href="#直接复制粘贴即可，然后更新apt源" class="headerlink" title="直接复制粘贴即可，然后更新apt源"></a>直接复制粘贴即可，然后更新apt源</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br></code></pre></td></tr></table></figure></div><h1 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h1><h2 id="更新成功，然后执行如下命令安装gcc"><a href="#更新成功，然后执行如下命令安装gcc" class="headerlink" title="更新成功，然后执行如下命令安装gcc"></a>更新成功，然后执行如下命令安装gcc</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install build-essential<br></code></pre></td></tr></table></figure></div><h2 id="等一会儿，安装成功，查询gcc版本"><a href="#等一会儿，安装成功，查询gcc版本" class="headerlink" title="等一会儿，安装成功，查询gcc版本"></a>等一会儿，安装成功，查询gcc版本</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -v<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200322182206.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200322182206.png" class="lazyload" title></a></p><blockquote><p>直接看最后一行，gcc 5.5.0 安装成功。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;是apt源太旧的导致的。更换apt源就可解决。另外国外的apt源下载速度比较慢，也可以参照此教程换下apt源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;更换一下apt源&quot;&gt;&lt;a href=&quot;#更换一下apt源&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/categories/linux/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://blog.webpro.ltd/tags/Ubuntu16-04/"/>
    
  </entry>
  
  <entry>
    <title>OrangePi Zero嵌入式板搭建微服务网关[Ubuntu_Server1504+JDK1.8]</title>
    <link href="http://blog.webpro.ltd/2019/05/26/OrangePi-Zero-run-springboot/"/>
    <id>http://blog.webpro.ltd/2019/05/26/OrangePi-Zero-run-springboot/</id>
    <published>2019-05-25T16:00:00.000Z</published>
    <updated>2020-03-22T10:33:27.362Z</updated>
    
    <content type="html"><![CDATA[<!-- https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195907.png --><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="配件清单"><a href="#配件清单" class="headerlink" title="配件清单"></a>配件清单</h2><h3 id="必选清单"><a href="#必选清单" class="headerlink" title="必选清单"></a>必选清单</h3><table><thead><tr><th align="left">名称</th><th align="left">配置</th></tr></thead><tbody><tr><td align="left">OragePi Zero主板</td><td align="left">4核ARM CPU + 512M DDR3(与显存共享)，带1个板载WiFi(及天线)、1个USB2.0接口、1个标准网线插口、TF卡槽、OTG电源口、兼容树莓派的GPIO接口等等</td></tr><tr><td align="left">OragePi Zero扩展版</td><td align="left">扩展了2个USB2.0，1个红外线信号接收器、1个AV显示器信号模拟输出</td></tr><tr><td align="left">orangepi zero</td><td align="left">黑色壳可装下开发板和扩展板    若板子上电启动正常，各个接口输出正常，就可把板子安装在壳子中，保护其零件。(谨慎安装，安装好后板子基本上就拆卸不出来了)</td></tr><tr><td align="left">0.2毫米移动石墨散热片</td><td align="left">裁剪贴在CPU和DDR上，裁剪剩下的可以贴在主板的背面</td></tr><tr><td align="left">32GB TF卡 Class10</td><td align="left">32GB性价比较高，Class10级及以上速度，稍后系统将烧录在内，需要读卡器</td></tr><tr><td align="left">5V2A电源、OTG充电线</td><td align="left">给开发板供电</td></tr><tr><td align="left">操作环境</td><td align="left">win10 + Ubuntu(主要用于ssh) + 局域网(路由器等内网环境)</td></tr></tbody></table><h3 id="可选清单"><a href="#可选清单" class="headerlink" title="可选清单"></a>可选清单</h3><table><thead><tr><th align="left">名称</th><th align="left">配置</th></tr></thead><tbody><tr><td align="left">鼠标</td><td align="left">USB串口</td></tr><tr><td align="left">键盘</td><td align="left">USB串口</td></tr><tr><td align="left">AV转HDMI</td><td align="left">可将板子输出的信号直接插在支持HDMI的显示器上</td></tr><tr><td align="left">AV线</td><td align="left">可将板子输出AV信号直接插在支持AV的显示器上</td></tr></tbody></table><h2 id="软件及镜像准备"><a href="#软件及镜像准备" class="headerlink" title="软件及镜像准备"></a>软件及镜像准备</h2><table><thead><tr><th align="left">名称</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">SDFormatter</td><td align="left">TF卡格式化<br><a href="https://pan.baidu.com/s/1uezMmj4rY4sMo3dZD_JMNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1uezMmj4rY4sMo3dZD_JMNA</a><br>提取码：jufm</td></tr><tr><td align="left">Win32DiskImager</td><td align="left">镜像烧录软件<br><a href="https://pan.baidu.com/s/1net3qS-tmrhKnAimyat0iA" target="_blank" rel="noopener">https://pan.baidu.com/s/1net3qS-tmrhKnAimyat0iA</a><br>提取码：u4lg</td></tr><tr><td align="left">ubuntu_server.img</td><td align="left">系统镜像MD5<br> 474f0b497dafd9368a7d3cfe7961ea16<br><a href="https://pan.baidu.com/s/1l3FEdj9UJvFi5GSwUrUvlQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1l3FEdj9UJvFi5GSwUrUvlQ</a><br>提取码：nnap</td></tr><tr><td align="left">jdk-8u211-linux-arm32-vfp-hflt.tar.gz</td><td align="left">JDK8从Oracle官网下载即可</td></tr></tbody></table><h1 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h1><ol><li>将TF卡插在读卡器上，插入电脑。</li></ol><ul><li>打开SDFormatter，选择参数后，格式化TF卡。</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184342.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184342.png" class="lazyload" title></a></p><ol start="2"><li>打开Win32DiskImager，选择镜像地址，选择Device（TF卡的盘符），选择成功后，Write按钮处于可点击状态，点击Write按钮进行烧录</li></ol><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184405.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184405.png" class="lazyload" title></a></p><ol start="3"><li>提示烧录成功后，win10系统会提示TF卡格式错误，忽略提示（烧录后的TF卡格式win10系统不支持），直接拔掉TF卡即可。</li></ol><h1 id="启动开发板"><a href="#启动开发板" class="headerlink" title="启动开发板"></a>启动开发板</h1><ol><li><p>将TF卡插到开发板的TF卡槽中，插入网线，接通电源（5V2A），系统会自动开机，等待2分钟。</p></li><li><p>从路由器管理页面查新设备的IP地址，我查到我的设备IP地址为 192.168.31.73 ，注意这是内网地址，外网不能直接访问</p></li></ol><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184520.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184520.png" class="lazyload" title></a></p><ol start="3"><li><p>打开Ubuntu命令行，输入指令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@192.168.31.73<br></code></pre></td></tr></table></figure></div><ul><li>远程连接（该系统已经集成了ssh，新镜像开机即可使用ssh）</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184625.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184625.png" class="lazyload" title></a></p><ul><li><p>默认密码为 orangepi</p></li><li><p>登陆上去后输入指令</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure></div><ul><li>更改当前账户密码</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184717.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309184717.png" class="lazyload" title></a></p><ul><li>成功登陆到Ubuntu_Server，首次登陆会提示 需要执行 sudo fs_resize 命令，重划空间分配</li></ul></li></ol><h1 id="配置JDK1-8环境"><a href="#配置JDK1-8环境" class="headerlink" title="配置JDK1.8环境"></a>配置JDK1.8环境</h1><ul><li><p>从官网下载 jdk-8u211-linux-arm32-vfp-hflt.tar.gz</p></li><li><p>具体安装方法详见<a href="/2019/02/17/WSL-Install/#配置JDK环境">WSL,Ubuntu16.04配置JDK1.8</a> (注意两者下载的JDK包不同)</p></li></ul><h1 id="运行第一个jar包"><a href="#运行第一个jar包" class="headerlink" title="运行第一个jar包"></a>运行第一个jar包</h1><ol><li>我使用spingboot写了一个简单的HelloWorld程序:</li></ol><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195156.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195156.png" class="lazyload" title></a></p><ul><li>执行 mvn install 将项目打包成jar包</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195221.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195221.png" class="lazyload" title></a></p><ul><li>smarthome1-0.0.1-SNAPSHOT.jar</li></ul><ol start="2"><li>我在/usr目录下新建me文件夹，将我的项目都上传到此</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /usr/me<br><span class="hljs-built_in">cd</span> /usr/me<br></code></pre></td></tr></table></figure></div><ul><li>将smarthome1-0.0.1-SNAPSHOT.jar上传到该文件夹中即可</li></ul><ol start="3"><li>运行jar包</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar smarthome1-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure></div><ul><li>jar包启动成功，如下所示:</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195341.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195341.png" class="lazyload" title></a></p><ol start="4"><li>访问测试，访问:</li></ol><p><code>http://192.168.31.73:8080/hello</code></p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195408.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195408.png" class="lazyload" title></a></p><blockquote><p>访问成功！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309195907.png --&gt;

&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="OrangePi" scheme="http://blog.webpro.ltd/categories/OrangePi/"/>
    
    
      <category term="OrangePi" scheme="http://blog.webpro.ltd/tags/OrangePi/"/>
    
  </entry>
  
  <entry>
    <title>springboot快速入门</title>
    <link href="http://blog.webpro.ltd/2019/02/21/springboot-fast-study/"/>
    <id>http://blog.webpro.ltd/2019/02/21/springboot-fast-study/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2020-03-10T03:00:32.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot介绍"><a href="#SpringBoot介绍" class="headerlink" title="SpringBoot介绍"></a>SpringBoot介绍</h1><ul><li><h2 id="SpringBoot特性"><a href="#SpringBoot特性" class="headerlink" title="SpringBoot特性"></a>SpringBoot特性</h2><ul><li>创建独立的Spring应用程序</li><li>嵌入的Tomcat，无需部署war文件</li><li>简化maven配置</li><li>自动配置Spring</li><li>提供生产就绪型功能，如指标、健康、检查和外部配置</li><li>开箱即用没有代码生成，也无需配置XML文件</li></ul></li><li><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ul><li>环境Windows10 - JDK1.8</li><li>开发工具IDEA</li><li>项目管理工具maven(3.6.0)</li></ul></li><li><h2 id="开发准备-1"><a href="#开发准备-1" class="headerlink" title="开发准备"></a>开发准备</h2><ul><li>环境JDK1.8</li><li>开发工具IDEA</li><li>项目管理工具maven(3.6.0)</li></ul></li></ul><h1 id="HelloWorld创建"><a href="#HelloWorld创建" class="headerlink" title="HelloWorld创建"></a>HelloWorld创建</h1><ol><li>通过 file –&gt; new –&gt; project 打开new project窗口</li><li>创建 Spring Initializr，next，next，选择 web –&gt; web组件，完成项目创建</li><li>等待 项目从 maven 库更新</li><li>新建 Controller 类，写入如下代码</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">* HelloWorld创建</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello world"</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ol start="5"><li>启动 主程序</li></ol><p>出现形如下面图片则启动成功</p><p>访问 <a href="http://127.0.0.1:8080/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/hello</a></p><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309180359.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309180359.png" class="lazyload" title></a></p><ol start="6"><li>步骤总结</li></ol><ul><li>a. 新建Controller</li><li>b. 编写springboot启动类（IDEA）自动创建</li><li>c. 访问</li></ul><p>说明: 下面两种写法等价</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br></code></pre></td></tr></table></figure></div><h1 id="启动springboot项目"><a href="#启动springboot项目" class="headerlink" title="启动springboot项目"></a>启动springboot项目</h1><h2 id="启动springboot项目的方式"><a href="#启动springboot项目的方式" class="headerlink" title="启动springboot项目的方式"></a>启动springboot项目的方式</h2><ol><li>直接在IDEA中启动</li><li>在cmd中输入如下命令启动<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn spring-boot:run<br></code></pre></td></tr></table></figure></div></li><li>在cmd中输入如下命令启动<ul><li>win下运行方法（阻塞）<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn install<br><span class="hljs-built_in">cd</span> target<br>java -jar package-name.jar<br></code></pre></td></tr></table></figure></div></li><li>linux下dev/test运行方法（阻塞）<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar package-name.jar<br></code></pre></td></tr></table></figure></div></li><li>linux下prod(生产环境)运行方法<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nohup java -jar package-name.jar &amp;<br></code></pre></td></tr></table></figure></div></li></ul></li></ol><h1 id="RESTful-API规范"><a href="#RESTful-API规范" class="headerlink" title="RESTful API规范"></a>RESTful API规范</h1><table><thead><tr><th align="left">方法</th><th align="left">路由</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">/girls</td><td align="left">获取列表</td></tr><tr><td align="left">POST</td><td align="left">/girls</td><td align="left">创建女生</td></tr><tr><td align="left">GET</td><td align="left">/girls/{id}</td><td align="left">通过id查询</td></tr><tr><td align="left">GET</td><td align="left">/girls/age/{age}</td><td align="left">通过年龄查询</td></tr><tr><td align="left">PUT</td><td align="left">/girls/{id}</td><td align="left">通过id更新</td></tr><tr><td align="left">DELETE</td><td align="left">/girls/{id}</td><td align="left">通过id删除</td></tr></tbody></table><h1 id="spring-boot-starter-data-jpa"><a href="#spring-boot-starter-data-jpa" class="headerlink" title="spring-boot-starter-data-jpa"></a>spring-boot-starter-data-jpa</h1><ol><li>添加依赖（这里用MySQL数据库演示）、查看pom.xml版本</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>对于pom.xml，设置其版本，我的版本1.5.7</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>（不超过2.0即可，2.0以后版本jpa语法略有不同）</li></ul><ol start="2"><li>配置 application.properties / application.yml</li></ol><ul><li>application.properties</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/studyjpa?charset=utf8mb4&amp;serverTimezone=PRC</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.jpa.hibernate.ddl-auto</span>=<span class="hljs-string">update</span><br><span class="hljs-meta">spring.jpa.show-sql</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></div><ul><li>application.yml（建议使用YML，比较简洁）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/studyjpa?charset=utf8mb4&amp;serverTimezone=PRC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></div><ol start="3"><li>创建 Girl 类，映射到MySQL数据库的实体</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> javax.persistence.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span>(name = <span class="hljs-string">"Girl"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girl</span> </span>&#123;<br><br>  <span class="hljs-meta">@Id</span><br>  <span class="hljs-meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<br>  <span class="hljs-keyword">private</span> Integer id;<br><br>  <span class="hljs-keyword">private</span> String cupSize;<br><br>  <span class="hljs-keyword">private</span> Integer age;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> id;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.id = id;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCupSize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> cupSize;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCupSize</span><span class="hljs-params">(String cupSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.cupSize = cupSize;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>说明:<ul><li><code>javax.persistence.*</code>:必须引入的包</li><li><code>@Entity</code>:表示该类实体与MySQL数据表对应</li><li><code>@Table(name = &quot;Girl&quot;)</code>:指定表名，不指定则使用类名作为表名</li><li><code>@GeneratedValue</code> 或 <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>:    该类型（通常指Integer）为自增型</li></ul></li></ul><ol start="4"><li>启动项目，在数据库中会新建出一个表，则运行成功</li></ol><h1 id="JPA对数据库增删改查"><a href="#JPA对数据库增删改查" class="headerlink" title="JPA对数据库增删改查"></a>JPA对数据库增删改查</h1><h2 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h2><h3 id="新建-GirlRespository-类-继承-JpaRepository"><a href="#新建-GirlRespository-类-继承-JpaRepository" class="headerlink" title="新建 GirlRespository 类 继承 JpaRepository"></a>新建 GirlRespository 类 继承 JpaRepository</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GirlRespository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="新建-GirlController类-引入-GirlRespository-实体"><a href="#新建-GirlController类-引入-GirlRespository-实体" class="headerlink" title="新建 GirlController类 引入 GirlRespository 实体"></a>新建 GirlController类 引入 GirlRespository 实体</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GirlController</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> GirlRespository girlRespository;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="符合-RESTful-API规范-的增删改查-GirlController类"><a href="#符合-RESTful-API规范-的增删改查-GirlController类" class="headerlink" title="符合 RESTful API规范 的增删改查(GirlController类)"></a>符合 RESTful API规范 的增删改查(GirlController类)</h2><h3 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h3><ul><li>GET</li><li>127.0.0.1:8080/girls</li><li>return List<girl></girl></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有列表</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Girl&gt; <span class="hljs-title">girlList</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findAll();<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="新增一条记录"><a href="#新增一条记录" class="headerlink" title="新增一条记录"></a>新增一条记录</h3><ul><li>POST</li><li>127.0.0.1:8080/girls</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 新增一个女生</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/girls"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlAdd</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"cupSize"</span>)</span> String cupSize,@<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setCupSize(cupSize);<br>  girl.setAge(age);<br>  <span class="hljs-keyword">return</span> girlRespository.save(girl);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-查询一条记录"><a href="#通过-id-查询一条记录" class="headerlink" title="通过 id 查询一条记录"></a>通过 id 查询一条记录</h3><ul><li>GET</li><li>127.0.0.1:8080/girls/{id}</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过 id查询一个女生</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlFindOne</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findOne(id);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-更新一条记录"><a href="#通过-id-更新一条记录" class="headerlink" title="通过 id 更新一条记录"></a>通过 id 更新一条记录</h3><ul><li>PUT</li><li>127.0.0.1:8080/girls/{id}</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 更新</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PutMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlUpdate</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id,</span><br><span class="hljs-function">    @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"cupSize"</span>)</span> String cupSize,</span><br><span class="hljs-function">    @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setId(id);<br>  girl.setCupSize(cupSize);<br>  girl.setAge(age);<br>  <span class="hljs-keyword">return</span> girlRespository.save(girl);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-删除一条记录"><a href="#通过-id-删除一条记录" class="headerlink" title="通过 id 删除一条记录"></a>通过 id 删除一条记录</h3><ul><li>DELETE</li><li>127.0.0.1:8080/girls/{id}</li><li>no return</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DeleteMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">girlDelete</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setId(id);<br>  girlRespository.delete(id);<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="通过指定字段（age）查询列表"><a href="#通过指定字段（age）查询列表" class="headerlink" title="通过指定字段（age）查询列表"></a>通过指定字段（age）查询列表</h2><ul><li>GET</li><li>127.0.0.1:8080/girls/age/{age}</li><li>return List<girl></girl></li></ul><h3 id="在-GirlRespository-类中增加如下"><a href="#在-GirlRespository-类中增加如下" class="headerlink" title="在 GirlRespository 类中增加如下"></a>在 GirlRespository 类中增加如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过年龄查询</span><br><span class="hljs-function">List <span class="hljs-title">findByAge</span><span class="hljs-params">(Integer age)</span></span>;<br></code></pre></td></tr></table></figure></div><h3 id="在-GirlController-中编写如下"><a href="#在-GirlController-中编写如下" class="headerlink" title="在 GirlController 中编写如下"></a>在 GirlController 中编写如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过年龄查询</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls/age/&#123;age&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">girlFindByAge</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findByAge(age);<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="JPA事务管理（数据回滚）"><a href="#JPA事务管理（数据回滚）" class="headerlink" title="JPA事务管理（数据回滚）"></a>JPA事务管理（数据回滚）</h1><blockquote><p>例如当简化用户购买一件商品时，需要减少库存和用户扣款两种操作，可能出现如下情况</p></blockquote><table><thead><tr><th align="left">减少库存</th><th align="left">用户扣款</th><th align="left">是否成功</th><th align="left">应采取的操作</th></tr></thead><tbody><tr><td align="left">成功</td><td align="left">失败</td><td align="left">否</td><td align="left">撤回减少库存操作</td></tr><tr><td align="left">失败</td><td align="left">成功</td><td align="left">否</td><td align="left">撤回用户扣款操作</td></tr><tr><td align="left">失败</td><td align="left">失败</td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left">成功</td><td align="left">成功</td><td align="left">是</td><td align="left">无</td></tr></tbody></table><ul><li>我们希望当操作失败时，对另外一个已经成功的操作进行撤回，即事物回滚操作</li><li>首先需要查看数据库是否支持回滚操作，查看表引擎，若非InnoDB引擎，修改引擎为 InnoDB 即可</li></ul><h2 id="新建-GirlService-模拟-有两个相关联的数据库操作"><a href="#新建-GirlService-模拟-有两个相关联的数据库操作" class="headerlink" title="新建 GirlService 模拟 有两个相关联的数据库操作"></a>新建 GirlService 模拟 有两个相关联的数据库操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by suxia on 2019/2/21/021.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GirlService</span> </span>&#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlRespository girlRespository;<br><br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertTwo</span><span class="hljs-params">()</span></span>&#123;<br>    Girl girlA = <span class="hljs-keyword">new</span> Girl();<br>    girlA.setAge(<span class="hljs-number">18</span>);<br>    girlA.setCupSize(<span class="hljs-string">"A"</span>);<br>    girlRespository.save(girlA);<br><br>    Girl girlB = <span class="hljs-keyword">new</span> Girl();<br>    girlB.setAge(<span class="hljs-number">19</span>);<br>    girlB.setCupSize(<span class="hljs-string">"BBBB"</span>);<br>    girlRespository.save(girlB);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p><code>@Transactional</code>事务管理声明</p><h2 id="编写-测试-控制器-GirlController类"><a href="#编写-测试-控制器-GirlController类" class="headerlink" title="编写 测试 控制器(GirlController类)"></a>编写 测试 控制器(GirlController类)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 同时插入两个数据，失败回滚</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/girls/two"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">girlTwo</span><span class="hljs-params">()</span></span>&#123;<br>  girlService.insertTwo();<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><ul><li>测试原理：<br>修改了 Girl 表中的 cupSize字段，令其长度为1，那么 <code>girlB.setCupSize(&quot;BBBB&quot;);</code> 语句必定会引起数据库插入失败。 如果运行后数据库出现了1条记录，那么事务回滚失败，如果没有出现记录那么数据回滚成功。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot介绍&quot;&gt;&lt;a href=&quot;#SpringBoot介绍&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot介绍&quot;&gt;&lt;/a&gt;SpringBoot介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;SpringBoot特性&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/categories/springboot/"/>
    
    
      <category term="Java" scheme="http://blog.webpro.ltd/tags/Java/"/>
    
      <category term="springboot" scheme="http://blog.webpro.ltd/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Windows10安装Linux子系统(WSL,Ubuntu16.04)并配置jdk1.8</title>
    <link href="http://blog.webpro.ltd/2019/02/17/WSL-Install/"/>
    <id>http://blog.webpro.ltd/2019/02/17/WSL-Install/</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2020-03-09T12:59:05.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Linux子系统-WSL"><a href="#什么是Linux子系统-WSL" class="headerlink" title="什么是Linux子系统(WSL)"></a>什么是Linux子系统(WSL)</h1><blockquote><p>Windows Subsystem for Linux（简称WSL）是一个为在Windows 10上能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，目标是使纯正的Ubuntu 14.04 “Trusty Tahr”映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p></blockquote><blockquote><p>在实际开发测试运行的时候，往往需要用到Linux系统部署，使用Linux指令，而自己的电脑又是win系统，安装虚拟机既麻烦又耗内存，但是在win10版本，出现了Linux子系统(WSL, Windows Subsystem for Linux)，使得Linux系统可以直接运行在win下，方便了很多。</p></blockquote><h1 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h1><h2 id="查看系统版本"><a href="#查看系统版本" class="headerlink" title="查看系统版本"></a>查看系统版本</h2><ul><li>首先查看一下操作系统版本。右击我的电脑，点击属性，如下</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309172939.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309172939.png" class="lazyload" title></a></p><ul><li>我的系统是Windows10专业版1709，早期的win版本可能安装方法不同。</li></ul><h2 id="安装子系统前需配置"><a href="#安装子系统前需配置" class="headerlink" title="安装子系统前需配置"></a>安装子系统前需配置</h2><h3 id="打开Windows控制面板-gt-启用和关闭Windows功能"><a href="#打开Windows控制面板-gt-启用和关闭Windows功能" class="headerlink" title="打开Windows控制面板-&gt;启用和关闭Windows功能"></a>打开Windows控制面板-&gt;启用和关闭Windows功能</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173155.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173155.png" class="lazyload" title></a></p><h3 id="适用于Linux的Windows子系统打勾"><a href="#适用于Linux的Windows子系统打勾" class="headerlink" title="适用于Linux的Windows子系统打勾"></a>适用于Linux的Windows子系统打勾</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173312.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173312.png" class="lazyload" title></a></p><h3 id="然后打开设置–-gt-更新和安全–-gt-针对开发人员，选择开发人员模式"><a href="#然后打开设置–-gt-更新和安全–-gt-针对开发人员，选择开发人员模式" class="headerlink" title="然后打开设置–&gt;更新和安全–&gt;针对开发人员，选择开发人员模式"></a>然后打开设置–&gt;更新和安全–&gt;针对开发人员，选择开发人员模式</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173410.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173410.png" class="lazyload" title></a></p><h2 id="安装子系统"><a href="#安装子系统" class="headerlink" title="安装子系统"></a>安装子系统</h2><h3 id="以管理员方式运行cmd（命令提示符）"><a href="#以管理员方式运行cmd（命令提示符）" class="headerlink" title="以管理员方式运行cmd（命令提示符）"></a>以管理员方式运行cmd（命令提示符）</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lxrun /install<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173624.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173624.png" class="lazyload" title></a></p><h3 id="输入y继续安装系统"><a href="#输入y继续安装系统" class="headerlink" title="输入y继续安装系统"></a>输入y继续安装系统</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173649.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173649.png" class="lazyload" title></a></p><h3 id="安装完成后输入y继续（这里停留的时间可能会比较长）"><a href="#安装完成后输入y继续（这里停留的时间可能会比较长）" class="headerlink" title="安装完成后输入y继续（这里停留的时间可能会比较长）"></a>安装完成后输入y继续（这里停留的时间可能会比较长）</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173714.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173714.png" class="lazyload" title></a></p><h3 id="完成后创建用户名和密码"><a href="#完成后创建用户名和密码" class="headerlink" title="完成后创建用户名和密码"></a>完成后创建用户名和密码</h3><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173726.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173726.png" class="lazyload" title></a><br><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173735.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309173735.png" class="lazyload" title></a></p><h3 id="在cmd中输入bash命令即可进入到win子系统"><a href="#在cmd中输入bash命令即可进入到win子系统" class="headerlink" title="在cmd中输入bash命令即可进入到win子系统"></a>在cmd中输入bash命令即可进入到win子系统</h3><ul><li>这样实现了在win命令行下运行Linux命令</li></ul><h1 id="配置JDK环境"><a href="#配置JDK环境" class="headerlink" title="配置JDK环境"></a>配置JDK环境</h1><h2 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h2><ul><li><p><a href="http://www.oracle.com/technetwork/java/javase/downloads/" target="_blank" rel="noopener">JDK官网</a></p></li><li><p>我安装的是<code>jdk-8u201-linux-x64.tar.gz</code></p></li></ul><h2 id="创建安装目录"><a href="#创建安装目录" class="headerlink" title="创建安装目录"></a>创建安装目录</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /usr/java<br></code></pre></td></tr></table></figure></div><ul><li>将下载的jdk上传到Ubuntu中</li><li>子系统在Windows系统中的物理路径<code>C:\Users\用户名\AppData\Local\lxss</code></li></ul><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar zxvf jdk-8u201-linux-x64.tar.gz -C  /usr/java<br></code></pre></td></tr></table></figure></div><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br></code></pre></td></tr></table></figure></div><ul><li>在文件的末尾添加如下</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">export JAVA_HOME=/usr/java/jdk1.<span class="hljs-number">8.0</span>_45<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br></code></pre></td></tr></table></figure></div><h2 id="令使配置生效"><a href="#令使配置生效" class="headerlink" title="令使配置生效"></a>令使配置生效</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></div><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure></div><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309175001.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309175001.png" class="lazyload" title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Linux子系统-WSL&quot;&gt;&lt;a href=&quot;#什么是Linux子系统-WSL&quot; class=&quot;headerlink&quot; title=&quot;什么是Linux子系统(WSL)&quot;&gt;&lt;/a&gt;什么是Linux子系统(WSL)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Win
      
    
    </summary>
    
    
    
      <category term="WSL" scheme="http://blog.webpro.ltd/tags/WSL/"/>
    
      <category term="Ubuntu16.04" scheme="http://blog.webpro.ltd/tags/Ubuntu16-04/"/>
    
      <category term="Windows10" scheme="http://blog.webpro.ltd/tags/Windows10/"/>
    
  </entry>
  
  <entry>
    <title>Java JDBC 操作 MySql增删改查</title>
    <link href="http://blog.webpro.ltd/2018/09/11/Java-JDBC-%E6%93%8D%E4%BD%9C-MySql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://blog.webpro.ltd/2018/09/11/Java-JDBC-%E6%93%8D%E4%BD%9C-MySql%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</id>
    <published>2018-09-10T16:00:00.000Z</published>
    <updated>2020-03-12T01:53:55.096Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工具：eclipse</p></blockquote><h1 id="导入jdbc驱动包"><a href="#导入jdbc驱动包" class="headerlink" title="导入jdbc驱动包"></a>导入jdbc驱动包</h1><table><thead><tr><th align="center">类型</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center"><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/fileTypeImages/file_zip.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img class="fileType-icon lazyload" data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/fileTypeImages/file_zip.png"></a></td><td align="center"><br><a href="/pan/JDBC.zip">JDBC.zip</a></td></tr></tbody></table><h1 id="一个数据库的简单操作流程大致分为以下几个操作"><a href="#一个数据库的简单操作流程大致分为以下几个操作" class="headerlink" title="一个数据库的简单操作流程大致分为以下几个操作"></a>一个数据库的简单操作流程大致分为以下几个操作</h1><ul><li>a. 设置数据库连接参数</li><li>b. 加载数据库驱动（捕捉错误）</li><li>c. 连接数据库（捕捉错误）</li><li>d. 构造sql语句</li><li>e. 执行sql语句（捕捉错误）</li><li>f. 获取记录集结果</li><li>g.[关闭数据库连接]（java有cc机制不需要手动关闭）</li></ul><h1 id="下面进行代码演示"><a href="#下面进行代码演示" class="headerlink" title="下面进行代码演示"></a>下面进行代码演示</h1><ul><li>演示数据库简要说明</li></ul><table><thead><tr><th align="left">名称</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">数据库名</td><td align="left">rtbook</td></tr><tr><td align="left">表名</td><td align="left">rtb_member</td></tr><tr><td align="left">包含字段1</td><td align="left">userid</td></tr><tr><td align="left">包含字段2</td><td align="left">phone</td></tr><tr><td align="left">包含字段3</td><td align="left">activeTime</td></tr></tbody></table><h2 id="main方法"><a href="#main方法" class="headerlink" title="main方法"></a>main方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> my;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br><br>  <span class="hljs-comment">// 参数配置</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dbName    =   <span class="hljs-string">"rtbook"</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL       =   <span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/"</span> + dbName + <span class="hljs-string">"?useUnicode=true&amp;characterEncoding=UTF-8"</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String className =   <span class="hljs-string">"com.mysql.jdbc.Driver"</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String user      =   <span class="hljs-string">"root"</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String password  =   <span class="hljs-string">"root"</span>;<br>  <span class="hljs-comment">// 数据库句柄</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection conn;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 测试顺序</span><br><span class="hljs-comment"> * 查询</span><br><span class="hljs-comment"> * 插入</span><br><span class="hljs-comment"> * 修改</span><br><span class="hljs-comment"> * 删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 为了检验每次的执行效果，执行SQL语句完毕后都会输出表的数据视图</span><br><br><span class="hljs-comment">// 连接数据库</span><br>jdbcConnect();<br><span class="hljs-comment">// 测试查询</span><br><span class="hljs-comment">// testSelect();</span><br><span class="hljs-comment">// 测试插入</span><br><span class="hljs-comment">// testInsert();</span><br><span class="hljs-comment">// 测试修改</span><br><span class="hljs-comment">// testUpdate();</span><br><span class="hljs-comment">// 测试删除</span><br><span class="hljs-comment">// testDelete();</span><br>System.out.println(<span class="hljs-string">"done"</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p><code>其中下面这段GET参数，用来设置连接编码为utf-8</code></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>url</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">useUnicode=<span class="hljs-literal">true</span><br>characterEncoding=UTF-8<br>// 如果是高一点版本的MySQL，还要设置useSSL参数，不设置会报错<br>useSSL=<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></div><h2 id="数据库连接操作"><a href="#数据库连接操作" class="headerlink" title="数据库连接操作"></a>数据库连接操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">jdbcConnect</span><span class="hljs-params">()</span> </span>&#123;     <br>  <span class="hljs-comment">// 加载JDBC驱动</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    Class.forName(className);<br>    System.out.println(<span class="hljs-string">"JDBC Load SUCCESS"</span>);<br>  &#125;<span class="hljs-keyword">catch</span>(ClassNotFoundException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(<span class="hljs-string">"JDBC Load error!"</span> + e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-comment">// 连接至数据库</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    conn = DriverManager.getConnection(URL, user, password);<br>    System.out.println(dbName + <span class="hljs-string">"opened SUCCESS"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(dbName + <span class="hljs-string">"opened error!"</span> + e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 构造SQL语句</span><br>    sql = conn.prepareStatement(<span class="hljs-string">"SELECT * FROM `rtb_member` WHERE `userid` &gt; 1"</span>);<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    res = sql.executeQuery();<br>    <span class="hljs-comment">// 输出表头</span><br>    System.out.println( <span class="hljs-string">"编号"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"手机"</span> + <span class="hljs-string">"\t"</span> + <span class="hljs-string">"注册时间"</span> );<br>    <span class="hljs-comment">// 遍历结果集</span><br>    <span class="hljs-keyword">while</span>(res.next()) &#123;<br>      String userid = res.getString(<span class="hljs-string">"userid"</span>);<br>      String phone = res.getString(<span class="hljs-string">"phone"</span>);<br>      String activeTime = res.getString(<span class="hljs-string">"activeTime"</span>);<br>      System.out.println(userid + <span class="hljs-string">"\t"</span> + phone + <span class="hljs-string">"\t"</span> + activeTime);<br>    &#125;<br>  &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(<span class="hljs-string">"select execute error, err_msg:"</span> + e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>运行结果</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165006.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165006.png" class="lazyload" title></a></p><h2 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 获取注册时间</span><br>    Date day = <span class="hljs-keyword">new</span> Date();<br>    SimpleDateFormat df = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>);<br>    String nowTime = df.format(day);<br>    <span class="hljs-comment">// 构造SQL模板</span><br>    sql = conn.prepareStatement(<span class="hljs-string">"INSERT INTO `rtb_member` (`phone`, `activeTime`) VALUES (? ,?)"</span>);<br>    <span class="hljs-comment">// 填充模板</span><br>    sql.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"123456"</span>);<br>    sql.setString(<span class="hljs-number">2</span>, nowTime);<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    sql.executeUpdate();<br>    System.out.println(<span class="hljs-string">"insert execute SUCCESS"</span>);<br>  &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(<span class="hljs-string">"insert execute error, err_msg:"</span> + e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>运行结果</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165141.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165141.png" class="lazyload" title></a></p><h2 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 构造SQL模板</span><br>    sql = conn.prepareStatement(<span class="hljs-string">"UPDATE `rtb_member` SET `phone`=? WHERE `phone`=?"</span>);<br>    <span class="hljs-comment">// 填充SQL模板</span><br>    sql.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"654321"</span>);<br>    sql.setString(<span class="hljs-number">2</span>, <span class="hljs-string">"123456"</span>);<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    sql.executeUpdate();<br>    System.out.println(<span class="hljs-string">"update execute SUCCESS"</span>);<br>  &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(<span class="hljs-string">"update execute error, err_msg:"</span> + e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>运行结果</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165438.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165438.png" class="lazyload" title></a></p><h2 id="数据删除"><a href="#数据删除" class="headerlink" title="数据删除"></a>数据删除</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelete</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 构造SQL模板</span><br>    sql = conn.prepareStatement(<span class="hljs-string">"DELETE FROM `rtb_member` WHERE `phone`=?"</span>);<br>    <span class="hljs-comment">// 填充SQL模板</span><br>    sql.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"654321"</span>);<br>    <span class="hljs-comment">// 执行SQL语句</span><br>    sql.executeUpdate();<br>    System.out.println(<span class="hljs-string">"delete execute SUCCESS"</span>);<br>  &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>    <span class="hljs-comment">// 捕捉到错误</span><br>    System.out.println(<span class="hljs-string">"delete execute error, err_msg:"</span> + e);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>运行结果</li></ul><p><a href="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165535.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://cdn.jsdelivr.net/gh/billwhite246/myPicBedRepo@master/img/20200309165535.png" class="lazyload" title></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工具：eclipse&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;导入jdbc驱动包&quot;&gt;&lt;a href=&quot;#导入jdbc驱动包&quot; class=&quot;headerlink&quot; title=&quot;导入jdbc驱动包&quot;&gt;&lt;/a&gt;导入jdbc驱动包&lt;/h1&gt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.webpro.ltd/tags/Java/"/>
    
  </entry>
  
</feed>
