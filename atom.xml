<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bill&#39;s blog</title>
  
  <subtitle>coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.webpro.ltd/"/>
  <updated>2021-07-19T23:20:03.895Z</updated>
  <id>http://blog.webpro.ltd/</id>
  
  <author>
    <name>Bill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL Replication 主从同步</title>
    <link href="http://blog.webpro.ltd/2021/07/19/mysql-master-slave/"/>
    <id>http://blog.webpro.ltd/2021/07/19/mysql-master-slave/</id>
    <published>2021-07-19T08:35:19.000Z</published>
    <updated>2021-07-19T23:20:03.895Z</updated>
    
    <content type="html"><![CDATA[<!-- - 首先在主库增加只读权限的账户（肯定不能用 root 账户），- master-readonly- master-readonly-123456- GRANT SELECT ON dbname.\* TO 'master-readonly'@'%' IDENTIFIED BY "master-readonly-123456"; --><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li><input checked disabled type="checkbox"> 实现一主两从</li></ul><h1 id="主从同步概论"><a href="#主从同步概论" class="headerlink" title="主从同步概论"></a>主从同步概论</h1><h2 id="主从同步的定义"><a href="#主从同步的定义" class="headerlink" title="主从同步的定义"></a>主从同步的定义</h2><p>主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器(master), 其余的服务器充当从服务器(slave)。通过配置文件，可以指定复制所有的数据库/某个数据库/某个数据库的某个表。</p><p>使用主从同步的好处:</p><ul><li>通过增加从服务器来提高数据库服务的性能，在主服务器上执行写入和更新，在从服务器上执行查询(需配置读写分离)。在小型项目中，查询操作的次数要远大于写入和更新的次数，因此可以动态调整从服务器的数量，从而调节整个数据库服务的性能。</li><li>提高数据安全性。在从服务器上执行<code>start slave;</code>命令开始同步数据，执行<code>stop slave;</code>命令结束同步，在从服务器上能够控制同步的开始和结束。</li><li>虽然不能保持主从数据的绝对实时同步，但是在一定程度上也起到了容灾备份作用。</li></ul><h2 id="主从同步的机制"><a href="#主从同步的机制" class="headerlink" title="主从同步的机制"></a>主从同步的机制</h2><p><a href="https://img.webpro.ltd/picbed/img/20210719220525.png" data-fancybox="group" data-caption="图片来源51CTO博主阿泽Aze" class="fancybox"><img alt="图片来源51CTO博主阿泽Aze" title="图片来源51CTO博主阿泽Aze" data-src="https://img.webpro.ltd/picbed/img/20210719220525.png" class="lazyload"></a></p><ul><li>主从同步是 MySQL 的一个内置功能，我们只需要配置即可。</li><li>MySQL 服务器之间进行主从同步是基于二进制日志机制，主服务器使用二进制日志记录数据库变动情况，从服务器通过读取该日志和转化为 SQL 语句执行从而保证与主服务器数据的一致性。</li><li>在使用二进制日志时，主服务器的所有操作记录都会被记录下来，从服务器会受到操作记录日志的副本。从服务器可以指定执行该日志中的哪一类事件（譬如只插入数据或者只更新数据），默认会执行日志中的所有语句。</li><li>每一个从服务器会记录关于二进制日志的信息：文件名和已经处理过的语句，这样意味着不同的从服务器可以分别执行同一个二进制日志的不同部分，并且从服务器可以随时连接或者中断和服务器的连接。</li><li>主服务器和每一个从服务器都必须配置一个唯一的 ID 号（在 my.cnf 文件的[mysqld]模块下有一个 server-id 配置项）。</li><li>每一个从服务器还需要通过 CHANGE MASTER TO 语句来配置它要连接的主服务器的 ip 地址，日志文件名称和该日志里面的位置（这些信息存储在主服务器的数据库里）。</li></ul><h2 id="MySQL-Replication-实现原理"><a href="#MySQL-Replication-实现原理" class="headerlink" title="MySQL Replication 实现原理"></a>MySQL Replication 实现原理</h2><p>MySQL 的复制（replication）是一个异步的复制，从一个 MySQLinstace（称之为 Master）复制到另一个 MySQLinstance（称之 Slave）。整个复制操作主要由三个进程完成的，其中两个进程在 Slave（Sql 进程和 IO 进程），另外一个进程在 Master（IO 进程）上。</p><p>要实施复制，首先必须打开 Master 端的 binarylog（bin-log）功能，否则无法实现。因为整个复制过程实际上就是 Slave 从 Master 端获取该日志然后再在自己身上完全顺序的执行日志中所记录的各种操作。复制的基本过程如下：</p><ul><li>（1）Slave 上面的 IO 进程连接上 Master，并请求从指定日志文件的指定位置（或者从最开始的日志）之后的日志内容；</li><li>（2）Master 接收到来自 Slave 的 IO 进程的请求后，通过负责复制的 IO 进程根据请求信息读取指定日志指定位置之后的日志信息，返回给 Slave 的 IO 进程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息已经到 Master 端的 bin-log 文件的名称以及 bin-log 的位置；</li><li>（3）Slave 的 IO 进程接收到信息后，将接收到的日志内容依次添加到 Slave 端的 relay-log 文件的最末端，并将读取到的 Master 端的 bin-log 的文件名和位置记录到 master-info 文件中，以便在下一次读取的时候能够清楚的告诉 Master“我需要从某个 bin-log 的某个位置开始往后的日志内容，请发给我”；</li><li>（4）Slave 的 Sql 进程检测到 relay-log 中新增加了内容后，会马上解析 relay-log 的内容成为在 Master 端真实执行时候的那些可执行的内容，并在自身执行。</li></ul><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><ul><li><code>Win10 VMware Workstation11</code></li><li><code>虚拟机: CentOS Linux release 7.9.2009 (Core) x 3</code></li><li><code>MySQL 5.7.34</code></li><li><code>主从服务的server-id使用IP地址的最后一段编号，方便维护</code></li></ul><table><thead><tr><th>主机名</th><th>IP 地址</th><th>主/从服务器</th><th>mysql server-id</th></tr></thead><tbody><tr><td>server1</td><td>192.168.18.128</td><td>master</td><td>128</td></tr><tr><td>server2</td><td>192.168.18.129</td><td>slave</td><td>129</td></tr><tr><td>server3</td><td>192.168.18.130</td><td>slave</td><td>130</td></tr></tbody></table><p><a href="https://img.webpro.ltd/picbed/img/20210719231847.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231847.png" class="lazyload"></a></p><ul><li>为了实验方便，我们往往会新建一台虚拟机，装好 centos7 和 MySQL，配置 MySQL 相关参数，然后复制该虚拟机若干份。此时我们应该注意修改 MySQL 的 server-uuid，server-uuid 需要全局唯一。附页有关于 server-uuid 的修改方法。</li><li>在生产环境往往需要配置静态 IP，需要每一台虚拟机单独配置，不能配置好一台复制若干份，否则会造成开机后 IP 地址冲突。这里使用 VMware 虚拟机实验，网络 IP 自动分配且不发生变化，因此无需配置静态 IP。</li></ul><h1 id="主库-192-169-18-128-的配置"><a href="#主库-192-169-18-128-的配置" class="headerlink" title="主库(192.169.18.128)的配置"></a>主库(192.169.18.128)的配置</h1><blockquote><p>在主服务器上建立帐户并授权 slave，一般不用 root 账户，不安全。<br>账户为 rep1，密码为 rep1-123456，授权的 IP 为实验环境下的两台从服务器，指定可以连接的服务器比较安全。</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">'rep1'</span>@<span class="hljs-string">'192.168.18.129'</span> IDENTIFIED BY <span class="hljs-string">'rep1-123456'</span>;<br>GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">'rep1'</span>@<span class="hljs-string">'192.168.18.130'</span> IDENTIFIED BY <span class="hljs-string">'rep1-123456'</span>;<br>FLUSH PRIVILEGES; <span class="hljs-comment"># 刷新MySQL的系统权限相关表</span><br></code></pre></td></tr></table></figure></div><p>或<br></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">GRANT REPLICATION SLAVE ON *.* TO <span class="hljs-string">'rep1'</span>@<span class="hljs-string">'192.168.18.%'</span> IDENTIFIED BY <span class="hljs-string">'rep1-123456'</span>;<br>FLUSH PRIVILEGES; <span class="hljs-comment"># 刷新MySQL的系统权限相关表</span><br></code></pre></td></tr></table></figure></div><blockquote><p>配置 MySQL 主服务的配置文件</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/my.cnf<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">server-id=<span class="hljs-number">128</span> # master服务器ID-用服务器的IP地址最后一段<br><span class="hljs-built_in">log</span>-bin=/var/lib/mysql/binlog # 需要有MySQL的写入权限<br>binlog-<span class="hljs-keyword">do</span>-db=testsync # 同步的数据库名<br>:<span class="hljs-keyword">wq</span><br></code></pre></td></tr></table></figure></div><ul><li>binlog-do-db=需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可</li></ul><blockquote><p>重启 MySQL 主服务</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service mysqld restart<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]<span class="hljs-comment"># mysql -uroot -p</span><br>mysql&gt; show master status;<br>+---------------+----------+--------------+------------------+-------------------+<br>| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |<br>+---------------+----------+--------------+------------------+-------------------+<br>| binlog.000002 |   207797 | testsync     |                  |                   |<br>+---------------+----------+--------------+------------------+-------------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20210719224921.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719224921.png" class="lazyload"></a></p><h1 id="从库-192-169-18-的配置"><a href="#从库-192-169-18-的配置" class="headerlink" title="从库(192.169.18.%)的配置"></a>从库(192.169.18.%)的配置</h1><blockquote><p>从服务器的配置方式均相同，配置两次即可</p></blockquote><ul><li><input checked disabled type="checkbox"> 192.169.18.129</li><li><input checked disabled type="checkbox"> 192.169.18.129</li></ul><blockquote><p>配置 MySQL 从服务的配置文件</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/my.cnf<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vim</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">server-id=<span class="hljs-number">129</span> # 服务器ID-用服务器的IP地址最后一段<br>replicate-<span class="hljs-keyword">do</span>-db=testsync # 同步testsync数据库<br>:<span class="hljs-keyword">wq</span><br></code></pre></td></tr></table></figure></div><ul><li>replicate-do-db=需要复制的数据库名，如果复制多个数据库，重复设置这个选项即可</li></ul><blockquote><p>重启 MySQL 从服务</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart mysqld.service<br></code></pre></td></tr></table></figure></div><blockquote><p>配置连接主服务的参数</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@192 ~]<span class="hljs-comment"># mysql -uroot -p</span><br>mysql&gt;<br>CHANGE MASTER TO MASTER_HOST=<span class="hljs-string">'192.168.18.128'</span>,<br>MASTER_PORT=3306,<br>MASTER_USER=<span class="hljs-string">'rep1'</span>,<br>MASTER_PASSWORD=<span class="hljs-string">'rep1-123456'</span>,<br>MASTER_LOG_FILE=<span class="hljs-string">'binlog.000002'</span>,<br>MASTER_LOG_POS=207797;<br></code></pre></td></tr></table></figure></div><blockquote><p>启动并查看 slave 服务状态</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; start slave; <span class="hljs-comment"># 启动slave服务</span><br>mysql&gt; show slave status\G; <span class="hljs-comment"># 查看slave服务状态</span><br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20210719225428.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719225428.png" class="lazyload"></a></p><ul><li><input checked disabled type="checkbox"> Slave_IO_Running: Yes</li><li><input checked disabled type="checkbox"> Slave_SQL_Running: Yes</li></ul><blockquote><p>Slave_IO_Running、Slave_SQL_Running 均为 YES 即启动 slave 成功</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><blockquote><p>查看主库 192.168.18.128</p></blockquote><p><a href="https://img.webpro.ltd/picbed/img/20210719231049.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231049.png" class="lazyload"></a></p><blockquote><p>两个从库会自动建库建表，同步初始数据。</p></blockquote><blockquote><p>从库 192.168.18.129</p></blockquote><p><a href="https://img.webpro.ltd/picbed/img/20210719231229.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231229.png" class="lazyload"></a></p><blockquote><p>从库 192.168.18.130</p></blockquote><p><a href="https://img.webpro.ltd/picbed/img/20210719231350.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231350.png" class="lazyload"></a></p><blockquote><p>此时尝试修改选中行的 real_name 字段，在主库将<code>测试主从</code>改成<code>测试主从同步</code>，再查看两个从库的情况。</p></blockquote><p><a href="https://img.webpro.ltd/picbed/img/20210719231700.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231700.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20210719231707.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231707.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20210719231712.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210719231712.png" class="lazyload"></a></p><blockquote><p>测试成功</p></blockquote><h1 id="附页"><a href="#附页" class="headerlink" title="附页"></a>附页</h1><blockquote><p>Slave_IO_Running: NO 解决。导致这个原因的问题有很多，这里是因为用虚拟机做实验时，直接复制了整个虚拟机，导致 MySQL 的 server-uuid 重复</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -iname <span class="hljs-string">"auto.cnf"</span><br><br>vi /var/lib/mysql/auto.cnf<br><br><span class="hljs-comment"># 原内容</span><br>[auto]<br>server-uuid=a660602f-e4d2-11eb-9270-000c2963539a<br><br><span class="hljs-comment"># 调整后内容，自定义即可，把最后一位a替换为b</span><br>[auto]<br>server-uuid=a660602f-e4d2-11eb-9270-000c2963539b<br></code></pre></td></tr></table></figure></div><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://blog.csdn.net/zhanaolu4821/article/details/93622812" target="_blank" rel="noopener">Your password does not satisfy the current policy requirements</a></li><li><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4635458.html" target="_blank" rel="noopener">MySQL Replication 浅析</a></li><li><a href="https://www.cnblogs.com/huiyichanmian/p/11246668.html" target="_blank" rel="noopener">MySQL 主从同步配置</a></li><li><a href="https://www.cnblogs.com/zhoujie/p/mysql1.html" target="_blank" rel="noopener">mysql 主从同步配置</a></li><li><a href="https://blog.csdn.net/lilygg/article/details/98187015" target="_blank" rel="noopener">解决 Slave_SQL_Running: NO 问题（方案：数据库的备份）</a></li><li><a href="https://blog.51cto.com/onebig/2066236" target="_blank" rel="noopener">MySql 主从同步配置及实现原创</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- - 首先在主库增加只读权限的账户（肯定不能用 root 账户），
- master-readonly
- master-readonly-123456
- GRANT SELECT ON dbname.\* TO &#39;master-readonly&#39;@&#39;%&#39; IDENTI
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>frp内网穿透</title>
    <link href="http://blog.webpro.ltd/2021/01/12/frp/"/>
    <id>http://blog.webpro.ltd/2021/01/12/frp/</id>
    <published>2021-01-12T10:42:44.000Z</published>
    <updated>2021-07-17T11:50:16.232Z</updated>
    
    <content type="html"><![CDATA[<ul><li>以搭建 web 内网穿透服务为例</li></ul><h1 id="frp-版本-v0-34-3"><a href="#frp-版本-v0-34-3" class="headerlink" title="frp 版本(v0.34.3)"></a>frp 版本(v0.34.3)</h1><blockquote><p>下载地址： <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p></blockquote><h1 id="服务端配置-frps"><a href="#服务端配置-frps" class="headerlink" title="服务端配置(frps)"></a>服务端配置(frps)</h1><ul><li>服务端运行在 centos7 上，编辑 frps.ini 文件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7000</span><br><span class="hljs-attr">dashboard_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">dashboard_port</span> = <span class="hljs-number">7002</span><br><span class="hljs-attr">dashboard_user</span> = admin<br><span class="hljs-attr">dashboard_pwd</span> = admin<br><span class="hljs-attr">enable_prometheus</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">subdomain_host</span> = frps.webpro.ltd<br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">7001</span><br></code></pre></td></tr></table></figure></div><ul><li>frp 服务端口为 7000，监听新的穿透接入请求</li><li>管理面板端口为 7002，通过访问服务器 IP:7002，认证后可以查看 frp 服务状态</li><li>管理面板账户密码均为 admin（不建议这样设置，属于弱口令）</li><li>http 服务的端口为 7001</li><li>上面的 7000:7002 端口可以根据自己服务器端口占用情况自由调整</li></ul><blockquote><p>配置好 7000:7002 端口后，还要在服务器的防火墙开放这三个端口</p></blockquote><ul><li>运行 frps 服务</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">前台启动命令为 ./frps -c ./frps.ini<br>后台运行命令为 nohup ./frps -c ./frps.ini &amp;<br>如需作为服务启动，建议选择后者，前者当客户端断开连接后，服务端也会关闭<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20210113200900.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210113200900.png" class="lazyload"></a></p><h1 id="客户端配置-frpc"><a href="#客户端配置-frpc" class="headerlink" title="客户端配置(frpc)"></a>客户端配置(frpc)</h1><ul><li>客户端运行在 Windows10 系统上，编辑 frpc.ini 文件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">ini</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = 服务器IP<br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7000</span><br><br><span class="hljs-section">[web01]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8081</span><br><span class="hljs-attr">custom_domains</span> = 用于访问内网穿透服务的域名（提前解析到服务器IP）<br></code></pre></td></tr></table></figure></div><ul><li>在 cmd 里面，直接输入 frpc.exe 即可（注意是 cmd 不是 powershell，这两个终端语法不太相同）</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20210113200901.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20210113200901.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;以搭建 web 内网穿透服务为例&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;frp-版本-v0-34-3&quot;&gt;&lt;a href=&quot;#frp-版本-v0-34-3&quot; class=&quot;headerlink&quot; title=&quot;frp 版本(v0.34.3)&quot;&gt;&lt;/a&gt;frp 版本
      
    
    </summary>
    
    
      <category term="frp" scheme="http://blog.webpro.ltd/categories/frp/"/>
    
    
      <category term="frp" scheme="http://blog.webpro.ltd/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>Numpy And Pandas</title>
    <link href="http://blog.webpro.ltd/2021/01/06/numpy-and-pandas/"/>
    <id>http://blog.webpro.ltd/2021/01/06/numpy-and-pandas/</id>
    <published>2021-01-06T12:45:48.000Z</published>
    <updated>2021-07-17T11:50:15.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><blockquote><p>暂停更新.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Numpy&quot;&gt;&lt;a href=&quot;#Numpy&quot; class=&quot;headerlink&quot; title=&quot;Numpy&quot;&gt;&lt;/a&gt;Numpy&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;暂停更新.&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>强化学习(RL)</title>
    <link href="http://blog.webpro.ltd/2021/01/05/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-RL/"/>
    <id>http://blog.webpro.ltd/2021/01/05/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0-RL/</id>
    <published>2021-01-05T12:28:34.000Z</published>
    <updated>2021-07-17T11:50:16.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li>智能体(agent)</li><li>状态(state)</li><li>行为(action)</li><li>奖利(reward)</li><li>策略(policy)</li></ul><blockquote><p>持续更新中…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;强化学习&quot;&gt;&lt;a href=&quot;#强化学习&quot; class=&quot;headerlink&quot; title=&quot;强化学习&quot;&gt;&lt;/a&gt;强化学习&lt;/h1&gt;&lt;h2 id=&quot;专业术语&quot;&gt;&lt;a href=&quot;#专业术语&quot; class=&quot;headerlink&quot; title=&quot;专业术语&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据结构C++版</title>
    <link href="http://blog.webpro.ltd/2020/08/13/study-datastructure-linux-c/"/>
    <id>http://blog.webpro.ltd/2020/08/13/study-datastructure-linux-c/</id>
    <published>2020-08-13T04:57:00.000Z</published>
    <updated>2021-07-19T08:28:26.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><table><thead><tr><th>环境名</th><th>环境值</th></tr></thead><tbody><tr><td>操作系统</td><td>Win10, Windows Subsystem for Linux(WSL)</td></tr><tr><td>子系统版本</td><td>Ubuntu20.04</td></tr><tr><td>gcc 版本 (标准)</td><td>9.3.0 (c17)</td></tr><tr><td>g++版本 (标准)</td><td>9.3.0 (c++17)</td></tr><tr><td>编辑工具</td><td>Visual Studio Code</td></tr></tbody></table><h1 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h1><ul><li>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。</li><li>数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的存储结构。</li><li>数据结构的研究内容是构造复杂软件系统的基础，它的核心技术是分解与抽象。通过分解可以划分出数据的 3 个层次；再通过抽象，舍弃数据元素的具体内容，就得到逻辑结构。类似地，通过分解将处理要求划分成各种功能，再通过抽象舍弃实现细节，就得到运算的定义。上述两个方面的结合可以将问题变换为数据结构。这是一个从具体（即具体问题）到抽象（即数据结构）的过程。然后，通过增加对实现细节的考虑进一步得到存储结构和实现运算，从而完成设计任务。这是一个从抽象（即数据结构）到具体（即具体实现）的过程。</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200313222251.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200313222251.png" class="lazyload"></a></p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Q1-为什么要学数据结构"><a href="#Q1-为什么要学数据结构" class="headerlink" title="Q1: 为什么要学数据结构"></a>Q1: 为什么要学数据结构</h2><blockquote><ul><li>承前启后：学语言-&gt;学算法-&gt;写程序</li><li>高级计算机程序设计的理论指导</li><li>提升编程能力</li><li>面试中经常问到</li></ul></blockquote><h2 id="Q2：有哪些数据结构"><a href="#Q2：有哪些数据结构" class="headerlink" title="Q2：有哪些数据结构"></a>Q2：有哪些数据结构</h2><blockquote><ul><li>线性表、栈、（字符）串、数组、广义表、树、二叉树、图</li><li>重点是线性表、二叉树</li><li>对于每种数据结构会讲解其添加、更新、删除、查询、排序等操作的实现</li></ul></blockquote><h2 id="Q3：学习境界"><a href="#Q3：学习境界" class="headerlink" title="Q3：学习境界"></a>Q3：学习境界</h2><blockquote><ul><li><strong>境界一</strong> 知道理论、算法思路</li><li><strong>境界二</strong> 完成主要数据结构的基本算法实现（入门）</li><li><strong>境界三</strong> 更多数据结构，更多算法的实现（进一步提高数据结构功底）</li><li><strong>境界四</strong> 融会贯通、举一反三，在后续开发中综合应用数据结构知识</li></ul></blockquote><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>algorithm 英[ˈælɡərɪðəm] 美[ˈælɡərɪðəm]</p><h3 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h3><p>For Example: 求 1+2+3+…+100 = ?</p><ol><li>依次相加</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>    res += i;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure></div><ol start="2"><li>高斯求和</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> add_max = <span class="hljs-number">100</span>;<br><span class="hljs-comment">/* 梯形面积公式算法 */</span><br>res = (<span class="hljs-number">1</span> + add_max) * add_max / <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 三角形面积公式算法 (0+1+2+...+100, h = 101)*/</span><br>res = add_max * (add_max + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></div><ol start="3"><li>递归</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  sum(100) = sum(99) + 100</span><br><span class="hljs-comment">  sum(99) = sum(98) + 99</span><br><span class="hljs-comment">  =&gt;</span><br><span class="hljs-comment">  sum(100) = sum(98) + 99 + 100</span><br><span class="hljs-comment">  ...</span><br><span class="hljs-comment">  sum(100) = sum(1) + 2 + ... + 99 + 100</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> sum(m<span class="hljs-number">-1</span>) + m;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum(<span class="hljs-number">100</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>以上 3 个算法显然<strong>高斯求和</strong>算法的时间复杂度及空间复杂度最优</p></blockquote><h3 id="算法特征"><a href="#算法特征" class="headerlink" title="算法特征"></a><strong>算法特征</strong></h3><ol><li>输入</li><li>输出</li><li>可行性</li><li>有穷性</li><li>确定性</li></ol><h2 id="时间复杂度-Time-Complexity-定义"><a href="#时间复杂度-Time-Complexity-定义" class="headerlink" title="时间复杂度(Time Complexity)定义"></a>时间复杂度(Time Complexity)定义</h2><blockquote><ul><li>（1）时间频度：$T(n)$，$n$ 表示问题的规模。一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 $T(n)$。</li><li>（2）时间复杂度：一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅助函数 f(n),使得当 n 趋近于无穷大时，$T(n)/f(n)$的极限值为不等于零的常数，则称 $f(n)$是 $T(n)$的同数量级函数。记作 $T(n)=O(f(n))$,称 $O(f(n))$ 为算法的渐进时间复杂度，简称时间复杂度。在 $T(n)=4n^2-2n+2$ 中，就有 $f(n)=n^2$，使得 $T(n)/f(n)$的极限值为 4，那么 $O(f(n))$，也就是时间复杂度为 $O(n^2)$</li></ul></blockquote><blockquote><ul><li>时间复杂度一般讨论最坏的时间复杂度</li><li>定义 $O$（最坏情况&lt;=），例如 $T(n) = O(n^2)$</li><li>定义 $\Omega$（最好情况&gt;=），例如 $T(n) = Ω(n^2)$</li><li>定义 $\omicron$（最好情况与最坏情况同阶），例如 $T(n) = \omicron(n^2)$</li></ul></blockquote><h2 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h2><ol><li>找出算法中的基本语句。执行次数最多的就是基本语句，通常是最内层循环的循环体</li><li>计算基本语句的执行次数的数量级</li><li>用 $O$ 表示</li></ol><ul><li>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 $T(n)$。</li><li>一般情况下，算法中基本操作重复执行的次数是问题规模 $n$ 的某个函数，用 $T(n)$ 表示，若有某个辅助函数 $f(n)$,使得当 $n$ 趋近于无穷大时，$T(n)/f(n)$ 的极限值为不等于零的常数，则称 $f(n)$ 是 $T(n)$ 的同数量级函数。记作 $T(n)=O(f(n))$,称 $O(f(n))$ 为算法的渐进时间复杂度，简称时间复杂度。</li><li>在各种不同算法中，若算法中语句执行次数为一个常数，则时间复杂度为 $O(1)$,另外，<strong>在时间频度不相同时，时间复杂度有可能相同，如 $T(n)=n^2+3n+4$ 与 $T(n)=4n^2+2n+1$ 它们的频度不同，但时间复杂度相同，都为 $O(n^2)$。</strong></li></ul><h3 id="时间复杂度计算例题"><a href="#时间复杂度计算例题" class="headerlink" title="时间复杂度计算例题"></a>时间复杂度计算例题</h3><ul><li><ol><li>$T(n) = 1, T(n) = O(1)$</li></ol></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></div><p>$100 个简单语句其时间复杂度仍为 O(1)$</p><ul><li><ol start="2"><li>一个循环的时间复杂度为 $O(n)$</li></ol></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)&#123;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>$T(n) = n, T(n) = O(n)$</p><ul><li><ol start="3"><li>时间复杂度为 $O(log_2(n))$</li></ol></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)&#123;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>$1,2,4,8,16,32,…$<br>$设循环 x 次，则 2^x = n =&gt; x = log_2(n)$<br>$T(n) = log_2(n)$<br>$T(n) = O(log_2(n))$</p><ol start="4"><li>时间复杂度为 $O(n^2)$</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br></code></pre></td></tr></table></figure></div><p>$T(n) = n \times n$<br>$T(n) = O(n^2)$</p><ol start="5"><li>时间复杂度为 $O(nlog_2(n))$</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br></code></pre></td></tr></table></figure></div><ol start="6"><li>时间复杂度为 $O(n^2)$</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>        count++;<br></code></pre></td></tr></table></figure></div><p>$T(n) = n \times (1+2+3+…+n) = 0.5n + 0.5n^2$<br>$T(n) = O(n^2)$</p><h3 id="常用的时间复杂度级别"><a href="#常用的时间复杂度级别" class="headerlink" title="常用的时间复杂度级别"></a>常用的时间复杂度级别</h3><p><a href="https://img.webpro.ltd/picbed/img/datastructure_1.4-1.jpg" data-fancybox="group" data-caption="常用的时间复杂度级别" class="fancybox"><img alt="常用的时间复杂度级别" title="常用的时间复杂度级别" data-src="https://img.webpro.ltd/picbed/img/datastructure_1.4-1.jpg" class="lazyload"></a></p><h2 id="空间复杂度-Space-Complexity-定义"><a href="#空间复杂度-Space-Complexity-定义" class="headerlink" title="空间复杂度(Space Complexity)定义"></a>空间复杂度(Space Complexity)定义</h2><p>类似于时间复杂度的讨论，一个算法的空间复杂度 $S(n)$ 定义为该算法所耗费的存储空间，它也是问题规模 $n$ 的函数。渐近空间复杂度也常常简称为空间复杂度。空间复杂度(SpaceComplexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地&quot;进行的，是节省存储的算法，有的算法需要占用的临时工作单元数与解决问题的规模 $n$ 有关，它随着 $n$ 的增大而增大，当 $n$ 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</p><p><strong>$S(n) = O(g(n))$</strong></p><ol><li>空间复杂度 $O(1)$ 。如果算法执行所需要的临时空间不随着某个变量 n 的大小而变化，即此算法空间复杂度为一个常量，可表示为 $O(1)$<br>举例：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-keyword">int</span> m = i + j;<br></code></pre></td></tr></table></figure></div><p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)</p><ol start="2"><li>空间复杂度 $O(n)$</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span>[] m = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>这段代码中，第一行 new 了一个数组出来，这个数据占用的大小为 $n$，这段代码的 2-6 行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 $S(n) = O(n)$</p><p><strong>由此可见，递归算法效率低，体现在空间复杂度高。</strong></p><hr><h1 id="线性表-linearlist"><a href="#线性表-linearlist" class="headerlink" title="线性表(linearlist)"></a>线性表(linearlist)</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p><a href="https://cdn.git.webpro.ltd/bill/datastructure/src/branch/master/linerTable/seqlist.cpp" target="_blank" rel="noopener">顺序表实现线性表(代码)</a></p><ul><li><input checked disabled type="checkbox"> 基于数组</li><li><input checked disabled type="checkbox"> 表初始容量为$2$</li><li><input checked disabled type="checkbox"> 支持动态扩容,扩容策略为$2^{n+1}$, $n$为第几次扩容</li><li><input checked disabled type="checkbox"> 扩容时拷贝整块内存,效率更高</li><li><input checked disabled type="checkbox"> 扩容时计算新的容量采用移位操作,效率更高</li><li><input checked disabled type="checkbox"> 重载函数, 调用灵活</li><li><input checked disabled type="checkbox"> 算法具有更高的容错和自动纠错性</li></ul><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><h3 id="单-向-链表-无头结点"><a href="#单-向-链表-无头结点" class="headerlink" title="单(向)链表(无头结点)"></a>单(向)链表(无头结点)</h3><h3 id="双-向-链表-有头结点"><a href="#双-向-链表-有头结点" class="headerlink" title="双(向)链表(有头结点)"></a>双(向)链表(有头结点)</h3><h3 id="循环单链表-有头结点"><a href="#循环单链表-有头结点" class="headerlink" title="循环单链表(有头结点)"></a>循环单链表(有头结点)</h3><h3 id="循环双链表-有头结点"><a href="#循环双链表-有头结点" class="headerlink" title="循环双链表(有头结点)"></a>循环双链表(有头结点)</h3><blockquote><p>正在更新…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验环境&quot;&gt;&lt;a href=&quot;#实验环境&quot; class=&quot;headerlink&quot; title=&quot;实验环境&quot;&gt;&lt;/a&gt;实验环境&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;环境名&lt;/th&gt;
&lt;th&gt;环境值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tb
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.webpro.ltd/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构" scheme="http://blog.webpro.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>怎么用电脑自带软件修改图片分辨率 修改尺寸</title>
    <link href="http://blog.webpro.ltd/2020/06/01/changeImgSize/"/>
    <id>http://blog.webpro.ltd/2020/06/01/changeImgSize/</id>
    <published>2020-06-01T14:12:27.000Z</published>
    <updated>2021-07-17T11:50:17.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Powered-by-webpro-ltd"><a href="#Powered-by-webpro-ltd" class="headerlink" title="Powered by webpro.ltd"></a>Powered by webpro.ltd</h2><h2 id="本教程部分图片来源百度经验，仅供学习传播-https-jingyan-baidu-com-article-4d58d5415dba1f9dd5e9c048-html"><a href="#本教程部分图片来源百度经验，仅供学习传播-https-jingyan-baidu-com-article-4d58d5415dba1f9dd5e9c048-html" class="headerlink" title="本教程部分图片来源百度经验，仅供学习传播(https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html)"></a>本教程部分图片来源百度经验，仅供学习传播(<a href="https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/4d58d5415dba1f9dd5e9c048.html</a>)</h2><h2 id="安徽工业大学电子毕业纪念册照片处理"><a href="#安徽工业大学电子毕业纪念册照片处理" class="headerlink" title="安徽工业大学电子毕业纪念册照片处理"></a>安徽工业大学电子毕业纪念册照片处理</h2><h2 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h2><ul><li>每张照片准备一个对应的缩略图</li><li>每张照片要求均为 jpg 格式</li><li>照片需要从 1.jpg 往下自增编号（1.jpg,2.jpg,…）</li><li>缩略图同照片一样从 1.jpg 往下自增编号（1.jpg,2.jpg,…）</li><li>缩略图 1.jpg 要对应这个照片 1.jpg</li><li>缩略图建议尺寸：125 x 125</li><li>照片建议尺寸：750 x 500</li></ul><blockquote><p>本教程使用 win 电脑自带的画图工具完成</p></blockquote><blockquote><p>如果照片比较大，打开后可按 ctrl+滚轮进行比例缩放，调整到和屏幕尺寸相宜</p></blockquote><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><blockquote><p>windows 系统默认画图软件</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="右击图片"><a href="#右击图片" class="headerlink" title="右击图片"></a>右击图片</h3><p><a href="https://img.webpro.ltd/picbed/img/20200601222801.PNG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601222801.PNG" class="lazyload"></a></p><h3 id="点击-编辑"><a href="#点击-编辑" class="headerlink" title="点击 编辑"></a>点击 编辑</h3><p><a href="https://img.webpro.ltd/picbed/img/20200601223801.JPG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601223801.JPG" class="lazyload"></a></p><h3 id="点击-重新调整大小"><a href="#点击-重新调整大小" class="headerlink" title="点击 重新调整大小"></a>点击 重新调整大小</h3><p><a href="https://img.webpro.ltd/picbed/img/20200601223914.JPG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601223914.JPG" class="lazyload"></a></p><h3 id="输入水平或垂直百分比。"><a href="#输入水平或垂直百分比。" class="headerlink" title="输入水平或垂直百分比。"></a>输入水平或垂直百分比。</h3><ul><li><p>当勾选了 保持纵横比选项 ，软件会根据百分比和输入的水平或垂直自动调整图片尺寸。</p></li><li><p>取消勾选 保持纵横比选项 任意输入想要的水平 垂直 数值</p></li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200601224011.JPG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601224011.JPG" class="lazyload"></a></p><h3 id="点击-像素-，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小"><a href="#点击-像素-，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小" class="headerlink" title="点击 像素 ，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小"></a>点击 像素 ，输入图片的分辨率（尺寸），即可转换为输入的尺寸，当勾选了保持纵横比是，软件会自动根据比例调整大小</h3><p><a href="https://img.webpro.ltd/picbed/img/20200601224026.JPG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601224026.JPG" class="lazyload"></a></p><h3 id="修改好后，点击确定，最后点击文件–-gt-保存按钮（ctrl-s），在软件下方还可看到图片此时的分辨率和大小"><a href="#修改好后，点击确定，最后点击文件–-gt-保存按钮（ctrl-s），在软件下方还可看到图片此时的分辨率和大小" class="headerlink" title="修改好后，点击确定，最后点击文件–&gt;保存按钮（ctrl+s），在软件下方还可看到图片此时的分辨率和大小"></a>修改好后，点击确定，最后点击文件–&gt;保存按钮（ctrl+s），在软件下方还可看到图片此时的分辨率和大小</h3><p><a href="https://img.webpro.ltd/picbed/img/20200601224033.JPG" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200601224033.JPG" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Powered-by-webpro-ltd&quot;&gt;&lt;a href=&quot;#Powered-by-webpro-ltd&quot; class=&quot;headerlink&quot; title=&quot;Powered by webpro.ltd&quot;&gt;&lt;/a&gt;Powered by webpro.ltd&lt;/
      
    
    </summary>
    
    
      <category term="windows10" scheme="http://blog.webpro.ltd/categories/windows10/"/>
    
    
      <category term="画图" scheme="http://blog.webpro.ltd/tags/%E7%94%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Github + jsdelivr + PicGo 搭建免费稳定高速图床</title>
    <link href="http://blog.webpro.ltd/2020/03/14/github-picBed/"/>
    <id>http://blog.webpro.ltd/2020/03/14/github-picBed/</id>
    <published>2020-03-14T00:52:27.000Z</published>
    <updated>2021-07-17T11:50:16.233Z</updated>
    
    <content type="html"><![CDATA[<style>.flex-img {  display: flex;}.flex-img-item {  text-align: center;}</style><h1 id="图床概述"><a href="#图床概述" class="headerlink" title="图床概述"></a>图床概述</h1><div class="flex-img">  <div class="flex-img-item">    <a href="https://img.webpro.ltd/picbed/img/20200312153906.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://img.webpro.ltd/picbed/img/20200312153906.png" class="lazyload"></a>    <span><b>GitHub</b></span>  </div>  <div class="flex-img-item">    <a href="https://img.webpro.ltd/picbed/img/20200314110013.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://img.webpro.ltd/picbed/img/20200314110013.png" class="lazyload"></a>    <span><b>jsdelivr</b></span>  </div>  <div class="flex-img-item">    <a href="https://img.webpro.ltd/picbed/img/20200314091317.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img style="height: 50px;" data-src="https://img.webpro.ltd/picbed/img/20200314091317.png" class="lazyload"></a>    <span><b>PicGo</b></span>  </div></div><br><blockquote><p>为什么要用图床</p></blockquote><p>写博客文章时，往往要附带一些图片，而图片并非文字，存储方式也非单纯的以文本方式存储。往往需要把图片统一托管起来，这样操作比较方便，便于批量操作。另外我的博客使用 hexo 框架，静态博客框架，需要分离文章和图片，写文章时采用<code>markwodn + 图床</code>方式会获得极佳体验。</p><blockquote><p>什么是图床</p></blockquote><p>图床类似于 OSS 对象存储，OSS 存储的对象相对来说比较广泛，而图床只是用来存储图片。将图片上传到图床，通过<code>url</code>进行图片资源访问。</p><blockquote><p>图床的选择</p></blockquote><ul><li><p>微博图床：以前用的人较多，2019 年 4 月开始开启防盗链，已经失效。</p></li><li><p>SM.MS：香港个人开发，每个用户免费 5GB 空间，但速度较慢。</p></li><li><p>ImgUrl：国外图床，速度较慢。</p></li><li><p>又拍云、七牛云、腾讯云、阿里云等国内服务商：需要备案、实名认证（支付宝实名认证、人脸识别认证等等），能不透露个人信息尽量不透露，保护好隐私。</p></li><li><p>GitHub：使用公开 Git 仓库做存储，免费，单个文件大小有限制(不超过 100MB，一张高清图片 500KB 左右，足够)。直接通过 GitHub 访问图片，速度较慢，但是配合 CDN：<code>jsdelivr</code>，速度非常快，<code>jsdelivr</code>支持加速来自 GitHub 的文件，1MB 的 PDF 可以秒开。</p></li><li><p>cdn.jsdelivr.net 在国内的 ping 值<br><a href="https://img.webpro.ltd/picbed/img/20200315184536.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200315184536.png" class="lazyload"></a></p></li></ul><h1 id="GitHub-图床配置步骤"><a href="#GitHub-图床配置步骤" class="headerlink" title="GitHub 图床配置步骤"></a>GitHub 图床配置步骤</h1><h2 id="创建图床仓库"><a href="#创建图床仓库" class="headerlink" title="创建图床仓库"></a>创建图床仓库</h2><ul><li>设置仓库名称</li><li>使用 README.md 文件初始化仓库</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200314113026.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113026.png" class="lazyload"></a></p><h2 id="生成-personal-access-token"><a href="#生成-personal-access-token" class="headerlink" title="生成 personal access token"></a>生成 personal access token</h2><p><a href="https://img.webpro.ltd/picbed/img/20200314113809.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113809.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20200314113808.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113808.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20200314113811.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113811.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20200314113810.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113810.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20200314113916.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314113916.png" class="lazyload"></a></p><ul><li>创建成功后，把 token 粘贴下来(GitHub 不会保存 token，一旦你丢失，重新生成即可)</li></ul><h2 id="下载-PicGo-图床管理工具"><a href="#下载-PicGo-图床管理工具" class="headerlink" title="下载 PicGo 图床管理工具"></a>下载 PicGo 图床管理工具</h2><p><a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">PicGo 下载(GitHub)</a></p><ul><li>安装完毕后，开启 GitHub 图床</li><li>设定仓库名：<code>用户名/仓库名</code></li><li>设定分支名：<code>master</code></li><li>设定 Token：上个步骤获取到的<code>token</code></li><li>指定存储路径：<code>/img</code>，根据自己需要设置文件夹名称</li><li>设定自定义域名（这个要设置成 jsdelivr 的 CDN 的加速地址）：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@master</code></li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200314114608.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314114608.png" class="lazyload"></a></p><h1 id="测试-GitHub-图床"><a href="#测试-GitHub-图床" class="headerlink" title="测试 GitHub 图床"></a>测试 GitHub 图床</h1><p><a href="https://img.webpro.ltd/picbed/img/20200314114651.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314114651.png" class="lazyload"></a><br><a href="https://img.webpro.ltd/picbed/img/20200314114607.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200314114607.png" class="lazyload"></a></p><ul><li>在相册中查看上传的图片</li></ul><blockquote><p>更多灵活的用法等待你去发现！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
.flex-img {
  display: flex;
}
.flex-img-item {
  text-align: center;
}
&lt;/style&gt;

&lt;h1 id=&quot;图床概述&quot;&gt;&lt;a href=&quot;#图床概述&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="github" scheme="http://blog.webpro.ltd/categories/github/"/>
    
    
      <category term="github" scheme="http://blog.webpro.ltd/tags/github/"/>
    
      <category term="jsdelivr" scheme="http://blog.webpro.ltd/tags/jsdelivr/"/>
    
      <category term="PicGo" scheme="http://blog.webpro.ltd/tags/PicGo/"/>
    
      <category term="图床" scheme="http://blog.webpro.ltd/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>My Hexo Blog</title>
    <link href="http://blog.webpro.ltd/2020/03/05/My-Hexo-Blog/"/>
    <id>http://blog.webpro.ltd/2020/03/05/My-Hexo-Blog/</id>
    <published>2020-03-05T13:48:00.000Z</published>
    <updated>2021-07-17T11:50:16.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客全新升级为-Hexo-引擎"><a href="#博客全新升级为-Hexo-引擎" class="headerlink" title="博客全新升级为 Hexo 引擎"></a>博客全新升级为 Hexo 引擎</h1><h2 id="markdown-支持测试"><a href="#markdown-支持测试" class="headerlink" title="markdown 支持测试"></a>markdown 支持测试</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 欢迎使用 Markdown 在线编辑器 MdEditor</span><br><br><span class="hljs-strong">**Markdown 是一种轻量级的「标记语言」**</span><br></code></pre></td></tr></table></figure></div><h1 id="欢迎使用-Markdown-在线编辑器-MdEditor"><a href="#欢迎使用-Markdown-在线编辑器-MdEditor" class="headerlink" title="欢迎使用 Markdown 在线编辑器 MdEditor"></a>欢迎使用 Markdown 在线编辑器 MdEditor</h1><p><strong>Markdown 是一种轻量级的「标记语言」</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">markdown</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![](https://img.webpro.ltd/picbed/img/20200308123251.png)<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200308123251.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123251.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客全新升级为-Hexo-引擎&quot;&gt;&lt;a href=&quot;#博客全新升级为-Hexo-引擎&quot; class=&quot;headerlink&quot; title=&quot;博客全新升级为 Hexo 引擎&quot;&gt;&lt;/a&gt;博客全新升级为 Hexo 引擎&lt;/h1&gt;&lt;h2 id=&quot;markdown-支持测试
      
    
    </summary>
    
    
      <category term="blog" scheme="http://blog.webpro.ltd/categories/blog/"/>
    
    
      <category term="hexo" scheme="http://blog.webpro.ltd/tags/hexo/"/>
    
      <category term="blog" scheme="http://blog.webpro.ltd/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Centos6.10服务器入侵-&gt;重装-&gt;恢复记录</title>
    <link href="http://blog.webpro.ltd/2020/02/22/My-Server-Attacked-by-Scanner/"/>
    <id>http://blog.webpro.ltd/2020/02/22/My-Server-Attacked-by-Scanner/</id>
    <published>2020-02-21T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos6-10-服务器入侵-gt-重装-gt-恢复记录"><a href="#Centos6-10-服务器入侵-gt-重装-gt-恢复记录" class="headerlink" title="Centos6.10 服务器入侵-&gt;重装-&gt;恢复记录"></a>Centos6.10 服务器入侵-&gt;重装-&gt;恢复记录</h1><ul><li>头些天在 centos6.10 服务器创建了一个 git 账户用来搭建私有 Git 仓库，账户和密码均为 git，并且支持 ssh 密码远程连接，很快被黑客扫描到，通过 ssh 弱口令进到我的 git 账户，并操纵我的服务器扫描其他持续扫描其他服务器，被购买服务器的主机商的防火墙发现，锁定了我的服务器。也是在与客服的沟通中，他问我的服务器 ssh 密码是否过于简单，正是弱口令使我的服务器沦陷。病毒已经植入到我的系统中，为了彻底解决，客服建议我重装系统，尽管服务器上面的数据比较多，我还是硬着头皮备份、重装了一次系统，搞了整整一天，服务器上的功能基本恢复。</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200308123405.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123405.png" class="lazyload"></a></p><ul><li>上一次配置服务器还是在 2 年前，当时安全意识较差，认为防火墙是多余的，把防火墙直接关闭，使得服务器上可以任意向外发送数据、服务器上的任何端口都向外开放；很多程序都放到 root 账户下运行；为了省事，设置及其简单的密码，每当看到网络安全相关资料讲解“弱口令”时，感觉弱口令离我非常遥远，不以为然。这些做法都是极其危险的，也是一步一步使我服务器沦陷的最终原因。</li></ul><h2 id="一、备份-WEB-站点（root-账户）"><a href="#一、备份-WEB-站点（root-账户）" class="headerlink" title="一、备份 WEB 站点（root 账户）"></a>一、备份 WEB 站点（root 账户）</h2><ul><li><p>我安装的 WEB 服务软件为国产的 Kangle 服务器，应该很少有人听说，Kangle 就相当于平时我们所常见的 Apache、Nginx，也是一款能够提供 WEB 访问控制服务的软件。</p></li><li><p>Kangle 站点文件存放在<code>/home/ftp</code>下，Kangle 一些相关的账户配置信息存储在<code>/vhs/kangle/etc</code>，首先备份这两个文件夹，然后下载压缩包到本地：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /home/ftp<br>zip -r ftp.zip ftp<br><span class="hljs-built_in">cd</span> /vhs/kangle/etc/<br>zip -r etc.zip etc<br></code></pre></td></tr></table></figure></div><h2 id="二、备份-MySQL-数据库（root-账户）"><a href="#二、备份-MySQL-数据库（root-账户）" class="headerlink" title="二、备份 MySQL 数据库（root 账户）"></a>二、备份 MySQL 数据库（root 账户）</h2><ul><li><p>备份 MySQL 可以使用 Navicat 以 root 账户的身份登陆，导出所有数据库即可（安全起见，MySQL 在默认状态是不允许从外网以 root 账户远程连接，在备份的时候需要手动设置将 localhst 改成%）。</p></li><li><p>MySQL 配置允许远程连接</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入MySQL</span><br>mysql -uroot -p<br><br><span class="hljs-comment"># 切换到mysql库</span><br>use mysql;<br><br><span class="hljs-comment"># 查看用户表</span><br>SELECT `Host`,`User` FROM user;<br><br><span class="hljs-comment"># 更新用户表</span><br>UPDATE user SET `Host` = <span class="hljs-string">'%'</span> WHERE `User` = <span class="hljs-string">'用户名'</span> LIMIT 1;<br><br><span class="hljs-comment"># 强制刷新权限</span><br>flush privileges;<br><br><span class="hljs-comment"># 关闭mysql</span><br><span class="hljs-built_in">exit</span>;<br></code></pre></td></tr></table></figure></div><ul><li><p>如果你安装了 phpmyadmin 也可以以 root 身份登陆管理页面，导出数据库。</p></li><li><p>我在服务器上设置了定时任务，即每天 01:00 将整个数据库备份一次，永久保存在服务器上，恰好今天在重装系统前没有对数据库再进行修改，于是我直接使用了今天凌晨 1 点的全备份来恢复系统。尽管安装系统时仅格式化系统盘，但是为了安全起见，我把 sql 备份文件下载到了本地。</p></li></ul><h2 id="三、备份-tomcat9、gitea（git-账户）"><a href="#三、备份-tomcat9、gitea（git-账户）" class="headerlink" title="三、备份 tomcat9、gitea（git 账户）"></a>三、备份 tomcat9、gitea（git 账户）</h2><ul><li>git 账户下运行着 tomcat 和 gitea(开源 git 仓库面板，轻量级)，将这两个相关的文件全部压缩，下载。</li></ul><h2 id="四、备份-root-账户下的-frp-内网穿透软件（root）"><a href="#四、备份-root-账户下的-frp-内网穿透软件（root）" class="headerlink" title="四、备份 root 账户下的 frp 内网穿透软件（root）"></a>四、备份 root 账户下的 frp 内网穿透软件（root）</h2><ul><li>第三步忘记了备份内网穿透，再次切换到 root 用户，找到 frp 的安装位置，压缩，下载：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>zip -r frp.zip frp<br></code></pre></td></tr></table></figure></div><h2 id="五、重装系统"><a href="#五、重装系统" class="headerlink" title="五、重装系统"></a>五、重装系统</h2><p><a href="https://img.webpro.ltd/picbed/img/20200308123407.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123407.png" class="lazyload"></a></p><ul><li>仍然选择 centos6.10，并仅格式化系统盘，手机验证码确认，重装。大概 5 分钟，系统重装完成.（实际这里第一次重装系统时我选的 centos7，但是装完之后发现 centos7 与 centos6 之间的操作还是存在一定差异的，用着不顺手，就又重装了一次，装回了 centos6）</li></ul><h2 id="六、恢复服务器环境及功能"><a href="#六、恢复服务器环境及功能" class="headerlink" title="六、恢复服务器环境及功能"></a>六、恢复服务器环境及功能</h2><ul><li>由于重装系统时保留了数据盘，因此重装完毕之后。/home 目录下的文件夹并没有清空。众所周知，Linux 一般是一个账户对应一个/home 目录下的文件夹，我们应先把这些目录清理干净，防止造成冲突。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 删除git用户</span><br>userdel git<br></code></pre></td></tr></table></figure></div><ul><li><p>设置 ssh，允许远程连接。我的服务器重装完毕后已经配置好 ssh，直接连接即可。</p></li><li><p>重装 Kangle 服务器，恢复站点数据（FTP 站点及服务器参数配置文件）。</p></li><li><p>重装 MySQL，恢复 MySQL 数据：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u root -p mysql &gt; /backup/20200222.sql<br></code></pre></td></tr></table></figure></div><hr><ul><li>安装 git(version &gt;= 2.16)</li></ul><h3 id="卸载旧版本-git"><a href="#卸载旧版本-git" class="headerlink" title="卸载旧版本 git"></a>卸载旧版本 git</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum remove git<br></code></pre></td></tr></table></figure></div><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel<br>yum install  gcc perl-ExtUtils-MakeMaker<br></code></pre></td></tr></table></figure></div><h3 id="下载安装-libiconv"><a href="#下载安装-libiconv" class="headerlink" title="下载安装 libiconv"></a>下载安装 libiconv</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz<br>tar -zxvf libiconv-1.15.tar.gz<br><span class="hljs-built_in">cd</span> libiconv-1.15<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/libiconv  &amp;&amp;  make  &amp;&amp; make install<br></code></pre></td></tr></table></figure></div><h3 id="下载安装-Git"><a href="#下载安装-Git" class="headerlink" title="下载安装 Git"></a>下载安装 Git</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span><br>wget https://www.kernel.org/pub/software/scm/git/git-2.11.0.tar.gz<br>tar -zxvf git-2.11.0.tar.gz<br><span class="hljs-built_in">cd</span> git-2.11.0<br>./configure --prefix=/usr/<span class="hljs-built_in">local</span>/git-2.11.0 --with-iconv=/usr/<span class="hljs-built_in">local</span>/libiconv<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure></div><h3 id="检查版本号"><a href="#检查版本号" class="headerlink" title="检查版本号"></a>检查版本号</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git --version<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200308123406.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123406.png" class="lazyload"></a></p><hr><ul><li>安装 jdk1.8。我安装的系统位 centos6.10 x64，安装 jdk1.8。具体版本号为：jdk-8u201-linux-x64.tar.gz。由于已经在本地存过 jdk，直接通过 SSH 上传到/usr/local 中：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf jdk-8u201-linux-x64.tar.gz<br>vi /etc/profile<br></code></pre></td></tr></table></figure></div><ul><li>在 profile 文件中追加如下文本：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># jdk8 env</span><br>JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/dev/jdk1.8.0_201<br>CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><span class="hljs-built_in">export</span> PATH JAVA_HOME CLASSPATH<br></code></pre></td></tr></table></figure></div><ul><li>保存退出，使环境变量生效：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></div><hr><ul><li><p>升级内核。centos6.10 的默认内核版本是 2.x，但是 gitea 内核版本要求在 3.x，所以需要升级内核。</p></li><li><p>查看当前内核版本</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uname -r<br></code></pre></td></tr></table></figure></div><ul><li>查看当前系统相关信息(内核版本号、硬件架构、主机名称和操作系统类型等)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uname -a<br></code></pre></td></tr></table></figure></div><ul><li>导入 public key</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br></code></pre></td></tr></table></figure></div><ul><li>安装 ELRepo 到 CentOS</li><li>先要进入后面的网址，<a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">http://elrepo.org/tiki/tiki-index.php</a> 选择要安装的 ELRepo</li><li>以下是 centos6 需要的资源</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rpm -Uvh http://www.elrepo.org/elrepo-release-6-8.el6.elrepo.noarch.rpm<br></code></pre></td></tr></table></figure></div><ul><li>安装 kernel-lt（lt=long-term）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum --enablerepo=elrepo-kernel install kernel<span class="hljs-_">-lt</span> -y<br></code></pre></td></tr></table></figure></div><ul><li>编辑 grub.conf 文件，修改 Grub 引导顺序</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/grub.conf<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200308123409.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123409.png" class="lazyload"></a></p><ul><li><p>因为一般新安装的内核在第一个位置，所以设置 default=0，表示启动新内核</p></li><li><p>重启系统</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shutdown -r now<br></code></pre></td></tr></table></figure></div><ul><li>再次查看内核版本，已经升级成<code>4.4.214-1.el6.elrepo.x86_64</code></li></ul><hr><ul><li><p>创建 git 账户，在 git 账户中恢复 tomcat、frp、gitea 服务。为了增强密码安全性，我使用 KeePass 软件生成了一个 128 位的密码。在 git 账户中上传备份过的 tomcat9、frp、gitea，解压并配置相关文件，启动 tomcat、frp、gitea 并保持在后台运行。</p></li><li><p>添加 MySQL 自动完整备份</p></li><li><p>在/home/backup/创建 autobackupmysql.sh，编辑：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">filename=`date +%Y%m%d`<br>mysqldump -uroot -p密码 --all-databases &gt;/home/backup/<span class="hljs-variable">$filename</span>.sql<br></code></pre></td></tr></table></figure></div><ul><li>添加 cron</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">crontab -e<br>0 1 * * * /home/backup/autobackupmysql.sh<br></code></pre></td></tr></table></figure></div><hr><h2 id="七、服务器安全性增强设置"><a href="#七、服务器安全性增强设置" class="headerlink" title="七、服务器安全性增强设置"></a>七、服务器安全性增强设置</h2><ul><li>主要从以下两方面入手：</li></ul><ol><li>禁止使用 ssh 密码方式连接，改为 ssh 证书连接。</li><li>配置安全策略较强的 iptables 策略，将 iptables 的 INPUT,FORWARD,OUTPUT 策略全部设置为 DROP，即出现在所有进出站服务都要在 iptables 的 INPUT 和 OUTPUT 上添加记录，否则无法访问服务。</li></ol><ul><li>1.修改 ssh 连接方式，由于我有 root 和 git 两个账户，因此需要分别生成私钥。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ssh">su root<br>ssh-keygen -t rsa<br>cd ~&#x2F;.ssh<br></code></pre></td></tr></table></figure></div><ul><li>将公钥设置为服务器的登录公钥</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mv id_rsa.pub authorized_keys<br></code></pre></td></tr></table></figure></div><ul><li>查看私钥并保存到本地</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat id_rsa<br></code></pre></td></tr></table></figure></div><ul><li>设置 ssh，禁止密码登录，改用私钥登录</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure></div><ul><li>修改 PasswordAuthentication 改为 no，然后重启 sshd 服务</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service sshd restart<br></code></pre></td></tr></table></figure></div><ul><li>再次连接使用 ssh 私钥即可直接登陆。其他账户的操作方法同 root 账户。</li></ul><hr><ul><li>2.iptable 安全策略，首先将 INPUT,FORWARD,OUTPUT 策略全部设置为 DROP（即白名单模式，不设置默认黑名单）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -P INPUT DROP<br>iptables -P OUTPUT ACCEPT<br>iptables -P FORWARD DROP<br></code></pre></td></tr></table></figure></div><ul><li><p>注意，上面的命令，当你执行第一条<em>iptables -P INPUT DROP</em>时，会发现你的 ssh 连接断开，这就说明第一条配置生效了，剩下的配置需要到主机商后台管理页面使用 VNC 进行连接操作。</p></li><li><p>首先开启 22 端口，允许其出站入站</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 22 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT<br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li><p>查看 iptables 状态，若 22 端口已添加，那么断开 VNC，再到我们的 ssh 连接软件去操作（ssh 终端可以复制粘贴，VNC 不能，所以尽快配置好 22 端口）</p></li><li><p>首先需要开放本机回环地址（127.0.0.1），即允许本机内互相访问</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -i lo -j ACCEPT<br>iptables -A OUTPUT -o lo -j ACCEPT<br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li>添加完毕后，我的服务器还需要陆续开放 WEB 服务所需的 80、443s 端口、3306 数据库端口、允许 ICMP 包通过（ping）等等</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">iptables -A INPUT -p tcp --dport 80 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT<br><br>iptables -A INPUT -p tcp --dport 443 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 443 -j ACCEPT<br><br>iptables -A INPUT -p tcp --dport 3306 -j ACCEPT<br>iptables -A OUTPUT -p tcp --sport 3306 -j ACCEPT<br><br>iptables -A INPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-request -j ACCEPT<br>iptables -A OUTPUT -p icmp --icmp-type <span class="hljs-built_in">echo</span>-reply -j ACCEPT<br><br>service iptables save<br>service iptables status<br></code></pre></td></tr></table></figure></div><ul><li>配置完毕后，重启防火墙</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service iptables restart<br></code></pre></td></tr></table></figure></div><ul><li>我的服务器上运行的 tomcat、gitea 等服务，使用 Kangle 服务器提供的反向代理进行使用，即代理到 127.0.0.1:port，这样更加安全，避免没必要的端口暴露。</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200308123408.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123408.png" class="lazyload"></a></p><ul><li>这是我的防火墙配置</li></ul><hr><blockquote><p>到这里，服务器重装及环境的恢复总算基本完成，下一步就是进行各项功能的测试。这一次的攻击事件也使我加强了对网络安全的认识，计算机网络中无时无刻都在进行这各种扫描、嗅探、入侵，只有我们防护好自己的服务器，滴水不漏，才能保证服务器和数据服务的安全可靠。</p></blockquote><hr><hr><blockquote><p>常用路径及命令</p></blockquote><ul><li>redis 官方下载地址：<a href="http://download.redis.io/releases/" target="_blank" rel="noopener">http://download.redis.io/releases/</a></li><li>redis 安装——进入到安装目录，直接运行 make，然后启动即可</li><li>redis 安装目录：<code>/usr/local/dev/redis-3.0.5</code></li><li>redis 启动 <code>nohup /usr/local/dev/redis-3.0.5/bin/redis-server /usr/local/dev/redis-3.0.5/redis.conf &amp;</code></li><li>redis 测试 <code>/usr/local/dev/redis-3.0.5/bin/redis-cli</code></li><li>centos6.10 添加开机自启，<code>vi /etc/rc.d/rc.local</code></li><li>环境变量文件<code>vi /etc/profile</code>,<code>source /etc/profile</code></li><li>如果上面的环境变量文件配置了不生效，则配置<code>vi /etc/bashrc</code>,<code>source /etc/bashrc</code></li><li>jdk 环境配置，下载压缩包，解压到某一路径，配置 profile，保存，使 profile 生效</li><li>springboot 部署命令：<code>java -jar -Dspring.profiles.active=test demo-0.0.1-SNAPSHOT.jar</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos6-10-服务器入侵-gt-重装-gt-恢复记录&quot;&gt;&lt;a href=&quot;#Centos6-10-服务器入侵-gt-重装-gt-恢复记录&quot; class=&quot;headerlink&quot; title=&quot;Centos6.10 服务器入侵-&amp;gt;重装-&amp;gt;恢复记录
      
    
    </summary>
    
    
    
      <category term="centos6.10" scheme="http://blog.webpro.ltd/tags/centos6-10/"/>
    
  </entry>
  
  <entry>
    <title>How To Use Git</title>
    <link href="http://blog.webpro.ltd/2020/02/10/how-to-use-git/"/>
    <id>http://blog.webpro.ltd/2020/02/10/how-to-use-git/</id>
    <published>2020-02-09T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.743Z</updated>
    
    <content type="html"><![CDATA[<ul><li><code>git fetch</code>和<code>git pull</code>的关系图</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309225314.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309225314.jpg" class="lazyload"></a></p><hr><h1 id="一、Git-的-3-层结构"><a href="#一、Git-的-3-层结构" class="headerlink" title="一、Git 的 3 层结构"></a>一、Git 的 3 层结构</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">working directory</td><td align="left">工作区</td></tr><tr><td align="left">staging index</td><td align="left">暂存区</td></tr><tr><td align="left">git directory(Repository)</td><td align="left">版本库</td></tr></tbody></table><h1 id="二、Git-中文件的-4-种状态基本状态"><a href="#二、Git-中文件的-4-种状态基本状态" class="headerlink" title="二、Git 中文件的 4 种状态基本状态"></a>二、Git 中文件的 4 种状态基本状态</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">untracked</td><td align="left">未被追踪的</td></tr><tr><td align="left">modified</td><td align="left">表示工作区修改了某个文件但是还没有添加到暂存区</td></tr><tr><td align="left">Staged</td><td align="left">表示把工作区修改的文件添加到了暂存区但是没有提交到版本库</td></tr><tr><td align="left">Committed</td><td align="left">表示数据被安全的存储在本地库中</td></tr></tbody></table><h1 id="三、vscode-中文件的-Git-状态提示"><a href="#三、vscode-中文件的-Git-状态提示" class="headerlink" title="三、vscode 中文件的 Git 状态提示"></a>三、vscode 中文件的 Git 状态提示</h1><table><thead><tr><th align="left">名称</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left"><code>M</code></td><td align="left">修改了文件但没有提交到暂存区</td></tr><tr><td align="left"><code>A</code></td><td align="left">增加的文件</td></tr><tr><td align="left"><code>C</code></td><td align="left">文件的一个新拷贝</td></tr><tr><td align="left"><code>D</code></td><td align="left">删除的一个文件</td></tr><tr><td align="left"><code>M</code></td><td align="left">文件的内容或者 mode 被修改了</td></tr><tr><td align="left"><code>R</code></td><td align="left">文件名被修改了</td></tr><tr><td align="left"><code>T</code></td><td align="left">文件的类型被修改了</td></tr><tr><td align="left"><code>U</code></td><td align="left">文件没有被合并(你需要完成合并才能进行提交)</td></tr><tr><td align="left"><code>X</code></td><td align="left">未知状态。(很可能是遇到 git 的 bug 了，你可以向 git 提交 bug report)</td></tr></tbody></table><h1 id="四、指令"><a href="#四、指令" class="headerlink" title="四、指令"></a>四、指令</h1><h2 id="配置指令"><a href="#配置指令" class="headerlink" title="配置指令"></a>配置指令</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git config –list</td><td align="left">查看配置信息</td></tr><tr><td align="left">git config –global user.name Bill</td><td align="left">配置用户信息姓名</td></tr><tr><td align="left">git config –global user.email <a href="mailto:xxx@mail.com">xxx@mail.com</a></td><td align="left">配置用户信息邮箱</td></tr><tr><td align="left">git log</td><td align="left">查看提交日志</td></tr><tr><td align="left">git log –oneline</td><td align="left">查看提交日志一行一条记录</td></tr></tbody></table><h2 id="Git-提交"><a href="#Git-提交" class="headerlink" title="Git 提交"></a>Git 提交</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git add fileName</td><td align="left">提交到暂存区</td></tr><tr><td align="left">git commit -m “提交信息”</td><td align="left">提交到版本库</td></tr><tr><td align="left">git commit -am “提交信息”</td><td align="left">一次性提交到版本库</td></tr><tr><td align="left">git commit –amend</td><td align="left">撤销上一次提交，并将暂存区的文件重新提交</td></tr><tr><td align="left">git checkout – fileName</td><td align="left">拉取暂存区的文件并将其替换工作区的文件</td></tr><tr><td align="left">git reset HEAD fileName</td><td align="left">拉取最近一次提交到版本库的这个文件到暂存区，该操作不影响工作区</td></tr></tbody></table><h2 id="Git-删除"><a href="#Git-删除" class="headerlink" title="Git 删除"></a>Git 删除</h2><h3 id="方法一：先在文件资源管理器中删除文件，然后-git-add"><a href="#方法一：先在文件资源管理器中删除文件，然后-git-add" class="headerlink" title="方法一：先在文件资源管理器中删除文件，然后 git add ."></a>方法一：先在文件资源管理器中删除文件，然后 git add .</h3><h3 id="方法二：git-rm-fileName"><a href="#方法二：git-rm-fileName" class="headerlink" title="方法二：git rm fileName"></a>方法二：git rm fileName</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git rm -cached fileName</td><td align="left">不小心把追踪的文件添加到暂存区，想删除暂存区的文件但是不修改工作区的文件</td></tr><tr><td align="left">git rm -f fileName</td><td align="left">工作区和暂存区都删除</td></tr></tbody></table><h2 id="Git-重命名"><a href="#Git-重命名" class="headerlink" title="Git 重命名"></a>Git 重命名</h2><h3 id="例如：修改-index-html-的文件名"><a href="#例如：修改-index-html-的文件名" class="headerlink" title="例如：修改 index.html 的文件名"></a>例如：修改 index.html 的文件名</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">mv index.html index1.html</td><td align="left">一般重命名文件操作，Git 会看做是删除了旧文件，新建新文件，新文件的状态是 U(untracked)状态</td></tr><tr><td align="left">git mv index.html index1.html</td><td align="left">如果用 git mv,Git 会知道这是重命名了文件，改文件的状态是 R(rename)状态</td></tr></tbody></table><h2 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git branch</td><td align="left">查看分支</td></tr><tr><td align="left">git branch dev</td><td align="left">创建 dev 分支</td></tr><tr><td align="left">git checkout dev</td><td align="left">切换到 dev 分支</td></tr><tr><td align="left">git branch -d dev</td><td align="left">删除 dev 分支</td></tr><tr><td align="left">git branch -m dev fix</td><td align="left">修改 dev 分支的名称为 fix</td></tr><tr><td align="left">git branch -d fix</td><td align="left">删除 dev 分支</td></tr><tr><td align="left">git checkout -b fix</td><td align="left">撤销删除 fix 分支并切换到 fix 分支</td></tr></tbody></table><h2 id="Git-合并分支"><a href="#Git-合并分支" class="headerlink" title="Git 合并分支"></a>Git 合并分支</h2><h3 id="先切换到-master-分支"><a href="#先切换到-master-分支" class="headerlink" title="先切换到 master 分支"></a>先切换到 master 分支</h3><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git merge dev</td><td align="left">当前分支与 dev 分支合并</td></tr></tbody></table><ul><li>如果有冲突，即同一个文件同一行有不同的修改，将会提示用户手动决定用哪个版本</li><li>实际多人协作开发时，合并时为 Fast-forward（快进式合并），即没有冲突</li></ul><h2 id="比较不同代码版本区别"><a href="#比较不同代码版本区别" class="headerlink" title="比较不同代码版本区别"></a>比较不同代码版本区别</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git diff</td><td align="left">比较工作区和暂存区的区别</td></tr><tr><td align="left">git diff –staged</td><td align="left">比较暂存区与版本库中的差异</td></tr><tr><td align="left">git diff hashValue1 hashValue2</td><td align="left">比较两个版本的差异</td></tr></tbody></table><ul><li>例如当前为 master 分支，执行 <code>git diff dev</code> 可以比较当前分支和 dev 分支的差异</li></ul><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><ul><li>git stash 将当前工作去的文件暂存（不提交），然后切换分支。应用场景：当正在 dev 分支上开发某个项目，这时项目中出现一个 bug，需要紧急修复，但是正在开发的内容只是完成一半，还不想提交，这时可以用 git stash 命令将修改的内容保存至堆栈区，然后顺利切换到 hotfix 分支进行 bug 修复，修复完成后，再次切回到 dev 分支，从堆栈中恢复刚刚保存的内容</li></ul><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git stash list</td><td align="left">查看本地保存的代码列表</td></tr><tr><td align="left">git stash pop stash@{1}</td><td align="left">还原代码并删除本地保存</td></tr><tr><td align="left">git stash drop stash@{0}</td><td align="left">删除这个修改</td></tr></tbody></table><h2 id="Git-推送"><a href="#Git-推送" class="headerlink" title="Git 推送"></a>Git 推送</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git push <a href="https://xxx.git" target="_blank" rel="noopener">https://xxx.git</a> master</td><td align="left">将本地的当前分支推送到远程的 master 分支上</td></tr></tbody></table><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git remote add myStudy <a href="mailto:git@gitee.com">git@gitee.com</a>:xxx/studyGit.git</td><td align="left">myStudy 指代替代仓库地址</td></tr><tr><td align="left">git remote -v</td><td align="left">查看仓库地址</td></tr><tr><td align="left">git remote remove myStudy</td><td align="left">删除添加的指代单词</td></tr></tbody></table><h2 id="Git-Tag-Release"><a href="#Git-Tag-Release" class="headerlink" title="Git Tag (Release)"></a>Git Tag (Release)</h2><table><thead><tr><th align="left">命令</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">git tag</td><td align="left">列出已有的 tag</td></tr><tr><td align="left">git tag -l “v1.1”</td><td align="left">加上-l 命令可以使用通配符来过滤 tag</td></tr><tr><td align="left">git tag v1.0</td><td align="left">新建 tag</td></tr><tr><td align="left">git tag -a tagName -m “my tag”</td><td align="left">还可以加上-a 参数来创建一个带备注的 tag，备注信息由-m 指定</td></tr><tr><td align="left">git show tagName</td><td align="left">查看 tag 的详细信息，包括 commit 号等</td></tr><tr><td align="left">git tag -a v1.2 9fceb02 -m “my tag”</td><td align="left">打 tag 不必要在 head 之上，也可通过 commit 号在之前的版本上打</td></tr><tr><td align="left">git push origin v1.0</td><td align="left">将 tag 同步到远程服务器</td></tr><tr><td align="left">git push origin –tags</td><td align="left">推送本地所有 tag</td></tr><tr><td align="left">git checkout v1.0</td><td align="left">跟分支一样，可以直接切换到某个 tag 去。<br>这个时候不位于任何分支，处于游离状态，可以考虑基于这个 tag 创建一个分支</td></tr><tr><td align="left">git tag -d v0.1.2</td><td align="left">删除某个 tag，本地删除</td></tr><tr><td align="left">git push origin :refs/tags/v0.1.2</td><td align="left">远端删除</td></tr></tbody></table><h2 id="Git-误删-commit-后的恢复方法"><a href="#Git-误删-commit-后的恢复方法" class="headerlink" title="Git 误删 commit 后的恢复方法"></a>Git 误删 commit 后的恢复方法</h2><ul><li><p>1）通过 git log 可以查看我们之前提交的 commit_id</p></li><li><p>2）复制你需要回滚的 commit_id。不过 windows 下的命令行是不能复制文本的，为此你可以到 github 上查看仓库的 commit 历史，上面是可以直接复制的,复制好后在命令行执行：<code>git reset --hard commit_id</code></p></li><li><p>3）执行: <code>git push origin HEAD --force</code> 提交当前 HEAD,这样就能够将错误的提交删除，回滚至其之前的代码</p></li><li><p>但是如果当你回滚代码以后发现 commit_id 复制错了或者回滚错了怎么办呢？不要慌，按下面的方法做：</p><ul><li>1）执行：<code>git reflog</code><br>你能在命令行中看到你的历史操作，复制你要恢复操作最前面的 hash 值</li><li>2）执行 <code>git reset --hard hash</code> 命令中最后要输的 hash 就是你要恢复的历史记录最前面黄色部分的 hash 值<br>比如 <code>git reset --hard 4458e09</code>，这样就成功解决问题了。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch&lt;/code&gt;和&lt;code&gt;git pull&lt;/code&gt;的关系图&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://img.webpro.ltd/picbed/img/20200309225314.jpg&quot; data-
      
    
    </summary>
    
    
      <category term="git" scheme="http://blog.webpro.ltd/categories/git/"/>
    
    
      <category term="git" scheme="http://blog.webpro.ltd/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli小工具 – oneLifeCache缓存</title>
    <link href="http://blog.webpro.ltd/2020/01/26/vue-cli-tool-oneLifeCache/"/>
    <id>http://blog.webpro.ltd/2020/01/26/vue-cli-tool-oneLifeCache/</id>
    <published>2020-01-25T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oneLifeCache"><a href="#oneLifeCache" class="headerlink" title="oneLifeCache"></a>oneLifeCache</h1><p>用于 vue-cli 的前端缓存插件</p><ul><li>vue-cli2 已测试</li><li>vue-cli3 未测试，理论上没问题</li></ul><blockquote><p>oneLifeCache-v2 与 oneLifeCache 版本存在较大改动，因此要分开说明</p></blockquote><blockquote><p>挂载到 vue-cli2(两版本挂载方式相同)</p></blockquote><ul><li>main.js</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// oneLifeCache</span><br><span class="hljs-keyword">import</span> oneLifeCache <span class="hljs-keyword">from</span> <span class="hljs-string">"@/utils/oneLifeCache"</span>;<br><span class="hljs-comment">// 挂载全局</span><br><span class="hljs-comment">// eslint-disable-next-line new-cap</span><br>Vue.prototype.$cache = <span class="hljs-keyword">new</span> oneLifeCache();<br></code></pre></td></tr></table></figure></div><blockquote><h2 id="oneLifeCache-v2-版本"><a href="#oneLifeCache-v2-版本" class="headerlink" title="oneLifeCache-v2 版本"></a>oneLifeCache-v2 版本</h2></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">this</span>.$cache.set(key, value); <span class="hljs-comment">// 添加k-v；若k重复，将覆盖旧值</span><br><span class="hljs-keyword">this</span>.$cache.getAndSet(key, value); <span class="hljs-comment">// 重设k的值</span><br><span class="hljs-keyword">this</span>.$cache.getAndRemove(key); <span class="hljs-comment">// 通过k获取值后删除之</span><br><span class="hljs-keyword">this</span>.$cache.remove(key); <span class="hljs-comment">// 通过k删除节点</span><br><span class="hljs-keyword">this</span>.$cache.clear(); <span class="hljs-comment">// 清空缓存</span><br></code></pre></td></tr></table></figure></div><blockquote><h2 id="oneLifeCache-版本"><a href="#oneLifeCache-版本" class="headerlink" title="oneLifeCache 版本"></a>oneLifeCache 版本</h2></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">this</span>.$cache.set(key, value); <span class="hljs-comment">// 添加k-v；若k重复，将添加失败</span><br><span class="hljs-keyword">this</span>.$cache.get(key); <span class="hljs-comment">// 通过k获取值</span><br><span class="hljs-keyword">this</span>.$cache.read(key); <span class="hljs-comment">// 通过k获取值后删除之</span><br><span class="hljs-keyword">this</span>.$cache.clear(); <span class="hljs-comment">// 清空缓存</span><br></code></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;oneLifeCache&quot;&gt;&lt;a href=&quot;#oneLifeCache&quot; class=&quot;headerlink&quot; title=&quot;oneLifeCache&quot;&gt;&lt;/a&gt;oneLifeCache&lt;/h1&gt;&lt;p&gt;用于 vue-cli 的前端缓存插件&lt;/p&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="vue-cli" scheme="http://blog.webpro.ltd/categories/vue-cli/"/>
    
    
      <category term="vue-cli2" scheme="http://blog.webpro.ltd/tags/vue-cli2/"/>
    
      <category term="vue-cli3" scheme="http://blog.webpro.ltd/tags/vue-cli3/"/>
    
  </entry>
  
  <entry>
    <title>springboot package war</title>
    <link href="http://blog.webpro.ltd/2020/01/13/springboot-package-war/"/>
    <id>http://blog.webpro.ltd/2020/01/13/springboot-package-war/</id>
    <published>2020-01-12T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:17.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要打-war-包"><a href="#为什么要打-war-包" class="headerlink" title="为什么要打 war 包?"></a>为什么要打 war 包?</h1><p>springboot 默认打包是 jar 包，通过 java -xxx.jar 命令可以直接跑起来。一般的 jar 包，每一个 springboot 项目运行后都有对应的 Tomcat 服务器启动，每个 Tomcat 占一个端口、jvm 占用内存，尤其是多个 springboot 的 jar 包在一台服务器上，包不好管理且端口比较混乱，耗内存，不如启动一个 Tomcat 服务器，将 springboot 打成 war 包放到 webapps 下面统一运行管理，这样所有打成 war 包的项目都可以在同一个端口下运行。</p><h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="亲测的-springboot-版本：2-0-6-RELEASE"><a href="#亲测的-springboot-版本：2-0-6-RELEASE" class="headerlink" title="亲测的 springboot 版本：2.0.6.RELEASE"></a>亲测的 springboot 版本：2.0.6.RELEASE</h2><h2 id="将-pom-xml-文件首部的-jar-改成-war"><a href="#将-pom-xml-文件首部的-jar-改成-war" class="headerlink" title="将 pom.xml 文件首部的 jar 改成 war"></a>将 pom.xml 文件首部的 jar 改成 war</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- &lt;packaging&gt;jar&lt;/packaging&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="去除内置的-Tomcat-容器（a-b-两种方式都可）"><a href="#去除内置的-Tomcat-容器（a-b-两种方式都可）" class="headerlink" title="去除内置的 Tomcat 容器（a/b 两种方式都可）"></a>去除内置的 Tomcat 容器（a/b 两种方式都可）</h2><ul><li>a.去掉 spring-boot-starter-tomcat(如果没有 tomcat 字样，忽略本步骤)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>b.添加依赖</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。</span><br><span class="hljs-comment">        相当于compile，但是打包阶段做了exclude操作--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="新建启动类：主要是-SpringApplicationBuilder-configure-方法"><a href="#新建启动类：主要是-SpringApplicationBuilder-configure-方法" class="headerlink" title="新建启动类：主要是 SpringApplicationBuilder configure 方法"></a>新建启动类：主要是 SpringApplicationBuilder configure 方法</h2><ul><li>原 xxxApplication.java 启动类里面的其他东西要原封不动的搬过来（比如@MapperScan 等）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span></span>&#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> builder.sources(App<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    SpringApplication.run(App<span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">args</span>)</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>新建该类成功后，将原来的 xxxApplication.java 文件保留，打开文件，将里面的代码全部注释。</li></ul><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package<br></code></pre></td></tr></table></figure></div><ul><li>打包完成会显示 BUILD SUCCESS,war 包在 target 目录下</li></ul><h1 id="测试-war-包"><a href="#测试-war-包" class="headerlink" title="测试 war 包"></a>测试 war 包</h1><ul><li>在本地启动 tomcat 服务器，将打好的 war 包放到 webapps 目录下</li><li>访问<code>http://localhost:[端口号]/[打包项目名]/</code>进行测试</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么要打-war-包&quot;&gt;&lt;a href=&quot;#为什么要打-war-包&quot; class=&quot;headerlink&quot; title=&quot;为什么要打 war 包?&quot;&gt;&lt;/a&gt;为什么要打 war 包?&lt;/h1&gt;&lt;p&gt;springboot 默认打包是 jar 包，通过 java -
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>开发常用命令笔记</title>
    <link href="http://blog.webpro.ltd/2019/12/27/work-cmd/"/>
    <id>http://blog.webpro.ltd/2019/12/27/work-cmd/</id>
    <published>2019-12-27T13:23:23.000Z</published>
    <updated>2021-07-17T11:50:16.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos6-10-配置-jdk8"><a href="#centos6-10-配置-jdk8" class="headerlink" title="centos6.10 配置 jdk8"></a>centos6.10 配置 jdk8</h2><h3 id="1、下载-JDK"><a href="#1、下载-JDK" class="headerlink" title="1、下载 JDK"></a>1、下载 JDK</h3><p>这里选择 JDK8，去官网下载即可。<br>jdk-8u11-linux-i586.tar.gz</p><h3 id="2、上传到服务器，解压"><a href="#2、上传到服务器，解压" class="headerlink" title="2、上传到服务器，解压"></a>2、上传到服务器，解压</h3><p>通过 ssh，将<code>jdk-8u11-linux-i586.tar.gz</code>放到<code>/usr/local</code>下。<br>解压：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -xzvf jdk-8u11-linux-i586.tar.gz<br></code></pre></td></tr></table></figure></div><h3 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/profile<br></code></pre></td></tr></table></figure></div><p>文件末尾追加如下内容：（路径根据自己的实际情况修改）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># set java environment</span><br>JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/jdk1.8.0_11<br>JRE_HOME=/usr/<span class="hljs-built_in">local</span>/jdk1.8.0_11/jre<br>CLASS_PATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JRE_HOME</span>/lib<br>PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$JRE_HOME</span>/bin<br><span class="hljs-built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH<br></code></pre></td></tr></table></figure></div><h3 id="4、配置文件生效"><a href="#4、配置文件生效" class="headerlink" title="4、配置文件生效"></a>4、配置文件生效</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></div><h3 id="5、查看-jdk-版本"><a href="#5、查看-jdk-版本" class="headerlink" title="5、查看 jdk 版本"></a>5、查看 jdk 版本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -version<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200308123652.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200308123652.png" class="lazyload"></a></p><hr><h2 id="vue-cli2"><a href="#vue-cli2" class="headerlink" title="vue-cli2"></a>vue-cli2</h2><ul><li>创建项目/脚手架</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vue init webpack project-name<br></code></pre></td></tr></table></figure></div><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run dev<br></code></pre></td></tr></table></figure></div><h3 id="编译（打包）项目"><a href="#编译（打包）项目" class="headerlink" title="编译（打包）项目"></a>编译（打包）项目</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run build<br></code></pre></td></tr></table></figure></div><h3 id="安装-HTTP-请求"><a href="#安装-HTTP-请求" class="headerlink" title="安装 HTTP 请求"></a>安装 HTTP 请求</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save vue-resource<br></code></pre></td></tr></table></figure></div><h3 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save vue-router<br></code></pre></td></tr></table></figure></div><h3 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install axios<br>npm install --save axios<br></code></pre></td></tr></table></figure></div><hr><h2 id="vue-cli3"><a href="#vue-cli3" class="headerlink" title="vue-cli3"></a>vue-cli3</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">创建项目/脚手架<br>vue create project-name<br></code></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;centos6-10-配置-jdk8&quot;&gt;&lt;a href=&quot;#centos6-10-配置-jdk8&quot; class=&quot;headerlink&quot; title=&quot;centos6.10 配置 jdk8&quot;&gt;&lt;/a&gt;centos6.10 配置 jdk8&lt;/h2&gt;&lt;h3 id=&quot;1
      
    
    </summary>
    
    
    
      <category term="centos6.10" scheme="http://blog.webpro.ltd/tags/centos6-10/"/>
    
  </entry>
  
  <entry>
    <title>数据结构Java版(暂停更新，迁移至C语言版)</title>
    <link href="http://blog.webpro.ltd/2019/09/29/study-datastructure/"/>
    <id>http://blog.webpro.ltd/2019/09/29/study-datastructure/</id>
    <published>2019-09-28T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:15.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><!-- # Introduction --><ul><li>数据结构入门</li><li>Powered by Bill</li><li>date: 2019/09/29</li><li>blog: <a href="https://www.webpro.ltd" target="_blank" rel="noopener">https://www.webpro.ltd</a></li></ul><p>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。<br>数据的逻辑结构和物理结构是数据结构的两个密切相关的方面，同一逻辑结构可以对应不同的存储结构。算法的设计取决于数据的逻辑结构，而算法的实现依赖于指定的存储结构。<br>数据结构的研究内容是构造复杂软件系统的基础，它的核心技术是分解与抽象。通过分解可以划分出数据的 3 个层次；再通过抽象，舍弃数据元素的具体内容，就得到逻辑结构。类似地，通过分解将处理要求划分成各种功能，再通过抽象舍弃实现细节，就得到运算的定义。上述两个方面的结合可以将问题变换为数据结构。这是一个从具体（即具体问题）到抽象（即数据结构）的过程。然后，通过增加对实现细节的考虑进一步得到存储结构和实现运算，从而完成设计任务。这是一个从抽象（即数据结构）到具体（即具体实现）的过程。</p><p><a href="https://img.webpro.ltd/picbed/img/20200313222251.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200313222251.png" class="lazyload"></a></p><hr><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><h2 id="Q1-为什么要学数据结构？"><a href="#Q1-为什么要学数据结构？" class="headerlink" title="Q1: 为什么要学数据结构？"></a>Q1: 为什么要学数据结构？</h2><blockquote><ul><li>承前启后：学语言-&gt;学算法-&gt;写程序</li><li>高级计算机程序设计的理论指导</li><li>提升编程能力</li><li>面试中经常问到</li></ul></blockquote><h2 id="Q2：有哪些数据结构？"><a href="#Q2：有哪些数据结构？" class="headerlink" title="Q2：有哪些数据结构？"></a>Q2：有哪些数据结构？</h2><blockquote><ul><li>线性表、栈、（字符）串、数组、广义表、树、二叉树、图</li><li>重点是线性表、二叉树</li><li>对于每种数据结构会讲解其添加、更新、删除、查询、排序等操作的实现</li></ul></blockquote><h2 id="Q3：学习境界？"><a href="#Q3：学习境界？" class="headerlink" title="Q3：学习境界？"></a>Q3：学习境界？</h2><blockquote><ul><li><strong>境界一</strong> 听懂理论，听懂算法思路</li><li><strong>境界二</strong> 完成主要数据结构的基本算法实现（入门）</li><li><strong>境界三</strong> 更多数据结构，更多算法的实现（进一步提高数据结构功底）</li><li><strong>境界四</strong> 融会贯通、举一反三，在后续开发中综合应用数据结构知识</li></ul></blockquote><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>algorithm 英[ˈælɡərɪðəm] 美[ˈælɡərɪðəm]</p><h2 id="什么是算法？"><a href="#什么是算法？" class="headerlink" title="什么是算法？"></a>什么是算法？</h2><p>For Example: 求 1+2+3+…+100 = ?</p><ol><li>依次相加</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>    res += i;<br>&#125;<br><span class="hljs-built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure></div><ol start="2"><li>高斯求和</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> add_max = <span class="hljs-number">100</span>;<br><span class="hljs-comment">/* 梯形面积公式算法 */</span><br>res = (<span class="hljs-number">1</span> + add_max) * add_max / <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* 三角形面积公式算法 (0+1+2+...+100, h = 101)*/</span><br>res = add_max * (add_max + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></div><ol start="3"><li>递归</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*sum(100) = sum(99) + 100</span><br><span class="hljs-comment">sum(99) = sum(98) + 99</span><br><span class="hljs-comment">=&gt;</span><br><span class="hljs-comment">sum(100) = sum(98) + 99 + 100</span><br><span class="hljs-comment">...</span><br><span class="hljs-comment">sum(100) = sum(1) + 2 + ... + 99 + 100*/</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(m &gt; <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> sum(m<span class="hljs-number">-1</span>) + m;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; sum(<span class="hljs-number">100</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>以上 3 个算法显然<strong>高斯求和</strong>算法的时间复杂度及空间复杂度最优</p></blockquote><h2 id="算法特征："><a href="#算法特征：" class="headerlink" title="算法特征："></a><strong>算法特征：</strong></h2><ol><li>输入</li><li>输出</li><li>可行性</li><li>有穷性</li><li>确定性</li></ol><h1 id="时间复杂度-Time-Complexity-定义"><a href="#时间复杂度-Time-Complexity-定义" class="headerlink" title="时间复杂度(Time Complexity)定义"></a>时间复杂度(Time Complexity)定义</h1><blockquote><ul><li>（1）时间频度：T(n)，n 表示问题的规模。一个算法执行所耗费的时间，从理论上是不能算出来的，必须上机运行测试才能知道。但我们不可能也没有必要对每个算法都上机测试，只需知道哪个算法花费的时间多，哪个算法花费的时间少就可以了。并且一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 T(n)。</li><li>（2）时间复杂度：一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅助函数 f(n),使得当 n 趋近于无穷大时，T（n)/f(n)的极限值为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。记作 T(n)=O(f(n)),称 O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。在 T(n)=4n²-2n+2 中，就有 f(n)=n²，使得 T（n)/f(n)的极限值为 4，那么 O(f(n))，也就是时间复杂度为 O(n²)</li><li>时间复杂度一般讨论最坏的时间复杂度</li></ul></blockquote><blockquote><ul><li>定义 O（最坏情况&lt;=），例如 T(n) = O(n²)</li><li>定义 Ω（最好情况&gt;=），例如 T(n) = Ω(n²)</li><li>定义 Θ（最好情况与最坏情况同阶），例如 T(n) = Θ(n²)</li></ul></blockquote><h1 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h1><ol><li>找出算法中的基本语句<br><br>执行次数最多的就是基本语句，通常是最内层循环的循环体</li><li>计算基本语句的执行次数的数量级</li><li>用 O 表示</li></ol><p>一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 T(n)。<br><br>　　一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅助函数 f(n),使得当 n 趋近于无穷大时，T（n)/f (n)的极限值为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。记作 T(n)=O(f(n)),称 O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br><br>　　在各种不同算法中，若算法中语句执行次数为一个常数，则时间复杂度为 O(1),另外，<strong>在时间频度不相同时，时间复杂度有可能相同，如 T(n)=n2+3n+4 与 T(n)=4n2+2n+1 它们的频度不同，但时间复杂度相同，都为 O(n2)。</strong></p><h2 id="时间复杂度计算例题"><a href="#时间复杂度计算例题" class="headerlink" title="时间复杂度计算例题"></a>时间复杂度计算例题</h2><p>1.T(n) = 1, T(n) = O(1)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></div><p>100 个简单语句其时间复杂度仍为 O(1)</p><p>2.一个循环的时间复杂度为 O(n)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)&#123;<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>T(n) = n, T(n) = O(n)</p><ol start="3"><li>时间复杂度为 O(log2(n))</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)&#123;<br>    count++;<br>&#125;<br><span class="hljs-comment">/*1,2,4,8,16,32,...</span><br><span class="hljs-comment">设循环x次，则2^x = n =&gt; x = log2(n)</span><br><span class="hljs-comment">T(n) = log2(n)</span><br><span class="hljs-comment">T(n) = O(log2(n))*/</span><br></code></pre></td></tr></table></figure></div><ol start="4"><li>时间复杂度为 O(n²)</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br><span class="hljs-comment">/*T(n) = n x n</span><br><span class="hljs-comment">T(n) = O(n²)*/</span><br></code></pre></td></tr></table></figure></div><ol start="5"><li>时间复杂度为 O(nlog2(n))</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i*=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= n; j++)<br>        count++;<br></code></pre></td></tr></table></figure></div><ol start="6"><li>时间复杂度为 O(n²)</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> n = <span class="hljs-number">8</span>, count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++)<br>        count++;<br><span class="hljs-comment">/*T(n) = n x (1+2+3+...+n) = 0.5n + 0.5n²</span><br><span class="hljs-comment">T(n) = O(n²)*/</span><br></code></pre></td></tr></table></figure></div><h2 id="常用的时间复杂度级别"><a href="#常用的时间复杂度级别" class="headerlink" title="常用的时间复杂度级别"></a>常用的时间复杂度级别</h2><p><a href="https://img.webpro.ltd/picbed/img/datastructure_1.4-1.jpg" data-fancybox="group" data-caption="常用的时间复杂度级别" class="fancybox"><img alt="常用的时间复杂度级别" title="常用的时间复杂度级别" data-src="https://img.webpro.ltd/picbed/img/datastructure_1.4-1.jpg" class="lazyload"></a></p><h1 id="空间复杂度-Space-Complexity-定义"><a href="#空间复杂度-Space-Complexity-定义" class="headerlink" title="空间复杂度(Space Complexity)定义"></a>空间复杂度(Space Complexity)定义</h1><p>类似于时间复杂度的讨论，一个算法的空间复杂度 S(n)定义为该算法所耗费的存储空间，它也是问题规模 n 的函数。渐近空间复杂度也常常简称为空间复杂度。空间复杂度(SpaceComplexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地&quot;进行的，是节省存储的算法，有的算法需要占用的临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</p><p><strong>S(n) = O(g(n))</strong></p><ol><li>空间复杂度 O(1)。如果算法执行所需要的临时空间不随着某个变量 n 的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)<br>举例：</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-keyword">int</span> m = i + j;<br></code></pre></td></tr></table></figure></div><p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)</p><ol start="2"><li>空间复杂度 O(n)</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span>[] m = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n]<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>这段代码中，第一行 new 了一个数组出来，这个数据占用的大小为 n，这段代码的 2-6 行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)</p><p><strong>由此可见，递归算法效率低下，体现在空间复杂度高。</strong></p><hr><h1 id="线性表-linearlist"><a href="#线性表-linearlist" class="headerlink" title="线性表(linearlist)"></a>线性表(linearlist)</h1><blockquote><ul><li>Java 的 LinkList 底层是双向链表</li><li>ArryList 是顺序表</li></ul></blockquote><ol><li>相同的数据类型</li><li>序列（顺序性）</li><li>有序</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是连续的一块内存空间</p><h2 id="链表-—-链式存储结构"><a href="#链表-—-链式存储结构" class="headerlink" title="链表 — 链式存储结构"></a>链表 — 链式存储结构</h2><p>非连续的内存空间</p><h1 id="线性表实现"><a href="#线性表实现" class="headerlink" title="线性表实现"></a>线性表实现</h1><blockquote><ul><li>Java 中 ArrayList 底层采用数组实现</li><li>Java 中 LinkedList 底层采用双向链表实现</li><li>我们通过对 ArrayList 和 LinkedList 的简单实现练习线性表</li><li>实际上的 ArrayList 和 LinkedList 比我们写的要复杂</li><li>无论是 ArrayList 还是 LinkedList，其都有以下（包括但不限于）方法，与存储结构无关。因此我们定义了如下接口，给 ArrayList 和 LinkedList 使用</li></ul></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 线性表</span><br><span class="hljs-comment"> * 和存储结构无关</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">List</span> </span>&#123;<br><br>    <span class="hljs-comment">// 返回线性表的大小</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 返回线性表中序号为 i 的数据元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;<br><br>    <span class="hljs-comment">// 线性表为空返回True，否则返回False</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 判断线性表是否包含数据元素 e</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 返回数据元素e在线性表中的序号</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到线性表中i号的位置</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到线性表的末尾</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到object之前</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 将数据元素e插入到object之后</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 删除线性表序号为i的元素 并返回之</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>;<br><br>    <span class="hljs-comment">// 删除线性表中第一个与e相同的元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 替换线性表中序号为i的数据元素为e，返回原数据元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span></span>;<br><br>    <span class="hljs-comment">// 输出List</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="ArrayList-实现"><a href="#ArrayList-实现" class="headerlink" title="ArrayList 实现"></a>ArrayList 实现</h1><blockquote><ul><li>ArrayList 底层是数组</li></ul></blockquote><p>Ⅰ. 用 Java 模拟实现 ArrayList 基本操作</p><h2 id="ArrayList-类"><a href="#ArrayList-类" class="headerlink" title="ArrayList 类"></a>ArrayList 类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 顺序表</span><br><span class="hljs-comment"> * 底层采用数组，但是长度可以动态变化</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * java.util.ArrayList每次扩容操作增加 1/2</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Object[] elementData; <span class="hljs-comment">// 底层是一个数组，目前还没有确定长度</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The size of the ArrayList (the number of elements it contains).</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size; <span class="hljs-comment">// 元素的个数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 没有指定长度，默认长度为4</span><br>    <span class="hljs-keyword">this</span>(<span class="hljs-number">4</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 构造方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> initialCapacity 数组的初始长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// 给数组分配指定数量空间</span><br>    elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    <span class="hljs-comment">// 指定顺序表的元素个数</span><br>    size = <span class="hljs-number">0</span>;<br>    &#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt;= size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组索引越界异常: "</span> + i);<br>&#125;<br><span class="hljs-keyword">return</span> elementData[i];<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">return</span> indexOf(e) &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(e == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(elementData[i] == <span class="hljs-keyword">null</span>)<br><span class="hljs-keyword">return</span> i;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(e.equals(elementData[i]))<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br><span class="hljs-comment">// i 的位置要正确</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt; size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组索引越界异常: "</span> + i);<br>&#125;<br><span class="hljs-comment">// 数组满了，就扩容</span><br><span class="hljs-keyword">if</span>(size == elementData.length) &#123;<br>grow();<br>&#125;<br><span class="hljs-comment">// 后移i及其后面的元素，从最后一个元素开始</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = size; j &gt; i; j--) &#123;<br>elementData[j] = elementData[j-<span class="hljs-number">1</span>];<br>&#125;<br>elementData[i] = e;<br>size++;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 创建一个新的数组，其长度是elementData的两倍</span><br>elementData = Arrays.copyOf(elementData, elementData.length*<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 数组满了，就扩容</span><br><span class="hljs-keyword">if</span>(size + <span class="hljs-number">1</span> &gt;= elementData.length) &#123;<br>grow();<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br><span class="hljs-keyword">if</span>(obj.equals(elementData[i])) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = size - <span class="hljs-number">1</span>; j &gt;= i; j--)<br>elementData[j+<span class="hljs-number">1</span>] = elementData[j];<br>elementData[i] = e;<br>size++;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// addAfter可以看作是：找到obj的下一个元素，调用addBefore</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br><span class="hljs-keyword">if</span>(obj.equals(elementData[i]))<br><span class="hljs-keyword">return</span> addBefore(elementData[i + <span class="hljs-number">1</span>], e);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>Object remove_obj = elementData[i];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i; j &lt; size; j++) &#123;<br>elementData[j] = elementData[j+<span class="hljs-number">1</span>];<br>&#125;<br>size--;<br><span class="hljs-keyword">return</span> remove_obj;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = indexOf(e);<br><span class="hljs-keyword">if</span>( index &gt;= <span class="hljs-number">0</span>) &#123;<br>remove(index);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br>elementData[i] = e;<br><span class="hljs-keyword">return</span> e;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"[]"</span>;<br>&#125;<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"["</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(i != size - <span class="hljs-number">1</span>) &#123;<br>builder.append(elementData[i] + <span class="hljs-string">","</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>builder.append(elementData[i]);<br>&#125;<br>&#125;<br>builder.append(<span class="hljs-string">"]"</span>);<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="TestArrayList-类"><a href="#TestArrayList-类" class="headerlink" title="TestArrayList 类"></a>TestArrayList 类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestArrayList</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>ArrayList list = <span class="hljs-keyword">new</span> ArrayList();<br>list.add(<span class="hljs-number">123</span>);<br>list.add(<span class="hljs-number">321</span>);<br>list.add(<span class="hljs-number">456</span>);<br>list.add(<span class="hljs-number">654</span>);<br>list.add(<span class="hljs-number">678</span>);<br>list.add(<span class="hljs-number">789</span>);<br>list.add(<span class="hljs-number">678</span>);<br>list.add(<span class="hljs-number">5</span>, <span class="hljs-number">666</span>);<br><br>System.out.println(list.size());<br>System.out.println(list.isEmpty());<br>System.out.println(list.get(<span class="hljs-number">2</span>));<br>System.out.println(list.toString());<br>System.out.println(list.contains(<span class="hljs-number">678</span>));<br>System.out.println(list.addBefore(<span class="hljs-number">321</span>, <span class="hljs-number">777</span>));<br>System.out.println(list.addAfter(<span class="hljs-number">321</span>, <span class="hljs-number">777</span>));<br>System.out.println(list.toString());<br>System.out.println(list.get(<span class="hljs-number">2</span>));<br>System.out.println(list.remove(<span class="hljs-number">0</span>));<br>System.out.println(list.toString());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. 用 C 语言模拟实现 ArrayList 基本操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><br></code></pre></td></tr></table></figure></div><h1 id="LinkedList-实现"><a href="#LinkedList-实现" class="headerlink" title="LinkedList 实现"></a>LinkedList 实现</h1><blockquote><ul><li>LinkedList 底层是双向链表</li><li>我们用单项链表实现 MyLinkedList</li></ul></blockquote><p>Ⅰ. 用 Java 模拟实现 LinkedList 基本操作</p><h2 id="LinkedList-类"><a href="#LinkedList-类" class="headerlink" title="LinkedList 类"></a>LinkedList 类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedList</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">List</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> Node head; <span class="hljs-comment">// 头节点，不存储数据，为了编程</span><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> size;  <span class="hljs-comment">// 一共有几个节点</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SingleLinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>head = <span class="hljs-keyword">new</span> Node();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br><span class="hljs-comment">// 和顺序表不一样，要从头节点逐个开始查找</span><br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> p.data;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object e)</span> </span>&#123;<br>Node p = head.next;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(e))<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object e)</span> </span>&#123;<br>Node p = head.next;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(e))<br><span class="hljs-keyword">return</span> i;<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 如果i的位置错误，报错</span><br><span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || i &gt; size) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyArrayIndexOutOfBoundsException(<span class="hljs-string">"数组指针越界异常: "</span> + i);<br>&#125;<br><span class="hljs-comment">// 找到前一个节点，从head开始找</span><br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>p = p.next;<br>&#125;<br><span class="hljs-comment">// 创建一个节点</span><br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br><span class="hljs-comment">// 指向新节点的直接后继</span><br>newNode.next = p.next;<br><span class="hljs-comment">// 指向新节点的直接前驱</span><br>p.next = newNode;<br>size++;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addBefore</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br>Node p = head.next;<br>Node pre = head;<br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br><span class="hljs-keyword">if</span>(obj == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">this</span>.add(size, e);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(obj)) &#123;<br>pre.next = newNode;<br>newNode.next = p;<br>size++;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br>p = p.next;<br>pre = pre.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addAfter</span><span class="hljs-params">(Object obj, Object e)</span> </span>&#123;<br><span class="hljs-comment">// 取obj的下一个元素进行addBefore操作</span><br>Node p = head.next;<br><span class="hljs-keyword">while</span>(p.next != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">if</span>(p.data.equals(obj))<br><span class="hljs-keyword">return</span> addBefore(p.next.data, e);<br>p = p.next;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>p = p.next;<br>Node remove_obj = p.next;<br>p.next = p.next.next;<br>size--;<br><span class="hljs-keyword">return</span> remove_obj;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object e)</span> </span>&#123;<br><span class="hljs-keyword">int</span> index = indexOf(e);<br><span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span>) &#123;<br>remove(index);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">replace</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, Object e)</span> </span>&#123;<br>Node newNode = <span class="hljs-keyword">new</span> Node(e);<br>Node p = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>p = p.next;<br>Node old = p.next;<br>newNode.next = p.next.next;<br>p.next = newNode;<br><span class="hljs-keyword">return</span> old;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"[]"</span>;<br>&#125;<br>StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder(<span class="hljs-string">"["</span>);<br>Node p = head.next;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br><span class="hljs-keyword">if</span>(i != size - <span class="hljs-number">1</span>) &#123;<br>builder.append(p.data + <span class="hljs-string">","</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>builder.append(p.data);<br>&#125;<br>p = p.next;<br>&#125;<br>builder.append(<span class="hljs-string">"]"</span>);<br><span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="TestLinkedList-类"><a href="#TestLinkedList-类" class="headerlink" title="TestLinkedList 类"></a>TestLinkedList 类</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.linetable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSingleLinkedList</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br>SingleLinkedList list = <span class="hljs-keyword">new</span> SingleLinkedList();<br>list.add(<span class="hljs-string">"123"</span>);<br>list.add(<span class="hljs-string">"321"</span>);<br>list.add(<span class="hljs-string">"456"</span>);<br>list.add(<span class="hljs-string">"654"</span>);<br>list.add(<span class="hljs-string">"678"</span>);<br>list.add(<span class="hljs-string">"789"</span>);<br>list.add(<span class="hljs-string">"678"</span>);<br><br>System.out.println(list.toString());<br><br>list.add(<span class="hljs-number">2</span>, <span class="hljs-string">"666"</span>);<br><br>System.out.println(list.size());<br>System.out.println(list.isEmpty());<br>System.out.println(list.get(<span class="hljs-number">5</span>));<br>System.out.println(list.toString());<br><br>System.out.println(list.contains(<span class="hljs-string">"678"</span>));<br>System.out.println(list.contains(<span class="hljs-string">"66666"</span>));<br><br>System.out.println(<span class="hljs-string">"addBefore  "</span> + list.addBefore(<span class="hljs-string">"123"</span>, <span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addBefore  "</span> + list.toString());<br><br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.addAfter(<span class="hljs-string">"678"</span>, <span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.toString());<br><br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.remove(<span class="hljs-string">"456"</span>));<br>System.out.println(<span class="hljs-string">"addAfter   "</span> + list.toString());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. 用 C 语言模拟实现 LinkedList 基本操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><br><br></code></pre></td></tr></table></figure></div><h1 id="其他线性表"><a href="#其他线性表" class="headerlink" title="其他线性表"></a>其他线性表</h1><blockquote><ul><li>一般为了编程方便，头节点和尾节点（如果存在）是不存储数据的</li><li>为了保持算法的一致性，有时添加首尾节点</li></ul></blockquote><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p><a href="https://img.webpro.ltd/picbed/img/datastructure_2.4-1.png" data-fancybox="group" data-caption="双向链表" class="fancybox"><img alt="双向链表" title="双向链表" data-src="https://img.webpro.ltd/picbed/img/datastructure_2.4-1.png" class="lazyload"></a></p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p><a href="https://img.webpro.ltd/picbed/img/datastructure_2.4-2.png" data-fancybox="group" data-caption="循环链表" class="fancybox"><img alt="循环链表" title="循环链表" data-src="https://img.webpro.ltd/picbed/img/datastructure_2.4-2.png" class="lazyload"></a></p><h2 id="Java-中"><a href="#Java-中" class="headerlink" title="Java 中"></a>Java 中</h2><ul><li>Vector 顺序表</li><li>ArrayList 顺序表</li><li>LinkedList 双向链表</li></ul><p>Vector、ArrayList 底层均为可变长度的数组。Vector 线程安全，效率低，已基本弃用；ArrayList 线程不安全，效率高。ArrayList 扩容策略为每次扩容原长度的 50%。</p><hr><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>本节分为</p><ul><li>栈（Stack）</li><li>队列（Quene）</li><li>Java 中的栈和队列</li><li>Disruptor 并发框架中的 Quene</li></ul><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><blockquote><ul><li>操作受限的线性表</li></ul></blockquote><ul><li>先进后出，删除与加入均在栈顶操作</li><li>栈也称为堆栈，是一种线性表。</li><li>堆栈的特性： 最先放入堆栈中的内容最后被拿出来，最后放入堆栈中的内容最先被拿出来， 被称为先进后出、后进先出。</li><li>堆栈中两个最重要的操作是 PUSH 和 POP，两个是相反的操作。</li><li>PUSH：在堆栈的顶部加入一 个元素。</li><li>POP：在堆栈顶部移去一个元素， 并将堆栈的大小减一。</li></ul><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_3.1-2.jpg" data-fancybox="group" data-caption="栈2" class="fancybox"><img alt="栈2" title="栈2" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.1-2.jpg" class="lazyload"></a></li><li><a href="https://img.webpro.ltd/picbed/img/datastructure_3.1-1.jpg" data-fancybox="group" data-caption="栈1" class="fancybox"><img alt="栈1" title="栈1" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.1-1.jpg" class="lazyload"></a></li></ul><p>其限制是仅允许在表的一端进行插入、删除操作，不允许在其他任何地方进行插入、删除操作。表中进行插入删除的一端称为栈顶（top），栈顶保存的元素称为栈顶元素。相对于表的另一端成为栈底（bottom）。</p><ul><li>插入操作 -&gt; 入栈</li><li>删除操作 -&gt; 出栈</li><li>专业词汇：push 入栈，pop 出栈，peek 栈顶元素</li></ul><h2 id="栈的接口"><a href="#栈的接口" class="headerlink" title="栈的接口:"></a>栈的接口:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Stack</span> </span>&#123;<br><br>    <span class="hljs-comment">// 获取元素数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 入栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 出栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 取栈顶元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="队列（Quene）"><a href="#队列（Quene）" class="headerlink" title="队列（Quene）"></a>队列（Quene）</h1><p>队列(Queue)也是一种运算受限的线性表，它的运算限制与栈不同，是两头都有限制，插入只能在表的一端进行(只进不出)，而删除只能在表的另一端进行(只出不进)，允许删除的一端称为队尾(rear)，允许插入的一端称为队头 (Front),队列的操作原则是<strong>先进先出</strong>的，所以队列又称作 FIFO 表(First In First Out)</p><ul><li><p>顺序存储</p></li><li><p><a href="https://img.webpro.ltd/picbed/img/datastructure_3.2-1.jpg" data-fancybox="group" data-caption="顺序存储" class="fancybox"><img alt="顺序存储" title="顺序存储" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.2-1.jpg" class="lazyload"></a></p></li><li><p>环形队列</p></li><li><p><a href="https://img.webpro.ltd/picbed/img/datastructure_3.2-3.jpg" data-fancybox="group" data-caption="环形队列" class="fancybox"><img alt="环形队列" title="环形队列" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.2-3.jpg" class="lazyload"></a></p></li><li><p><a href="https://img.webpro.ltd/picbed/img/datastructure_3.2-2.jpg" data-fancybox="group" data-caption="环形队列" class="fancybox"><img alt="环形队列" title="环形队列" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.2-2.jpg" class="lazyload"></a></p></li></ul><ul><li>技术案例：多线程中的就绪队列和阻塞队列</li><li>主要操作：入队、出队</li></ul><h2 id="队列的接口"><a href="#队列的接口" class="headerlink" title="队列的接口:"></a>队列的接口:</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Quene</span> </span>&#123;<br><br>    <span class="hljs-comment">// 获取队列长度</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 队列是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> bollean <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 入队</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">enquence</span><span class="hljs-params">(Object e)</span></span>;<br><br>    <span class="hljs-comment">// 出队</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">dequence</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">// 取队首元素</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="其他队列"><a href="#其他队列" class="headerlink" title="其他队列"></a>其他队列</h2><h2 id="双端队列-Deque"><a href="#双端队列-Deque" class="headerlink" title="双端队列 Deque"></a>双端队列 Deque</h2><ul><li><p><a href="https://img.webpro.ltd/picbed/img/datastructure_3.2-4.jpg" data-fancybox="group" data-caption="双端队列Deque" class="fancybox"><img alt="双端队列Deque" title="双端队列Deque" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.2-4.jpg" class="lazyload"></a></p></li><li><p><a href="https://img.webpro.ltd/picbed/img/datastructure_3.2-5.jpg" data-fancybox="group" data-caption="双端队列Deque" class="fancybox"><img alt="双端队列Deque" title="双端队列Deque" data-src="https://img.webpro.ltd/picbed/img/datastructure_3.2-5.jpg" class="lazyload"></a></p></li><li><blockquote><p>操作受限的双端队列 Deque</p></blockquote></li></ul><h1 id="Java-中的栈和队列类"><a href="#Java-中的栈和队列类" class="headerlink" title="Java 中的栈和队列类"></a>Java 中的栈和队列类</h1><ul><li>Stack 类： 已过时，因为 public class Stack&lt;E&gt; extends Vector&lt;E&gt;</li><li>Quene 队列类</li><li>Deque 双端队列（一般默认受限规则为栈操作）</li></ul><h2 id="例：用栈实现-10-进制转-2-进制"><a href="#例：用栈实现-10-进制转-2-进制" class="headerlink" title="例：用栈实现 10 进制转 2 进制"></a>例：用栈实现 10 进制转 2 进制</h2><p>Ⅰ. Java 语言实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.stackquene;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 10进制转换成2进制</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestConvert</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 给定一个10进制数</span><br><span class="hljs-keyword">int</span> n = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">// 定义一个空栈</span><br>Deque&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> LinkedList&lt;Integer&gt;();<br><br><span class="hljs-comment">// 把10进制数转2进制数</span><br><span class="hljs-keyword">int</span> t = n; <span class="hljs-comment">// 被除数</span><br><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">// 除以2求余数</span><br><span class="hljs-keyword">int</span> mod = t % <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// 输出余数</span><br><span class="hljs-comment">//System.out.println(mod);</span><br>stack.push(mod);<br><br><span class="hljs-comment">// 除以二得到商</span><br><span class="hljs-comment">// 使用商做被除数</span><br>t = t / <span class="hljs-number">2</span>;<br><br>&#125;<span class="hljs-keyword">while</span>(t &gt; <span class="hljs-number">0</span>); <span class="hljs-comment">// 商&gt;0</span><br><br><span class="hljs-comment">// 输出结果</span><br>System.out.print(n + <span class="hljs-string">"  --------&gt; "</span>);<br><span class="hljs-keyword">while</span>(!stack.isEmpty()) &#123;<br>System.out.print(stack.pop());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>Ⅱ. C 语言实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// I am C</span><br></code></pre></td></tr></table></figure></div><h1 id="Disruptor-并发框架中的-Quene"><a href="#Disruptor-并发框架中的-Quene" class="headerlink" title="Disruptor 并发框架中的 Quene"></a>Disruptor 并发框架中的 Quene</h1><p>Disruptor 框架介绍</p><ul><li><p>极高性能、并发、无锁的编程框架 - Disruptor</p></li><li><p>建立在 JVM 平台上</p></li><li><p>每秒可处理 6 百万订单[官方自述]</p></li><li><p>运行在内存中</p></li><li><p>采用事件源驱动方式</p></li><li><p>无锁的 Queue（高并发无锁队列事件）</p></li></ul><hr><p>[RingBuffer]是 Disruptor 的核心</p><p>RingBuffer 采用数组实现，无首尾指针</p><ul><li><p>Quene:</p></li><li><p><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281322545530346.png" data-fancybox="group" data-caption="Quene" class="fancybox"><img alt="Quene" title="Quene" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281322545530346.png" class="lazyload"></a></p></li><li><p>RingBuffer 是一个环形队列，起到缓存的效果：</p></li><li><p><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281328527622065.png" data-fancybox="group" data-caption="RingBuffer" class="fancybox"><img alt="RingBuffer" title="RingBuffer" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281328527622065.png" class="lazyload"></a> =&gt; <a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281330142821375.png" data-fancybox="group" data-caption="RingBuffer" class="fancybox"><img alt="RingBuffer" title="RingBuffer" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281330142821375.png" class="lazyload"></a></p></li></ul><p>随着不停的填充 RingBuffer，序号会一直增长，直到超过这个环的最大长度（会覆盖旧的序号）</p><p>如何计算序号指向的元素？采用 mod 运算，序号%长度=索引，例如计算上图 10 的索引，10%8=2，在第 2 的位置</p><p>关于设置环的最大长度。上图的环长度只有 8，在实际情况&gt;&gt;8。长度尽量设置成 2n，比如 1024、2048</p><p>为什么长度尽量设置成 2n？如此可采用”与”运算计算索引号，即序号&amp;(长度-1)=索引号，其效率要高于 mod 计算效率</p><p>通过”生产者-&gt;RingBuffer-&gt;消费者”运作，下图是一个最简单的处理链</p><ul><li><a href="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281339519490792.png" data-fancybox="group" data-caption="生产者-&gt;RingBuffer-&gt;消费者" class="fancybox"><img alt="生产者-&gt;RingBuffer-&gt;消费者" title="生产者-&gt;RingBuffer-&gt;消费者" data-src="https://www.webpro.ltd/blog/zb_users/upload/2019/05/201905281339519490792.png" class="lazyload"></a></li></ul><p>实际情况中，生产者和消费者必定是多个线程执行。</p><hr><h1 id="树和二叉树"><a href="#树和二叉树" class="headerlink" title="树和二叉树"></a>树和二叉树</h1><p>树的基本概念</p><h2 id="什么是树？"><a href="#什么是树？" class="headerlink" title="什么是树？"></a>什么是树？</h2><p>树状图是一种数据结构，它是由 n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。它具有以下的特点：<br>每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树；</p><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-1.png" data-fancybox="group" data-caption="树" class="fancybox"><img alt="树" title="树" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-1.png" class="lazyload"></a></li></ul><h2 id="树（tree）是包含-n（n-gt-0）个结点的有穷集，其中："><a href="#树（tree）是包含-n（n-gt-0）个结点的有穷集，其中：" class="headerlink" title="树（tree）是包含 n（n&gt;0）个结点的有穷集，其中："></a>树（tree）是包含 n（n&gt;0）个结点的有穷集，其中：</h2><blockquote><ul><li>（1）每个元素称为结点（node）；</li><li>（2）有一个特定的结点被称为根结点或树根（root）。</li><li>（3）除根结点之外的其余数据元素被分为 m（m≥0）个互不相交的集合 T1，T2，……Tm-1，其中每一个集合 Ti（1&lt;=i&lt;=m）本身也是一棵树，被称作原树的子树（subtree）。</li></ul></blockquote><h2 id="下面的关于-Tree-的术语主要来自维基百科"><a href="#下面的关于-Tree-的术语主要来自维基百科" class="headerlink" title="下面的关于 Tree 的术语主要来自维基百科"></a>下面的关于 Tree 的术语主要来自维基百科</h2><table><thead><tr><th>术语</th><th>中文</th><th>描述</th></tr></thead><tbody><tr><td>Root</td><td>根节点</td><td>The top node in a tree.</td></tr><tr><td>Child</td><td>子节点</td><td>A node directly connected to another node when moving away from the Root.</td></tr><tr><td>Leaf</td><td>叶子节点</td><td>A node with no children</td></tr><tr><td>Edge</td><td>边</td><td>The connection between one node and another.</td></tr><tr><td>Path</td><td>路径</td><td>A sequence of nodes and edges connecting a node with a descendant.</td></tr><tr><td>Height</td><td>节点高度</td><td>The height of a node is the number of edges on the longest path between that node and a leaf.</td></tr><tr><td>Level</td><td>层级</td><td>The level of a node is defined by 1 + (the number of connections between the node and the root).</td></tr><tr><td>Depth</td><td>深度</td><td>The depth of a node is the number of edges from the tree’s root node to the node.</td></tr><tr><td>Degree</td><td>度</td><td>The number of subtrees of a node.</td></tr></tbody></table><h2 id="相关术语-中文版"><a href="#相关术语-中文版" class="headerlink" title="相关术语 中文版"></a>相关术语 中文版</h2><ul><li>节点的度：一个节点含有的子树的个数称为该节点的度；</li><li>叶节点或终端节点：度为 0 的节点称为叶节点；</li><li>非终端节点或分支节点：度不为 0 的节点；</li><li>双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；</li><li>孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；</li><li>兄弟节点：具有相同父节点的节点互称为兄弟节点；</li><li>树的度：一棵树中，最大的节点的度称为树的度；</li><li>节点的层次：从根开始定义起，根为第 1 层，根的子节点为第 2 层，以此类推；</li><li>树的高度或深度：树中节点的最大层次；</li><li>堂兄弟节点：双亲在同一层的节点互为堂兄弟；</li><li>节点的祖先：从根到该节点所经分支上的所有节点；</li><li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。</li><li>森林：由 m（m&gt;=0）棵互不相交的树的集合称为森林；</li></ul><hr><h2 id="下面通过几个图解释树的几个比较重要的概念"><a href="#下面通过几个图解释树的几个比较重要的概念" class="headerlink" title="下面通过几个图解释树的几个比较重要的概念"></a>下面通过几个图解释树的几个比较重要的概念</h2><h2 id="Edge、Root、Leaf"><a href="#Edge、Root、Leaf" class="headerlink" title="Edge、Root、Leaf"></a>Edge、Root、Leaf</h2><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-2.png" data-fancybox="group" data-caption="Edge、Root、Leaf" class="fancybox"><img alt="Edge、Root、Leaf" title="Edge、Root、Leaf" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-2.png" class="lazyload"></a></li></ul><h2 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h2><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-3.png" data-fancybox="group" data-caption="Path" class="fancybox"><img alt="Path" title="Path" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-3.png" class="lazyload"></a></li></ul><h2 id="Height"><a href="#Height" class="headerlink" title="Height"></a>Height</h2><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-4.png" data-fancybox="group" data-caption="Height" class="fancybox"><img alt="Height" title="Height" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-4.png" class="lazyload"></a></li></ul><p>需要注意的是叶子节点的高度为 0，如果树只有一个节点，那么这个节点的高也是 0</p><h2 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h2><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-5.png" data-fancybox="group" data-caption="Depth" class="fancybox"><img alt="Depth" title="Depth" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-5.png" class="lazyload"></a></li></ul><p>需要注意的是根节点的深度（Depth）是 0.</p><p>从 Height 和 Depth 的对比，它们的方向刚好是相反的。<br>对于 Height 和 Depth 不用死记，我们可以把树倒过来看，也就是我们现实生活当中的树，求某个节点的 Height 那肯定是从根部往上的方向；<br>如果是求某个节点的深度，方向肯定是向下的。</p><h2 id="Level"><a href="#Level" class="headerlink" title="Level"></a>Level</h2><ul><li><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-6.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-6.png" class="lazyload"></a></li></ul><p>节点的 Level 是从 1 开始的，Level = Depth+1，根节点的 Level=1</p><p>也有很多书籍上 Level 是从 0 开始的，这样的话 Level 就等于 Depth，根节点的 Level=0</p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是一个每个最结最多只能有两个分支的树，左边的分支称之为左子树，右边的分支称之为右子树。</p><p>也就是说二叉树节点的度最大也就是 2，而普通的树，节点的度是没有限制的。</p><h1 id="二叉树的分类"><a href="#二叉树的分类" class="headerlink" title="二叉树的分类"></a>二叉树的分类</h1><h2 id="完美-满二叉树-Perfect-Binary-Tree"><a href="#完美-满二叉树-Perfect-Binary-Tree" class="headerlink" title="完美/满二叉树(Perfect Binary Tree)"></a>完美/满二叉树(Perfect Binary Tree)</h2><p>完美二叉树（满二叉树）。完美二叉树满足两个特性：</p><ol><li>所有的几点都包含两个子节点</li><li>所有的叶子节点的 Height 或者 Level 都相等</li></ol><p>例：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-7.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-7.png" class="lazyload"></a></p><h2 id="完全二叉树-Complete-Binary-Tree"><a href="#完全二叉树-Complete-Binary-Tree" class="headerlink" title="完全二叉树(Complete Binary Tree)"></a>完全二叉树(Complete Binary Tree)</h2><p>完全二叉树是 除了最后一层都是满的（都有两个子节点），并且最后一层的节点是从左往右排列的。<br>完全二叉树，通俗点说就是节点按层从左往右排列。如果最后一层排满了就是完美二叉树，没有满则是完全二叉树。<br>所以完美二叉树一定是完全二叉树，完全二叉树不一定是完美二叉树。</p><p>一个完全二叉树可以高效的使用数组来表示。</p><p>例：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-8.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-8.png" class="lazyload"></a></p><h1 id="完满二叉树-Full-Binary-Tree"><a href="#完满二叉树-Full-Binary-Tree" class="headerlink" title="完满二叉树(Full Binary Tree)"></a>完满二叉树(Full Binary Tree)</h1><p>完满二叉树就简单了，就是每个节点都有两个子节点。也就是说它比完美二叉树少了一个条件。</p><p>例：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.0-9.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.0-9.png" class="lazyload"></a></p><h1 id="二叉树实现"><a href="#二叉树实现" class="headerlink" title="二叉树实现"></a>二叉树实现</h1><h2 id="二叉树的遍历策略"><a href="#二叉树的遍历策略" class="headerlink" title="二叉树的遍历策略"></a>二叉树的遍历策略</h2><blockquote><p>将整个二叉树分为三部分</p><blockquote><ul><li>根</li><li>左子树</li><li>右子树</li></ul></blockquote></blockquote><blockquote><p>遍历方式</p><blockquote><ul><li>方式一<blockquote><ul><li>先序（根）遍历 根-&gt;左子-&gt;右子</li><li>中序（根）遍历 左子-&gt;根-&gt;右子</li><li>后序（根）遍历 左子-&gt;右子-&gt;根</li></ul></blockquote></li><li>方式二<blockquote><ul><li>按层次遍历</li></ul></blockquote></li></ul></blockquote></blockquote><h2 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h2><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.2-1.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.2-1.png" class="lazyload"></a></p><ul><li>先序遍历（DLR）: 1 4 5 2 3 6 7</li><li>中序遍历（LDR）: 4 5 1 3 2 6 7</li><li>后序遍历（LRD）: 5 4 3 7 6 2 1</li></ul><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p>已知某二叉树，其<br>后序遍历结果为：5 4 3 7 6 2 1，<br>中序遍历结果为：4 5 1 3 2 6 7，<br>求其先序遍历（DLR）结果？</p><p>解：</p><p>∵ 后序遍历顺序为左子-&gt;右子-&gt;根</p><p>∴ 可知 root 节点为 1</p><p>由中序遍历结果得下图</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.2-2.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.2-2.png" class="lazyload"></a></p><p>在分析根 1 的左子树，由于 4 5 是按照中序遍历排列，可推得<br><strong>4 为左子树的根，5 为左子树的根的右子</strong><br>或者<br><strong>5 为左子树的根，4 为左子树根的左子</strong></p><p>由于在后序遍历中排列顺序为 5 4 3 7 6 2 1，<br>5 4 是根 1 的左子树，顺序为左子-&gt;右子-&gt;根，由于左子树至少有根，因此排列顺序为右子-&gt;根，即得到如下图：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.2-3.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.2-3.png" class="lazyload"></a></p><p>现在我们来分析 root 的右子树排列状态：</p><p>由后序遍历结果 3 7 6 2 得 2 为右子树得根，又中序遍历结果为 3 2 6 7<br>因此我们可以得出下图：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.2-4.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.2-4.png" class="lazyload"></a></p><p>后序遍历结果 6 7 ， 中序遍历结果 7 6，易得 7 为根，6 为右子，得出二叉树图形为：</p><p><a href="https://img.webpro.ltd/picbed/img/datastructure_4.2-1.png" data-fancybox="group" data-caption="Level" class="fancybox"><img alt="Level" title="Level" data-src="https://img.webpro.ltd/picbed/img/datastructure_4.2-1.png" class="lazyload"></a></p><p>得先序遍历结果为：<strong>1 4 5 2 3 6 7</strong></p><hr><h2 id="按层次遍历（广度优先搜索）"><a href="#按层次遍历（广度优先搜索）" class="headerlink" title="按层次遍历（广度优先搜索）"></a>按层次遍历（广度优先搜索）</h2><p>结果为 <strong>1 4 2 5 3 6 7</strong></p><h1 id="二叉树接口"><a href="#二叉树接口" class="headerlink" title="二叉树接口"></a>二叉树接口</h1><h2 id="二叉链表节点"><a href="#二叉链表节点" class="headerlink" title="二叉链表节点"></a>二叉链表节点</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.btree;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉链表的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> Object value;     <span class="hljs-comment">// 节点值</span><br><span class="hljs-keyword">public</span> Node leftChild;   <span class="hljs-comment">// 左子树引用</span><br><span class="hljs-keyword">public</span> Node rightChild;  <span class="hljs-comment">// 右子树引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object value, Node leftChild, Node rightChild)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.value = value;<br><span class="hljs-keyword">this</span>.leftChild = leftChild;<br><span class="hljs-keyword">this</span>.rightChild = rightChild;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object value)</span> </span>&#123;<br><span class="hljs-keyword">super</span>();<br><span class="hljs-keyword">this</span>.value = value;<br><span class="hljs-keyword">this</span>.leftChild = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">this</span>.rightChild = <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">"Node [value="</span> + value + <span class="hljs-string">", leftChild="</span> + leftChild + <span class="hljs-string">", rightChild="</span> + rightChild + <span class="hljs-string">"]"</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="二叉树接口-1"><a href="#二叉树接口-1" class="headerlink" title="二叉树接口"></a>二叉树接口</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.webpro.btree;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二叉树的接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> suxia</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BinaryTree</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 是否空树</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 树节点数量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取二叉树的高度</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询指定值的节点</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">findKey</span><span class="hljs-params">(Object value)</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 前序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后序递归遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderTraverse</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 中序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 前序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 后序遍历非递归操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrderByStack</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 按照层次遍历二叉树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">levelOrderByStack</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="二叉树操作"><a href="#二叉树操作" class="headerlink" title="二叉树操作"></a>二叉树操作</h1><blockquote><p>未完待续</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;!-- # Introduction --&gt;

&lt;ul&gt;
&lt;li&gt;数据结构入门&lt;/li&gt;
&lt;li&gt;Powered by Bill
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.webpro.ltd/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构 算法" scheme="http://blog.webpro.ltd/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux c 程序设计考试 复习</title>
    <link href="http://blog.webpro.ltd/2019/08/09/Linux-c-review1/"/>
    <id>http://blog.webpro.ltd/2019/08/09/Linux-c-review1/</id>
    <published>2019-08-08T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="匹配字符串在文件中出现的行号"><a href="#匹配字符串在文件中出现的行号" class="headerlink" title="匹配字符串在文件中出现的行号"></a>匹配字符串在文件中出现的行号</h1><blockquote><p>打开一文本文件，给出字符串(char *pattern)在文件哪些行出现过，在屏幕上显示匹配的行号和该行文本。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><figcaption><span>findstr.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">computed</span><span class="hljs-params">(FILE *fd, <span class="hljs-keyword">char</span> *pattern)</span></span>&#123;<br>    <span class="hljs-comment">// windows 中 换行符为 \r\n</span><br>    <span class="hljs-comment">// unix 中 换行符为 \n</span><br>    <span class="hljs-comment">// 因此可以使用 \n 作为统一换行标志</span><br><br>    <span class="hljs-keyword">char</span> ch;                            <span class="hljs-comment">// 单字符缓存</span><br>    <span class="hljs-keyword">int</span> line = <span class="hljs-number">1</span>;                       <span class="hljs-comment">// 当前行数</span><br>    <span class="hljs-keyword">char</span> current_line_content[<span class="hljs-number">256</span>];     <span class="hljs-comment">// 当前行字符串缓存</span><br>    <span class="hljs-keyword">int</span> temp_idx = <span class="hljs-number">0</span>;                   <span class="hljs-comment">// 当前行的匹配列数</span><br>    <span class="hljs-keyword">int</span> current_idx = <span class="hljs-number">0</span>;                <span class="hljs-comment">// 当前行的列数</span><br>    <span class="hljs-keyword">int</span> current_status = <span class="hljs-number">0</span>;             <span class="hljs-comment">// 当前行无匹配成功状态 当一行中有一个匹配后，就不再对其后面的字符串进行比较了</span><br><br>    <span class="hljs-keyword">while</span>((ch = fgetc(fd)) != EOF)&#123;<br>        <span class="hljs-comment">// 换行后行数+1</span><br>        <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'\n'</span>)&#123;<br>            <span class="hljs-keyword">if</span>(current_status)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">"line[%d], content[%s]\n"</span>, line, current_line_content);<br>                current_status = <span class="hljs-number">0</span>;<br>            &#125;<br>            line++;<br>            <span class="hljs-built_in">memset</span>(current_line_content, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(current_line_content));<br>            current_idx = <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch == <span class="hljs-string">'\r'</span>)&#123;<br>            <span class="hljs-comment">// 对于win系统忽略掉\r</span><br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            current_line_content[current_idx] = ch;<br>            current_idx++;<br>            <span class="hljs-keyword">if</span>(!current_status)&#123;<br>                <span class="hljs-keyword">if</span>(ch == pattern[temp_idx])&#123;<br>                    temp_idx++;<br>                    <span class="hljs-keyword">if</span>(pattern[temp_idx] == <span class="hljs-string">'\0'</span>)&#123;<br>                        <span class="hljs-comment">// 匹配成功</span><br>                        temp_idx = <span class="hljs-number">0</span>;<br>                        current_status = <span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-comment">// 不匹配从头来</span><br>                    temp_idx = <span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span>&#123;<br><br>    <span class="hljs-keyword">if</span>(argc != <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">// 第 0 个参数是运行的文件名</span><br>        perror(<span class="hljs-string">"请传参: ./main filename pattern"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">char</span>* file_name = (<span class="hljs-keyword">char</span>*)argv[<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">char</span>* pattern   = (<span class="hljs-keyword">char</span>*)argv[<span class="hljs-number">2</span>];<br><br>    FILE *fd;     <span class="hljs-comment">// 文件句柄</span><br><br>    <span class="hljs-keyword">if</span>((fd = fopen(file_name, <span class="hljs-string">"r"</span>)) == <span class="hljs-literal">NULL</span>)&#123;<br>        perror(<span class="hljs-string">"文件打开失败"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    computed(fd, pattern);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试匹配的文件：find"><a href="#测试匹配的文件：find" class="headerlink" title="测试匹配的文件：find"></a>测试匹配的文件：find</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><figcaption><span>file find</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">Mr. liu, would you care for another helping? No more, thank you. I'm quite full.<br>Did you enjoy the meal? I'm so glad you like it. Thank you very much for your<br>hospitality.<br></code></pre></td></tr></table></figure></div><h2 id="编译程序"><a href="#编译程序" class="headerlink" title="编译程序"></a>编译程序</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ -o findstr findstr.c<br></code></pre></td></tr></table></figure></div><h2 id="测试-1-在-find-文件中查找包含-you-字符串的行并输出"><a href="#测试-1-在-find-文件中查找包含-you-字符串的行并输出" class="headerlink" title="测试 1 在 find 文件中查找包含 you 字符串的行并输出"></a>测试 1 在 find 文件中查找包含 you 字符串的行并输出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find you</span><br>line[1], content[Mr. liu, would you care <span class="hljs-keyword">for</span> another helping?]<br>line[2], content[No more, thank you. I<span class="hljs-string">'m quite full.]</span><br><span class="hljs-string">line[3], content[Did you enjoy the meal?]</span><br><span class="hljs-string">line[4], content[I'</span>m so glad you like it.]<br>line[5], content[Thank you very much <span class="hljs-keyword">for</span> your hospitality.]<br></code></pre></td></tr></table></figure></div><h2 id="测试-2-在-find-文件中查找包含-Mr-字符串的行并输出"><a href="#测试-2-在-find-文件中查找包含-Mr-字符串的行并输出" class="headerlink" title="测试 2 在 find 文件中查找包含 Mr 字符串的行并输出"></a>测试 2 在 find 文件中查找包含 Mr 字符串的行并输出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find Mr</span><br>line[1], content[Mr. liu, would you care <span class="hljs-keyword">for</span> another helping?]<br></code></pre></td></tr></table></figure></div><h2 id="测试-3-输入一个不存在的文件"><a href="#测试-3-输入一个不存在的文件" class="headerlink" title="测试 3 输入一个不存在的文件"></a>测试 3 输入一个不存在的文件</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find2 you</span><br>文件打开失败: No such file or directory<br></code></pre></td></tr></table></figure></div><h2 id="测试-4-输入错误的参数个数"><a href="#测试-4-输入错误的参数个数" class="headerlink" title="测试 4 输入错误的参数个数"></a>测试 4 输入错误的参数个数</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./findstr find</span><br>请传参: ./main filename pattern: Success<br></code></pre></td></tr></table></figure></div><h1 id="父子进程管道通讯"><a href="#父子进程管道通讯" class="headerlink" title="父子进程管道通讯"></a>父子进程管道通讯</h1><h2 id="方式-1-重定向-I-O"><a href="#方式-1-重定向-I-O" class="headerlink" title="方式 1 重定向 I/O"></a>方式 1 重定向 I/O</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><figcaption><span>pipe1.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>]; <span class="hljs-comment">// fd[0]为读 fd[1]为写</span><br>    <span class="hljs-keyword">pid_t</span> pid;<br><br>    <span class="hljs-comment">/*创建管道 */</span><br>    <span class="hljs-keyword">if</span>(pipe(fd) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to pipe"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*创建子进程 */</span><br>    <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to fork"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid != <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 父进程</span><br>        close(fd[<span class="hljs-number">0</span>]);<br>        dup(fd[<span class="hljs-number">1</span>]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"我是父进程"</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 子进程</span><br>        close(fd[<span class="hljs-number">1</span>]);<br>        dup(fd[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">char</span> str[<span class="hljs-number">256</span>];<br>        fgets(str, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试运行"><a href="#测试运行" class="headerlink" title="测试运行"></a>测试运行</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./run pipe1</span><br><br>--------- project pipe1 start ---------<br><br>我是父进程<br>--------- project pipe1 end ---------<br></code></pre></td></tr></table></figure></div><h2 id="方式-2-标准方法"><a href="#方式-2-标准方法" class="headerlink" title="方式 2 标准方法"></a>方式 2 标准方法</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">cpp</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUFSZ PIPE_BUF <span class="hljs-comment">/* PIPE_BUF 管道默认一次性读写数据的长度 , PIPE_BUF大小为&lt;limits.h&gt;中规定*/</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>]; <span class="hljs-comment">// fd[0]为读 fd[1]为写</span><br>    <span class="hljs-keyword">char</span> buf[BUFSZ];<br>    <span class="hljs-keyword">pid_t</span> pid;<br>    <span class="hljs-keyword">ssize_t</span> len;<br><br>    <span class="hljs-comment">/*创建管道 */</span><br>    <span class="hljs-keyword">if</span>(pipe(fd) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to pipe"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/*创建子进程 */</span><br>    <span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)&#123;<br>        perror(<span class="hljs-string">"fail to fork"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)&#123;<br>        close(fd[<span class="hljs-number">0</span>]);                         <span class="hljs-comment">/*父进程中关闭管道的读出端*/</span><br>        write(fd[<span class="hljs-number">1</span>], <span class="hljs-string">"我是父进程\n"</span>, <span class="hljs-number">20</span>);  <span class="hljs-comment">/*父进程向管道写入数据*/</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        close(fd[<span class="hljs-number">1</span>]);                   <span class="hljs-comment">/*子进程中关闭管道的写入端*/</span><br>        len = read(fd[<span class="hljs-number">0</span>], buf, BUFSZ);  <span class="hljs-comment">/*子进程读取管道数据*/</span><br>        <span class="hljs-keyword">if</span>(len &lt; <span class="hljs-number">0</span>)&#123;<br>            perror ( <span class="hljs-string">"process failed when read a pipe "</span> );<br>            <span class="hljs-built_in">exit</span>( <span class="hljs-number">1</span> );<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            write(STDOUT_FILENO, buf, len);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="测试运行-1"><a href="#测试运行-1" class="headerlink" title="测试运行"></a>测试运行</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:/mnt/d/phpStudy/WWW/vsCode/linux/c/<span class="hljs-built_in">test</span><span class="hljs-comment"># ./run pipe</span><br><br>--------- project pipe start ---------<br><br>我是父进程<br><br>--------- project pipe end ---------<br></code></pre></td></tr></table></figure></div><h2 id="附：run-脚本代码-兼容运行带-MySQL-操作头的代码编译"><a href="#附：run-脚本代码-兼容运行带-MySQL-操作头的代码编译" class="headerlink" title="附：run 脚本代码(兼容运行带 MySQL 操作头的代码编译)"></a>附：run 脚本代码(兼容运行带 MySQL 操作头的代码编译)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">"\n--------- project <span class="hljs-variable">$1</span> start ---------\n"</span><br>g++ -o <span class="hljs-variable">$1</span> <span class="hljs-variable">$1</span>.c `mysql_config --cflags --libs`;./<span class="hljs-variable">$1</span>;<span class="hljs-built_in">echo</span> <span class="hljs-string">"\n--------- project <span class="hljs-variable">$1</span> end ---------\n"</span><br>rm <span class="hljs-variable">$1</span>;<br></code></pre></td></tr></table></figure></div><h1 id="ls-l-命令结果说明"><a href="#ls-l-命令结果说明" class="headerlink" title="ls -l 命令结果说明"></a>ls -l 命令结果说明</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>例如</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@webpro1 VmwareShare]<span class="hljs-comment"># ls -l</span><br>总用量 88<br>-rwxrwxrwx. 1 root root 88204 8月   9 08:49 mlocate.rpm<br>-rwxrwxrwx. 1 root root    56 8月   9 09:07 <span class="hljs-built_in">test</span><br>-rwxrwxrwx. 1 root root     7 8月   8 12:20 新文件~<br>-rwxrwxrwx. 1 root root    15 8月   8 20:02 新文件.txt<br></code></pre></td></tr></table></figure></div><ul><li>对于 - rwx rwx rwx 的第一列：</li></ul><table><thead><tr><th align="left">第一个属性</th><th align="left">文件类型</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">Linux 中最多的一种文件类型<br>包括纯文本文件(ASCII)；二进制文件(binary)；数据格式的文件(data);各种压缩文件。</td></tr><tr><td align="left">d</td><td align="left">二，目录文件类型</td></tr><tr><td align="left">c</td><td align="left">串行端口的接口设备，例如键盘、鼠标等等</td></tr><tr><td align="left">b</td><td align="left">可随机存储装置。<br>存储数据以供系统存取的接口设备，简单而言就是硬盘。<br>例如一号硬盘的代码是 /dev/hda1 等文件</td></tr><tr><td align="left">s</td><td align="left">套接字文件，这类文件通常用在网络数据连接。<br>可以启动一个程序来监听客户端的要求，客户端就可以通过套接字来进行数据通信，最常在 var/run 目录中看到这种文件类型。</td></tr><tr><td align="left">p</td><td align="left">管道文件。FIFO 也是一种特殊的文件类型，它主要的目的是，解决多个程序同时存取一个文件所造成的错误。FIFO 是 first-in-first-out(先进先出)的缩写。第一个属性为</td></tr><tr><td align="left">l</td><td align="left">链接文件，类似 Windows 下面的快捷方式。第一个属性为 [l]，例如 [lrwxrwxrwx]。</td></tr></tbody></table><ul><li><p>对于 - rwx rwx rwx 的第二、三、四列：</p></li><li><p>第二、三、四列分别代表拥有者 、群组 、其它组的权限设定</p></li><li><p>权限：rwx</p><ul><li>r - 读</li><li>w - 写</li><li>x - 运行</li></ul></li><li><p>rwx 对应的数字</p></li></ul><table><thead><tr><th>标志字母</th><th>代表数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table><ul><li>如何计算并设置权限<ul><li>常见的权限表示形式有：<ul><li>-rw——- (600) 只有拥有者有读写权限。</li><li>-rw-r–r– (644) 只有拥有者有读写权限；而属组用户和其他用户只有读权限。</li><li>-rwx—— (700) 只有拥有者有读、写、执行权限。</li><li>-rwxr-xr-x (755) 拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</li><li>-rwx–x–x (711) 拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</li><li>-rw-rw-rw- (666) 所有用户都有文件读、写权限。</li><li>-rwxrwxrwx (777) 所有用户都有读、写、执行权限。</li></ul></li><li>例 1:<code>rw-------</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rw-</td><td align="left">—</td><td align="left">—</td></tr><tr><td align="left">4+2+0</td><td align="left">0+0+0</td><td align="left">0+0+0</td></tr><tr><td align="left">6</td><td align="left">0</td><td align="left">0</td></tr></tbody></table></li><li>例 2:<code>rw-r--r--</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rw-</td><td align="left">r–</td><td align="left">r–</td></tr><tr><td align="left">4+2+0</td><td align="left">4+0+0</td><td align="left">4+0+0</td></tr><tr><td align="left">6</td><td align="left">4</td><td align="left">4</td></tr></tbody></table></li><li>例 3:<code>rwxrwxrwx</code><table><thead><tr><th align="left">拥有者</th><th align="left">群组</th><th align="left">其它组</th></tr></thead><tbody><tr><td align="left">rwx</td><td align="left">rwx</td><td align="left">rwx</td></tr><tr><td align="left">4+2+1</td><td align="left">4+2+1</td><td align="left">4+2+1</td></tr><tr><td align="left">7</td><td align="left">7</td><td align="left">7</td></tr></tbody></table></li></ul></li></ul><h1 id="reboot-和-init6-之间的区别"><a href="#reboot-和-init6-之间的区别" class="headerlink" title="reboot 和 init6 之间的区别"></a>reboot 和 init6 之间的区别</h1><ul><li><p>Linux 中重启的两个命令：reboot 和 init6 之间的区别</p></li><li><p>Init 6 是重新启动机器； reboot 也是重新启动机器；</p></li><li><p>那这两个命令到底有什么区别呢？</p><ul><li><p>对这两个操作使用 man 命令看到的内容如下：</p><ul><li><p>“init 6” 基于一系列/etc/inittab 文件，并且每个应用都会有一个相应 shutdown 脚本。</p></li><li><p>“init 6”调用一系列 shutdown 脚本(/etc/rc0.d/K*)来使系统优雅关机;</p></li><li><p>‘reboot’并不执行这些过程，reboot 更是一个 kernel 级别的命令，</p></li><li><p>不对应用使用 shutdown 脚本。</p></li><li><p>reboot - reboot performs a sync(1M) operation on the disks, andthen amulti- user reboot is initiated. See init(1M) fordetails.init 6 Stop the operating system and reboot to the state defined by the initdefault entry in /etc/inittab.</p></li><li><p>我们应该在通常情况下使用 init 6.</p></li><li><p>在出问题的状况下或强制重启时使用 reboot</p></li></ul></li></ul></li><li><p>Linux 系统有 7 个运行级别(runlevel)：</p><ul><li><p>运行级别 0：系统停机状态，系统默认运行级别不能设为 0，否则不能正常启动</p></li><li><p>运行级别 1：单用户工作状态，root 权限，用于系统维护，禁止远程登陆</p></li><li><p>运行级别 2：多用户状态(没有 NFS)</p></li><li><p>运行级别 3：完全的多用户状态(有 NFS)，登陆后进入控制台命令行模式</p></li><li><p>运行级别 4：系统未使用，保留</p></li><li><p>运行级别 5：X11 控制台，登陆后进入图形 GUI 模式</p></li><li><p>运行级别 6：系统正常关闭并重启，默认运行级别不能设为 6，否则不能正常启动</p></li></ul></li></ul><h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /</span><br>bin   cache  dev  home  lib    media  opt   root  sbin  srv  tmp  var<br>boot  data   etc  init  lib64  mnt    proc  run   snap  sys  usr<br></code></pre></td></tr></table></figure></div><h2 id="树状目录结构"><a href="#树状目录结构" class="headerlink" title="树状目录结构"></a>树状目录结构</h2><p><a href="https://img.webpro.ltd/picbed/img/20200312190212.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200312190212.png" class="lazyload"></a></p><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><table><thead><tr><th>目录名称</th><th>说明</th></tr></thead><tbody><tr><td>/bin</td><td>bin 是 Binary 的缩写, 这个目录存放着最经常使用的命令。</td></tr><tr><td>/boot</td><td>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</td></tr><tr><td>/dev</td><td>dev 是 Device(设备)的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</td></tr><tr><td>/etc</td><td>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</td></tr><tr><td>/home</td><td>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</td></tr><tr><td>/lib</td><td>这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</td></tr><tr><td>/lost+found</td><td>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</td></tr><tr><td>/media</td><td>linux 系统会自动识别一些设备，例如 U 盘、光驱等等，当识别后，linux 会把识别的设备挂载到这个目录下。</td></tr><tr><td>/mnt</td><td>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</td></tr><tr><td>/opt</td><td>这是给主机额外安装软件所摆放的目录。比如你安装一个 ORACLE 数据库则就可以放到这个目录下。默认是空的。</td></tr><tr><td>/proc</td><td>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，<br>比如可以通过下面的命令来屏蔽主机的 ping 命令，使别人无法 ping 你的机器：<code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></td></tr><tr><td>/root</td><td>该目录为系统管理员，也称作超级权限者的用户主目录。</td></tr><tr><td>/sbin</td><td>s 就是 Super User 的意思，这里存放的是系统管理员使用的系统管理程序。</td></tr><tr><td>/selinux</td><td>这个目录是 Redhat/CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放 selinux 相关的文件的。</td></tr><tr><td>/srv</td><td>该目录存放一些服务启动之后需要提取的数据。</td></tr><tr><td>/sys</td><td>这是 linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs。sysfs 文件系统集成了下面 3 种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</td></tr><tr><td>/tmp</td><td>这个目录是用来存放一些临时文件的。</td></tr><tr><td>/usr</td><td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</td></tr><tr><td>/usr/bin</td><td>系统用户使用的应用程序。</td></tr><tr><td>/usr/sbin</td><td>超级用户使用的比较高级的管理程序和系统守护程序。</td></tr><tr><td>/usr/src</td><td>内核源代码默认的放置目录。</td></tr><tr><td>/var</td><td>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</td></tr><tr><td>/run</td><td>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</td></tr></tbody></table><blockquote><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p></blockquote><ul><li>/etc： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</li><li>/bin, /sbin, /usr/bin, /usr/sbin: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</li><li>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除 root 外的通用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</li><li>/var： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外 mail 的预设放置也是在这里。</li></ul><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li>声明：本节大部分语法教程来自<a href="https://www.runoob.com" target="_blank" rel="noopener">runoob</a>，<code>runoob</code>版权所有，这里粘贴仅供学习</li></ul><h2 id="ls指令"><a href="#ls指令" class="headerlink" title="ls指令"></a><code>ls</code>指令</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxr-xr-x 0 root root 512 Jul  5 08:20 Desktop<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Documents<br>drwxr-xr-x 0 root root 512 Jun 20 07:17 Downloads<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Music<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Pictures<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Public<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Templates<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Videos<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /</span><br>bin   cache  dev  home  lib    media  opt   root  sbin  srv  tmp  var<br>boot  data   etc  init  lib64  mnt    proc  run   snap  sys  usr<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls</span><br>Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videosroot@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -a</span><br>.              .cache   Documents      .<span class="hljs-built_in">local</span>    Pictures  Public       .viminfo     .xsession-errors<br>..             .config  Downloads      .mozilla  .pki      Templates    .vnc<br>.bash_history  .dbus    .gvfs          Music     .presage  .thumbnails  .Xauthority<br>.bashrc        Desktop  .ICEauthority  .nano     .profile  Videos       .xsession<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls -l</span><br>total 0<br>drwxr-xr-x 0 root root 512 Jul  5 08:20 Desktop<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Documents<br>drwxr-xr-x 0 root root 512 Jun 20 07:17 Downloads<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Music<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Pictures<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Public<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Templates<br>drwxr-xr-x 0 root root 512 Jun 19 08:54 Videos<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /|grep -n lib</span><br>9:lib<br>10:lib64<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~<span class="hljs-comment"># ls /|grep lib</span><br>lib<br>lib64<br></code></pre></td></tr></table></figure></div><h2 id="chmod更改权限"><a href="#chmod更改权限" class="headerlink" title="chmod更改权限"></a><code>chmod</code>更改权限</h2><ul><li><p>Linux 文件属性有两种设置方法，一种是数字，一种是符号。</p></li><li><p>Linux 文件的基本权限就有九个，分别是 owner/group/others 三种身份各有自己的 read/write/execute 权限。</p></li><li><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><table><thead><tr><th>权限</th><th>数字</th></tr></thead><tbody><tr><td>r</td><td>4</td></tr><tr><td>w</td><td>2</td></tr><tr><td>x</td><td>1</td></tr></tbody></table></li><li><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul></li><li><p>查看权限、更改权限</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rw-rw-rw- 1 root root   6 Aug 10 10:23 test.txt<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># chmod 777 test.txt</span><br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rwxrwxrwx 1 root root   6 Aug 10 10:23 test.txt*<br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># chmod 640 test.txt</span><br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ll</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 ./<br>drwx------ 0 root root 512 Aug 10 10:23 ../<br>-rw-r----- 1 root root   6 Aug 10 10:23 test.txt<br></code></pre></td></tr></table></figure></div></li></ul><h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>ls</td><td>列出目录</td></tr><tr><td>cd</td><td>切换目录</td></tr><tr><td>pwd</td><td>显示目前的目录</td></tr><tr><td>mkdir</td><td>创建一个新的目录</td></tr><tr><td>rmdir</td><td>删除一个空的目录</td></tr><tr><td>cp</td><td>复制文件或目录</td></tr><tr><td>rm</td><td>移除文件或目录</td></tr><tr><td>mv</td><td>移动文件与目录，或修改文件与目录的名称</td></tr></tbody></table><blockquote><p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp</p></blockquote><h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># ls [-aAdfFhilnrRSt] 目录名称[root@www ~]# ls [--color=&#123;never,auto,always&#125;] 目录名称[root@www ~]# ls [--full-time] 目录名称</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：<br>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)<br>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)<br>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p></li><li><p>示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls</span><br>test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -l</span><br>total 0<br>-rw-r----- 1 root root 6 Aug 10 10:23 test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -a</span><br>.  ..  test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -al</span><br>total 0<br>drwxr-xr-x 0 root root 512 Aug 10 10:23 .<br>drwx------ 0 root root 512 Aug 10 10:23 ..<br>-rw-r----- 1 root root   6 Aug 10 10:23 test.txt<br>root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># ls -d</span><br>.<br></code></pre></td></tr></table></figure></div></li></ul><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><ul><li>cd 是 Change Directory 的缩写，这是用来变换工作目录的命令。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> [相对路径或绝对路径]<br></code></pre></td></tr></table></figure></div><ul><li>示例</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@DESKTOP-P9B04K1:~/Desktop<span class="hljs-comment"># cd /</span><br>root@DESKTOP-P9B04K1:/<span class="hljs-comment"># cd /root</span><br>root@DESKTOP-P9B04K1:~<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure></div><h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><ul><li>pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># pwd [-P]</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li><code>-P</code>：显示出确实的路径，而非使用连结 (link) 路径。</li></ul></li><li><p>实例显示出实际的工作目录，而非连结档本身的目录名而已。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /var/mail   &lt;==注意，/var/mail是一个连结档</span><br>[root@www mail]<span class="hljs-comment"># pwd/var/mail         &lt;==列出目前的工作目录</span><br>[root@www mail]<span class="hljs-comment"># pwd -P/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～</span><br>[root@www mail]<span class="hljs-comment"># ls -ld /var/mail</span><br>lrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail<br><span class="hljs-comment"># 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail</span><br><span class="hljs-comment"># 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！</span><br></code></pre></td></tr></table></figure></div><h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><ul><li>如果想要创建新的目录的话，那么就使用 mkdir (make directory)吧。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir [-mp] 目录名称<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：<br>-m ：配置文件的权限。<br>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</p></li><li><p>实例：请到/tmp 底下尝试创建数个新目录看看：</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /tmp[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录[root@www tmp]# mkdir test1/test2/test3/test4</span><br>mkdir: cannot create directory `test1/test2/test3/test4<span class="hljs-string">':</span><br><span class="hljs-string">No such file or directory       &lt;== 没办法直接创建此目录啊！</span><br><span class="hljs-string">[root@www tmp]# mkdir -p test1/test2/test3/test4</span><br></code></pre></td></tr></table></figure></div><ul><li><p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p></li><li><p>实例：创建权限为 rwx–x–x 的目录。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>实例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mkdir -m 711 test2[root@www tmp]# ls -l</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:50 <span class="hljs-built_in">test</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure></div><ul><li>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</li><li>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</li></ul><h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rmdir [-p] 目录名称<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-p ：连同上一级『空的』目录也一起删除</li></ul></li><li><p>删除 runoob 目录</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># rmdir runoob/</span><br></code></pre></td></tr></table></figure></div><ul><li>将 mkdir 实例中创建的目录(/tmp 底下)删除掉！</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># ls -l   &lt;==看看有多少目录存在？drwxr-xr-x  3 root  root 4096 Jul 18 12:50 test</span><br>drwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1<br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2[root@www tmp]<span class="hljs-comment"># rmdir test   &lt;==可直接删除掉，没问题[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！rmdir: `test1': Directory not empty</span><br>[root@www tmp]<span class="hljs-comment"># rmdir -p test1/test2/test3/test4</span><br>[root@www tmp]<span class="hljs-comment"># ls -l        &lt;==您看看，底下的输出中test与test1不见了！</span><br>drwx--x--x  2 root  root 4096 Jul 18 12:54 test2<br></code></pre></td></tr></table></figure></div><ul><li>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</li><li>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</li></ul><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><ul><li>cp 即拷贝文件和目录。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li>-r：递归持续复制，用於目录的复制行为；(常用)</li><li>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li>-u：若 destination 比 source 旧才升级 destination ！</li></ul></li><li><p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cp ~/.bashrc /tmp/bashrc[root@www ~]# cp -i ~/.bashrc /tmp/bashrc</span><br>cp: overwrite `/tmp/bashrc<span class="hljs-string">'? n  &lt;==n不覆盖，y为覆盖</span><br></code></pre></td></tr></table></figure></div><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rm [-fir] 文件或目录<br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul></li><li><p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># rm -i bashrc</span><br>rm: remove regular file `bashrc<span class="hljs-string">'? y</span><br></code></pre></td></tr></table></figure></div><ul><li>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</li></ul><h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></code></pre></td></tr></table></figure></div><ul><li><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul></li><li><p>复制一文件，创建一目录，将文件移动到目录中</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www ~]<span class="hljs-comment"># cd /tmp</span><br>[root@www tmp]<span class="hljs-comment"># cp ~/.bashrc bashrc</span><br>[root@www tmp]<span class="hljs-comment"># mkdir mvtest</span><br>[root@www tmp]<span class="hljs-comment"># mv bashrc mvtest</span><br></code></pre></td></tr></table></figure></div><ul><li>将某个文件移动到某个目录去，就是这样做！</li><li>将刚刚的目录名称更名为 mvtest2</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mv mvtest mvtest2</span><br></code></pre></td></tr></table></figure></div><ul><li>对于如下指令</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@www tmp]<span class="hljs-comment"># mv obj1 obj2</span><br></code></pre></td></tr></table></figure></div><pre><code>- 当 obj1为普通文件，obj2在系统中不存在，那么这条指令会将文件名obj1改成obj2- 当 obj1为普通文件，obj2为一目录，那么会将obj1移动到obj2中- 当 obj1为一目录，obj2为一目录，这条指令会将obj1移动到obj2下成为其子目录- 当 obj1为一目录，obj2为一文件，这条指令不会正常执行，会报错: mv: cannot overwrite non-directory &apos;obj2&apos; with directory &apos;obj1&apos;</code></pre><h1 id="who-命令"><a href="#who-命令" class="headerlink" title="who 命令"></a>who 命令</h1><blockquote><p>Linux who 命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p></blockquote><ul><li>使用权限：所有使用者都可使用。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><figcaption><span>语法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">who - [husfV] [user]<br></code></pre></td></tr></table></figure></div><ul><li><p>参数说明：</p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过 24 小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决 who 指令其他版本的兼容性问题；</li><li>-w 或-T 或–mesg 或–message 或–writable：显示用户的信息状态栏；</li><li>–help：在线帮助；</li><li>–version：显示版本信息。</li></ul></li><li><p>实例</p><ul><li>显示当前登录系统的用户<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who  //显示当前登录系统的用户root   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)</span><br></code></pre></td></tr></table></figure></div></li><li>显示标题栏<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -HNAME   LINE     TIME       COMMENT</span><br>root   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>显示用户登录来源<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -l -HNAME   LINE     TIME       IDLE     PID COMMENT</span><br>LOGIN  tty4     2014-05-13 12:11        852 id=4LOGIN  tty5     2014-05-13 12:11        855 id=5LOGIN  tty2     2014-05-13 12:11        862 id=2LOGIN  tty3     2014-05-13 12:11        864 id=3LOGIN  tty6     2014-05-13 12:11        867 id=6LOGIN  tty1     2014-05-13 12:11       1021 id=1<br></code></pre></td></tr></table></figure></div></li><li>显示终端属性<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -T -HNAME    LINE     TIME       COMMENT</span><br>root   + tty7     2014-05-13 12:12 (:0)root   + pts/0    2014-05-14 17:09 (:0.0)root   - pts/1    2014-05-14 18:51 (192.168.1.17)root   - pts/2    2014-05-14 19:48 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>只显示当前用户<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -m -HNAME   LINE     TIME       COMMENT</span><br>root   pts/1    2014-05-14 18:51 (192.168.1.17)<br></code></pre></td></tr></table></figure></div></li><li>精简模式显示<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># who -qroot root root root# users=4</span><br></code></pre></td></tr></table></figure></div></li></ul></li></ul><h1 id="vi-vim"><a href="#vi-vim" class="headerlink" title="vi/vim"></a>vi/vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：史上最全 Vim 快捷键键位图 — 入门到进阶</p><h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><p>Vim 是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><ul><li>vim 键盘图：<br><a href="https://img.webpro.ltd/picbed/img/20200312212055.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200312212055.png" class="lazyload"></a></li></ul><h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><blockquote><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：</p></blockquote><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符。比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><ul><li>以下是常用的几个命令：<ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。</li><li>若想要编辑文本：启动 Vim，进入了命令模式，按下 i，切换到输入模式。</li><li>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</li></ul></li></ul><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><ul><li>在命令模式下按下 i 就进入了输入模式。</li><li>在输入模式中，可以使用以下按键：<ul><li>字符按键以及 Shift 组合，输入字符</li><li>ENTER，回车键，换行</li><li>BACK SPACE，退格键，删除光标前一个字符</li><li>DEL，删除键，删除光标后一个字符</li><li>方向键，在文本中移动光标</li><li>HOME/END，移动光标到行首/行尾</li><li>Page Up/Page Down，上/下翻页</li><li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li>ESC，退出输入模式，切换到命令模式</li></ul></li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><ul><li>在命令模式下按下:（英文冒号）就进入了底线命令模式。</li><li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</li><li>在底线命令模式中，基本的命令有（已经省略了冒号）：<ul><li>q 退出程序</li><li>w 保存文件</li></ul></li><li>按 ESC 键可随时退出底线命令模式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;匹配字符串在文件中出现的行号&quot;&gt;&lt;a href=&quot;#匹配字符串在文件中出现的行号&quot; class=&quot;headerlink&quot; title=&quot;匹配字符串在文件中出现的行号&quot;&gt;&lt;/a&gt;匹配字符串在文件中出现的行号&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;打开一文本文件，给
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>模拟电子钱包账户并发转账环境产生的脏数据及改进办法(java+mysql)</title>
    <link href="http://blog.webpro.ltd/2019/06/07/ewallet-concurrency-java-mysql/"/>
    <id>http://blog.webpro.ltd/2019/06/07/ewallet-concurrency-java-mysql/</id>
    <published>2019-06-06T16:00:00.000Z</published>
    <updated>2021-07-20T00:15:50.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景简述"><a href="#场景简述" class="headerlink" title="场景简述"></a>场景简述</h1><p>假设用户 A 线上消费，其账户内有余额 100 元，现在他给 B 商户付款 99 元，写成最简单的业务逻辑大概是这样的：</p><ul><li><ol><li>数据库查询(SELECT)A 账户余额(100)</li></ol></li><li><ol start="2"><li>判断 A 账户余额是否够支付抵扣(100 - 99 &gt;= 0)</li></ol></li><li><ol start="3"><li>如果够抵扣，数据库执行扣款操作(UPDATE)，商户 B 加款(A-&gt;Banance -= 99, B-&gt;Banance += 99)；如果不够抵扣，不执行操作</li></ol></li></ul><p>这是一个典型的单线程消费模式，显然如果每次都执行这一个操作，这个算法是正确无误的，下面进行一个稍微复杂的操作，假设 A 线上消费，A 转账，其账户内有余额 100 元，现在他给 B 商户付款 100 元，给商户 C 转账 100 元，且线上消费和转账是同时进行的，那么会产生多种可能，把所有的操作步骤拆分成以下 6 个步骤:</p><p>===</p><p>$1 表示账户余额</p><p>$2 表示消费金额</p><p>===</p><ul><li><ol><li>A11 数据库查询(SELECT)A 账户余额($1) =&gt; trans for B</li></ol></li><li><ol start="2"><li>A12 判断 A 账户余额是否够支付抵扣($1- $2 &gt;= 0) =&gt; trans for B</li></ol></li><li><ol start="3"><li>A13 如果够抵扣，数据库执行扣款操作(UPDATE)，商户 B 加款(A-&gt;Banance -= $2, B-&gt;Banance += $2) =&gt; trans for B；如果不够抵扣，不执行操作，提示余额不足 =&gt; trans for B</li></ol></li><li><ol start="4"><li>A21 数据库查询(SELECT)A 账户余额($1) =&gt; trans for C</li></ol></li><li><ol start="5"><li>A22 判断 A 账户余额是否够支付抵扣($1- $2 &gt;= 0) =&gt; trans for C</li></ol></li><li><ol start="6"><li>A23 如果够抵扣，数据库执行扣款操作(UPDATE)，商户 C 加款(A-&gt;Banance -= $2, B-&gt;Banance += $2) =&gt; trans for C；如果不够抵扣，不执行操作，提示余额不足 =&gt; trans for C</li></ol></li></ul><blockquote><p>执行情况 1（序号相同的表示近乎同一时刻执行，序号越大执行顺序越偏后，单个线程的执行方式为同步执行）:</p></blockquote><p>Thread1: A11(0)-&gt;A12(1)-&gt;A13(2)</p><p>Thread2: A21(3)-&gt;A22(4)-&gt;A23(5)</p><p><a href="https://img.webpro.ltd/picbed/img/20210720073513.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720073513.png" class="lazyload" title></a></p><blockquote><p>执行情况 2（序号相同的表示近乎同一时刻执行，序号越大执行顺序越偏后，单个线程的执行方式为同步执行）:</p></blockquote><p>Thread1: A11(0)-&gt;A12(1)-&gt;A13(2)</p><p>Thread2: A21(0)-&gt;A22(1)-&gt;A23(2)</p><p><a href="https://img.webpro.ltd/picbed/img/20210720073534.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720073534.png" class="lazyload" title></a></p><p>这里仅仅列举两种很特殊的情况作为例子说明，执行情况要远远复杂于上述两种情况</p><p>对于执行情况 1，向商户 B 支付扣款成功，而给 C 转账时，系统会提示余额不足</p><p>对于执行情况 2，向商户 B 支付扣款成功，给 C 转账扣款会仍然成功</p><blockquote><p>执行结果的不同主要在于 A13 步骤的 UPDATE 事务提交操作，如果在 A13 的 UPDATE 成功之前执行 A21，那么 A21 查询出来的账户余额仍然是 100，依然可以进行消费，而事实却是此时正在进行的 A11 消费还没扣款成功，这样便使得一份余额重复使用，也就是产生了脏数据。而情况 1 是一个非常理想的情况，实际执行过程中个几乎不会发生 A13 执行完毕后，才会执行 A21，因为数据库的 SELECT 操作速度要快于 UPDATE 操作，因此很大可能是 A13 执行 UPDATE 之前，A11 和 A21 就已经完成了数据的查询，从而重复使用同一份余额。当然上面讲的 2 种情况是 2 个极端情况下的理想情况，实际情况更复杂更微妙。实际情况下，这样执行通常会会产生脏数据。</p></blockquote><h1 id="实验环境搭建"><a href="#实验环境搭建" class="headerlink" title="实验环境搭建"></a>实验环境搭建</h1><p>我们首先搭建一个上述提到的消费场景环境，模拟其产生脏数据的过程。这里用 java+mysql 来实现，采用 maven 项目构建。</p><table><thead><tr><th>参数名</th><th>参数值</th></tr></thead><tbody><tr><td>数据库地址</td><td>127.0.0.1</td></tr><tr><td>帐户</td><td>root</td></tr><tr><td>密码</td><td>root</td></tr><tr><td>端口</td><td>3306</td></tr><tr><td>字符编码</td><td>UTF-8</td></tr><tr><td>数据库名</td><td>studyjpa</td></tr><tr><td>数据表名</td><td>bank_account</td></tr></tbody></table><p>【自己搭建环境修改响应参数】</p><h2 id="建立-maven-项目"><a href="#建立-maven-项目" class="headerlink" title="建立 maven 项目"></a>建立 maven 项目</h2><ul><li>引入 jdbc 依赖，修改默认 jdk 编译版本为 jdk1.8</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="建立实验数据表，E-R-图如下"><a href="#建立实验数据表，E-R-图如下" class="headerlink" title="建立实验数据表，E-R 图如下"></a>建立实验数据表，E-R 图如下</h2><p><a href="https://img.webpro.ltd/picbed/img/20210720073959.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720073959.png" class="lazyload" title></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`bank_account`</span> (<br>  <span class="hljs-string">`id`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'客户编号'</span>,<br>  <span class="hljs-string">`balance`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'账户余额-分为单位'</span>,<br>  <span class="hljs-string">`card_number`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-string">`customer`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<br>  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)<br>) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure></div><ul><li>用 InnoDB 引擎</li></ul><h2 id="建立数据表实体类-account"><a href="#建立数据表实体类-account" class="headerlink" title="建立数据表实体类 account"></a>建立数据表实体类 account</h2><p>工程目录结构如下:</p><p><a href="https://img.webpro.ltd/picbed/img/20210720074039.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720074039.png" class="lazyload" title></a></p><p>两个包:</p><ul><li>package Bank</li><li>package Bank.dbBean</li></ul><p>在 Bank.dbBean 下建立 bank_account 表的实体类</p><p>printInfo 方法可输出一个 account 对象内存储的数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>account.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.dbBean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">account</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> balance;<br>    <span class="hljs-keyword">private</span> String card_number;<br>    <span class="hljs-keyword">private</span> String customer;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">account</span><span class="hljs-params">()</span></span>&#123;<br>        id = -<span class="hljs-number">1</span>;<br>        balance = <span class="hljs-number">0</span>;<br>        card_number = <span class="hljs-string">""</span>;<br>        customer = <span class="hljs-string">""</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"[ id =&gt; "</span> + id + <span class="hljs-string">" , balance =&gt; "</span> + balance + <span class="hljs-string">" , card_number =&gt; "</span> + card_number + <span class="hljs-string">" , customer =&gt; "</span> + customer + <span class="hljs-string">" ]"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCard_number</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> card_number;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCard_number</span><span class="hljs-params">(String card_number)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.card_number = card_number;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCustomer</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> customer;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCustomer</span><span class="hljs-params">(String customer)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.customer = customer;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="建立数据库操作层"><a href="#建立数据库操作层" class="headerlink" title="建立数据库操作层"></a>建立数据库操作层</h2><p>包括以下两个方法：</p><ul><li><ol><li>通过卡号查询对应客户所有信息</li></ol><ul><li>通过卡号查询信息</li><li>@param String cardNumber</li><li>@return account account</li></ul></li><li><ol start="2"><li>转账操作</li></ol><ul><li>@param String senderCardNumber</li><li>@param String receiverCardNumber</li><li>@param int transCount</li><li>转账之前，转账完成后，都输出 sender 和 receiver 的账户信息，以供比对</li><li>void 异步执行</li><li>提交 UPDATE 事务时单开了个线程，提高效率</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>Bean.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank;<br><br><span class="hljs-keyword">import</span> Bank.dbBean.account;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简易Bean</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bean</span> </span>&#123;<br><br>    <span class="hljs-comment">// 参数配置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dbName    =   <span class="hljs-string">"studyjpa"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL       =   <span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/"</span> + dbName + <span class="hljs-string">"?useUnicode=true&amp;characterEncoding=UTF-8"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String user      =   <span class="hljs-string">"root"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String password  =   <span class="hljs-string">"root"</span>;<br>    <span class="hljs-comment">// 数据库句柄</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection conn;<br>    <span class="hljs-comment">// SQL模板</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PreparedStatement sql;<br>    <span class="hljs-comment">// res</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResultSet res;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 自动连接数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Bean</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            Class.forName(<span class="hljs-string">"com.mysql.jdbc.Driver"</span>); <span class="hljs-comment">// 加载驱动</span><br>        &#125;<span class="hljs-keyword">catch</span>(ClassNotFoundException e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(<span class="hljs-string">"ClassNotFoundException!"</span> + e);<br>        &#125;<br><br>        <span class="hljs-comment">// 连接至数据库</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = DriverManager.getConnection(URL, user, password);<br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br>            System.out.println(dbName + <span class="hljs-string">" opened SUCCESS"</span>);<br>        &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(dbName + <span class="hljs-string">" opened error!"</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过卡号查询信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String cardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> account account</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> account <span class="hljs-title">findByCardNumber</span><span class="hljs-params">(String cardNumber)</span></span>&#123;<br>        account r = <span class="hljs-keyword">new</span> account();<br>        <span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//            System.out.println("conn.isClosed=" + conn.isClosed());</span><br>            <span class="hljs-comment">// 构造SQL模板</span><br>            sql = conn.prepareStatement(<span class="hljs-string">"SELECT  `id`, `balance`, `card_number`, `customer` FROM `bank_account` WHERE `card_number`=?"</span>);<br>            <span class="hljs-comment">// 填充模板</span><br>            sql.setString(<span class="hljs-number">1</span>, cardNumber);<br>            <span class="hljs-comment">// 执行SQL语句</span><br>            res = sql.executeQuery();<br>            <span class="hljs-keyword">if</span>(res.next())&#123;<br>                r.setId(res.getInt(<span class="hljs-string">"id"</span>));<br>                r.setBalance(res.getInt(<span class="hljs-string">"balance"</span>));<br>                r.setCard_number(res.getString(<span class="hljs-string">"card_number"</span>));<br>                r.setCustomer(res.getString(<span class="hljs-string">"customer"</span>));<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(<span class="hljs-string">"Exception! FROM SELECT : "</span> + e + <span class="hljs-string">" card_number: "</span> + cardNumber);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账操作</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String senderCardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String receiverCardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int transCount</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> List&lt;account&gt; - del</span><br><span class="hljs-comment">     *     index0=&gt;senderBeforeSend, index1=&gt;receiverBeforeReceive - del</span><br><span class="hljs-comment">     *     index2=&gt;senderAfterSend, index3=&gt;receiverAfterReceive - del</span><br><span class="hljs-comment">     * void type 异步执行</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">transMoney</span><span class="hljs-params">(String senderCardNumber, String receiverCardNumber, <span class="hljs-keyword">int</span> transCount)</span></span>&#123;<br>        <span class="hljs-comment">// 初始化</span><br>        account sender0 = findByCardNumber(senderCardNumber);<br>        account receiver0 = findByCardNumber(receiverCardNumber);<br>        List&lt;account&gt; r = <span class="hljs-keyword">new</span> ArrayList&lt;account&gt;()&#123;<br>            &#123;<br>                add(sender0);<br>                add(receiver0);<br>                add(sender0);<br>                add(receiver0);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-comment">// 执行转账</span><br>        <span class="hljs-keyword">int</span> senderBalance = sender0.getBalance();<br>        <span class="hljs-keyword">int</span> receiverBalance = receiver0.getBalance();<br>        <span class="hljs-comment">// sender 账户余额是否充足</span><br>        <span class="hljs-keyword">if</span>(senderBalance - transCount &gt;= <span class="hljs-number">0</span>)&#123;<br>            senderBalance -= transCount;<br>            receiverBalance += transCount;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">// 构造SQL模板</span><br>                sql = conn.prepareStatement(<span class="hljs-string">"UPDATE `bank_account` SET `balance`=? WHERE `card_number`=?"</span>);<br>                <span class="hljs-comment">// 填充模板</span><br>                sql.setInt(<span class="hljs-number">1</span>, senderBalance);<br>                sql.setString(<span class="hljs-number">2</span>, senderCardNumber);<br>                sql.executeUpdate();<br><br>                <span class="hljs-comment">// 填充模板</span><br>                sql.setInt(<span class="hljs-number">1</span>, receiverBalance);<br>                sql.setString(<span class="hljs-number">2</span>, receiverCardNumber);<br>                sql.executeUpdate();<br><br>                <span class="hljs-comment">// 开个新线程处理</span><br>                <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>                    <span class="hljs-comment">// 这里不出错就不会再出错了</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        conn.commit();<br>                        List&lt;account&gt; r1 = <span class="hljs-keyword">new</span> ArrayList&lt;account&gt;()&#123;<br>                            &#123;<br>                                add(sender0);<br>                                add(receiver0);<br>                                add(findByCardNumber(senderCardNumber));<br>                                add(findByCardNumber(receiverCardNumber));<br>                            &#125;<br>                        &#125;;<br>                        <span class="hljs-keyword">for</span> (account item : r1) &#123;<br>                            item.printInfo();<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>                        <span class="hljs-comment">// 捕捉到错误</span><br>                        <span class="hljs-keyword">try</span>&#123;<br>                            conn.rollback();<br>                            System.out.println(<span class="hljs-string">"new Thread update fail - been rollback!"</span> + e);<br>                        &#125;<span class="hljs-keyword">catch</span>(SQLException e1)&#123;<br>                            System.out.println(<span class="hljs-string">"rollback fail!"</span> + e1);<br>                        &#125;<br>                        System.out.println(<span class="hljs-string">"new Thread update fail! "</span> + e);<br>                    &#125;<br>                &#125;).start();<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>                <span class="hljs-comment">// 捕捉到错误</span><br>                <span class="hljs-keyword">try</span>&#123;<br>                    conn.rollback();<br>                    System.out.println(<span class="hljs-string">"been rollback!"</span> + e);<br>                &#125;<span class="hljs-keyword">catch</span>(SQLException e1)&#123;<br>                    System.out.println(<span class="hljs-string">"rollback fail!"</span> + e1);<br>                &#125;<br>                System.out.println(<span class="hljs-string">"SQLException!"</span> + e);<br>                <span class="hljs-keyword">for</span> (account item : r) &#123;<br>                    item.printInfo();<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">"senderCardNumber: "</span> + senderCardNumber + <span class="hljs-string">", Balance cannot afford, transCount: "</span> + transCount);<br>            <span class="hljs-keyword">for</span> (account item : r) &#123;<br>                item.printInfo();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="创建模拟数据"><a href="#创建模拟数据" class="headerlink" title="创建模拟数据"></a>创建模拟数据</h2><blockquote><p>向 bank_account 表中插入 4 条记录</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of bank_account</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`bank_account`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-number">200</span>, <span class="hljs-string">'1000'</span>, <span class="hljs-string">'ZhangSan'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`bank_account`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1001'</span>, <span class="hljs-string">'LiSi'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`bank_account`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1002'</span>, <span class="hljs-string">'WangWu'</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`bank_account`</span> <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'1003'</span>, <span class="hljs-string">'ZhaoLiu'</span>);<br></code></pre></td></tr></table></figure></div><table><thead><tr><th>余额</th><th>卡号</th><th>客户姓名</th></tr></thead><tbody><tr><td>200</td><td>1000</td><td>张三</td></tr><tr><td>0</td><td>1001</td><td>李四</td></tr><tr><td>0</td><td>1002</td><td>王五</td></tr><tr><td>0</td><td>1003</td><td>赵六</td></tr></tbody></table><h2 id="模拟单线程消费操作-BankDemo0"><a href="#模拟单线程消费操作-BankDemo0" class="headerlink" title="模拟单线程消费操作 BankDemo0"></a>模拟单线程消费操作 BankDemo0</h2><p>该步骤用来检验上述写的基本业务逻辑是否正常、运算正确</p><p>在 BankDemo0 类中创建启动入口函数，同步执行转账操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>BankDemo0.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankDemo0</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>        Bean bean = <span class="hljs-keyword">new</span> Bean();<br>        String sender = <span class="hljs-string">"1000"</span>;<br>        String Lisi = <span class="hljs-string">"1001"</span>;<br>        String WangWu = <span class="hljs-string">"1002"</span>;<br>        String ZhaoLiu = <span class="hljs-string">"1003"</span>;<br>        String[] acc = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>];<br>        acc[<span class="hljs-number">0</span>] = Lisi;<br>        acc[<span class="hljs-number">1</span>] = WangWu;<br>        acc[<span class="hljs-number">2</span>] = ZhaoLiu;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">int</span> transCount = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            bean.transMoney(sender, acc[i], transCount);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><p>该方法模拟了张三（sender，卡号 1000）分别（非并发）向李四、王五、赵六三人转账 100 分(1 元=100 分，数据库中以分为单位计数)的操作。</p><p>我们执行一下，查看结果:</p><p>运行前，数据表展示：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720074709.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720074709.png" class="lazyload" title></a></p><p>运行后，调试台输出：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720074730.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720074730.png" class="lazyload" title></a></p><pre>studyjpa opened SUCCESS[ id => 1 , balance => 200 , card_number => 1000 , customer => ZhangSan ][ id => 2 , balance => 0 , card_number => 1001 , customer => LiSi ][ id => 1 , balance => 100 , card_number => 1000 , customer => ZhangSan ][ id => 2 , balance => 100 , card_number => 1001 , customer => LiSi ]senderCardNumber: 1000, Balance cannot afford, transCount: 100[ id => 1 , balance => 0 , card_number => 1000 , customer => ZhangSan ][ id => 4 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ][ id => 1 , balance => 100 , card_number => 1000 , customer => ZhangSan ][ id => 1 , balance => 0 , card_number => 1000 , customer => ZhangSan ][ id => 4 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ][ id => 3 , balance => 0 , card_number => 1000 , customer => ZhangSan ][ id => 1 , balance => 0 , card_number => 1000 , customer => ZhangSan ][ id => 3 , balance => 100 , card_number => 1003 , customer => ZhaoLiu ]Process finished with exit code 0</pre><p>数据表展示：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075155.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075155.png" class="lazyload" title></a></p><p>业务逻辑执行的非常正确，按照李四、王五、赵六的先后顺序转账，在对赵六进行转账时系统提示余额不足：</p><p>senderCardNumber: 1000, Balance cannot afford, transCount: 100</p><h2 id="模拟多线程并发消费操作-BankDemo1"><a href="#模拟多线程并发消费操作-BankDemo1" class="headerlink" title="模拟多线程并发消费操作 BankDemo1"></a>模拟多线程并发消费操作 BankDemo1</h2><p>在 BankDemo1 类中创建启动入口函数，新建线程池，执行并发</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>BankDemo1.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankDemo1</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>        ExecutorService executor1 = Executors.newCachedThreadPool();<br>        Bean bean = <span class="hljs-keyword">new</span> Bean();<br>        String sender = <span class="hljs-string">"1000"</span>;<br>        String Lisi = <span class="hljs-string">"1001"</span>;<br>        String WangWu = <span class="hljs-string">"1002"</span>;<br>        String ZhaoLiu = <span class="hljs-string">"1003"</span>;<br>        String[] acc = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>];<br>        acc[<span class="hljs-number">0</span>] = Lisi;<br>        acc[<span class="hljs-number">1</span>] = WangWu;<br>        acc[<span class="hljs-number">2</span>] = ZhaoLiu;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">int</span> transCount = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            String temp = acc[i];<br>            executor1.submit(() -&gt; &#123;<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        bean.transMoney(sender, temp, transCount);<br>                    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            );<br>        &#125;<br>        executor1.shutdownNow();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p>该方法模拟了张三（sender，卡号 1000）同时（并发）向李四、王五、赵六三人转账 100 分(1 元=100 分，数据库中以分为单位计数)的操作。</p><p>（李四、王五、赵六账户余额均为 0 元）</p><p>我们执行一下，查看结果:</p><p>运行前：</p><p>数据表展示：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075300.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075300.png" class="lazyload" title></a></p><p>运行后：</p><p>调试台输出：</p><pre>studyjpa opened SUCCESSException! FROM SELECT : java.lang.NullPointerException card_number: 1000Exception! FROM SELECT : java.sql.SQLException: Before start of result set card_number: 1000[ id => 1 , balance => 200 , card_number => 1000 , customer => WangWu ][ id => 1 , balance => 200 , card_number =>  , customer =>  ][ id => 3 , balance => 0 , card_number => 1002 , customer => WangWu ][ id => 1 , balance => 100 , card_number => 1000 , customer => ZhangSan ][ id => 3 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ][ id => 1 , balance => 200 , card_number => 1000 , customer => WangWu ][ id => 4 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ][ id => 2 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ][ id => 1 , balance => 0 , card_number =>  , customer =>  ][ id => 2 , balance => 100 , card_number => 1003 , customer => ZhaoLiu ][ id => 1 , balance => 100 , card_number => 1000 , customer => ZhangSan ][ id => 4 , balance => 0 , card_number => 1003 , customer => ZhaoLiu ]Process finished with exit code 0</pre><p>数据表展示：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075351.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075351.png" class="lazyload" title></a></p><p>成功获取脏数据，显然凭空多出了 100 分，实验开始时总资产为 200，而并发执行后，总资产变为 300，可见在并发消费下，出现了逻辑错误。</p><p>重置表中的数据，反复运行几次，直接查看表数据变化：</p><p>===</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075407.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075407.png" class="lazyload" title></a></p><p>===</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075419.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075419.png" class="lazyload" title></a></p><p>===</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075431.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075431.png" class="lazyload" title></a></p><p>===</p><p>… …</p><p>执行结果具有不确定性，这也反映了线程在执行时 CPU 对任务的快速切换选择顺序也是不确定的。</p><h1 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h1><p>我们的常规业务逻辑在单线程模式下运行正常，然而在多线程模式下却发生了错误，所以我们需要改进算法，支持多线程并发模式消费。</p><p>上述并发产生错误的原因，是由于在 UPDATE 没有操作成功时（包括 UPDATE 操作之前/操作中（并没有操作完成））我们便进行了第二次的查询操作，余额重复使用产生了脏数据。纠其根本原因，还是在于 MySQL 数据库对于多线程处理默认使用乐观锁，所以 update 的时候并不会完全锁死表，仍然支持查询，在此时很大可能就在查询数据，查询到的仍然是旧的数据，所以从根本上导致了数据错乱，最终导致脏数据的产生。</p><p>===</p><h2 id="相关知识点："><a href="#相关知识点：" class="headerlink" title="相关知识点："></a>相关知识点：</h2><blockquote><p>事务的四个特性：原子性，一致性，隔离性，持久性</p></blockquote><ul><li><p>原子性：包含在事务内的所有操作，要么全部执行完成，要么全部执行失败</p></li><li><p>一致性：包含在事务内的所有操作设计的数据行，能被查看到的要么全部执行完成后的结果，要么全部完成前的结果。也就是说小明有 100 块，小花有 10 块，小明给小花转了 50 块。那么对于其他事务来说，能看到的只有是小明有 50 块同时小花有 60 块。或者是小明有 100 块同时小花有 10 块。而不能出现小明有 50 块而小花有 10 块。这就叫做一致性</p></li><li><p>持久性：事务执行完成后数据被持久化到磁盘。</p></li><li><p>隔离性：隔离性有四大隔离级别：</p><ul><li>① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</li><li>② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</li><li>③ Read committed (读已提交)：可避免脏读的发生。</li><li>④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</li></ul></li></ul><blockquote><p>脏读，幻读</p></blockquote><ul><li>a、脏读</li></ul><p>脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。</p><ul><li>b、不可重复读</li></ul><p>不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><ul><li>c、虚读(幻读)</li></ul><p>幻读是事务非独立执行时发生的一种现象。例如事务 T1 对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p><p>===</p><h2 id="Ⅰ、乐观锁改进-类-CAS-无锁操作机制改进办法"><a href="#Ⅰ、乐观锁改进-类-CAS-无锁操作机制改进办法" class="headerlink" title="Ⅰ、乐观锁改进 - 类 CAS 无锁操作机制改进办法"></a>Ⅰ、乐观锁改进 - 类 CAS 无锁操作机制改进办法</h2><h3 id="1、JVM-CAS-简述"><a href="#1、JVM-CAS-简述" class="headerlink" title="1、JVM-CAS 简述"></a>1、JVM-CAS 简述</h3><p>JVM 为了保证数据不被脏读，措施之一就是采用了 CAS（compare and set）操作机制。我们举个简单的例子了解一下该机制：</p><p>对于某个变量 A，我们为其增加一个版本号 version，使用 getA(version)方法获取 A 的值，使用 setA(value1, version++)来更新 A 的值，即每次更新 A 的值其版本号都+1。现在有 2 个线程，Thread1 and Thread2，Thread1=&gt;( getA( 0 ), setA( v2, 0 ) ), Thread2=&gt;( getA( 0 ), setA(v3, 0) )。CPU 必定会先调取某一个线程，我们假设先调取 Thread1，Thread1=&gt;setA( v2, 0 )方法，会使得 A 的版本号+1，即由[version=0]=&gt;[version=1]，此后 Thread2=&gt;getA( 0 )方法不会失效，注意 getA 方法不因为版本号的不一致而失败，当进行到 Thread2=&gt;setA(v3, 0)方法时，此时 setA 方法中 A 的版本号为 0，而此时将要被 set 的 A 的变量的版本号已经被 Thread1 修改为 1，0≠1，setA 方法调用失效，Thread2 会回到线程的第一步重新操作，升高变量 A 的版本号，执行 Thread2=&gt;( getA( 1 ), setA(v3, 1) )，当再次执行到 Thread2=&gt;setA(v3, 1)方法时，有操作版本号 1=存储版本号 1，此时版本号达到一致，A 变量的值更新为 v3，同时其版本号+1，即 version=2。如果 Thread2 第二次进行 setA 方法的时候，A 的版本号又被其他线程修改提升，那么 Thread2 将会继续重新执行本线程，重新 Thread2=&gt;( getA( version ), setA(v3, version ) )，如此循环，直到操作版本号和存储版本号一致为止。</p><p>我们可以参照下 JVM-CAS 的操作机制，在数据库字段中对 balance 字段增加一个 version 字段，当 balance 的值改变时，version 自增 1。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`studyjpa`</span>.<span class="hljs-string">`bank_account`</span><br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> <span class="hljs-string">`version`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'数据版本号-从0开始每次+1'</span> <span class="hljs-keyword">AFTER</span> <span class="hljs-string">`customer`</span>;<br></code></pre></td></tr></table></figure></div><blockquote><p>E-R 图</p></blockquote><p><a href="https://img.webpro.ltd/picbed/img/20210720075925.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075925.png" class="lazyload" title></a></p><p>初始数据：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075939.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075939.png" class="lazyload" title></a></p><p>此外，我们将 update 并发操作串行化，再加上数据版本控制，实现类 CAS 操作。串行化采用生产者-&gt;消费者模式，消费者并发的操作请求将会逐条用编号标记放置在计算机内存中排队等待消费者处理（该机制参考 java 的一些并发框架）。</p><p><a href="https://img.webpro.ltd/picbed/img/20210720075958.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720075958.png" class="lazyload" title></a></p><h3 id="2、并行转串行处理"><a href="#2、并行转串行处理" class="headerlink" title="2、并行转串行处理"></a>2、并行转串行处理</h3><p>我们将该过程分为以下几个关键步骤：</p><p>A.并发请求接收=&gt;为请求分配序号=&gt;按序号将处理的内容存储在缓存池对应的缓存块中</p><p>B.消费者自动处理服务循环扫描缓存块=&gt;有未处理请求进行处理</p><p>A、B 为两个相互不干扰的一个过程，A 作为生产者 Producer 向缓存块中不断存入数据，B 作为消费者 Consumer 从缓存块中取出数据进行处理，B 对 A 产生的请求进行异步处理。之所以设置缓存块，是因为在上面的实验环境中，要保证不产生脏数据，必须是生产者产生 1 个请求，消费者就同步处理 1 个请求，然而生产者产生请求的速度要高于消费者处理数据的速度，所以无法完成生产者&lt;=&gt;消费者之间的同步，因此请求需要排队进行异步处理。</p><p><a href="https://img.webpro.ltd/picbed/img/20210720080036.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720080036.png" class="lazyload" title></a></p><blockquote><p>最后在阐述几个关键性的要点：</p></blockquote><ul><li>为提高效率，并发请求过程中为请求分配任务序号不使用锁机制（synchronized 等）。</li><li>任务序号（TaskIndex）采用的是原子计数方式生成，保障并发的请求的任务序号不重复。</li><li>缓存块采用普通的 String[]数组（String[] Task）实现，从内存中读取缓存数据效率要高很多。</li><li>数组的最大长度（CoreMAX）决定着程序能够承载的最大并发数。</li><li>缓存块的 index 就是并发请求分配的任务序号</li></ul><p>下面用 java 代码实现：</p><blockquote><p>生产者模拟</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>TransMoneyProducer.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransMoneyProducer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> for_id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"for_id = "</span> + for_id + <span class="hljs-string">" is waiting for deal"</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>BankCore 类 - 并行转串行核心类</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>BankCore.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BankCore 建立缓存池，并行转串行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankCore</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> CoreMAX = <span class="hljs-number">1024</span>;                         <span class="hljs-comment">// 最大支持缓存数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger TaskIndex = <span class="hljs-keyword">new</span> AtomicInteger();    <span class="hljs-comment">// 循环自增原子计数，为每个请求标上序号(0-1023-0-1023-...)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger RequestIndex = <span class="hljs-keyword">new</span> AtomicInteger(); <span class="hljs-comment">// 自增原子计数，为每个请求标上序号(用途就是和写入数组的TaskIndex对比，查看请求是否有丢失)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger scanIndex = <span class="hljs-keyword">new</span> AtomicInteger();    <span class="hljs-comment">// 扫描服务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] Task = <span class="hljs-keyword">new</span> String[CoreMAX];              <span class="hljs-comment">// 缓存，支持1024个并发转换</span><br><br>    ExecutorService executor;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BankCore</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 初始化1024个缓存</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CoreMAX; i++)&#123;<br>            Task[i] = <span class="hljs-string">""</span>;<br>        &#125;<br>        <span class="hljs-comment">// 初始化</span><br>        TaskIndex.compareAndSet(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        RequestIndex.compareAndSet(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        executor = Executors.newCachedThreadPool();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NewRequest</span><span class="hljs-params">(String requestStr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> newRequestIndex = RequestIndex.incrementAndGet();<br><span class="hljs-comment">//        int newTaskIndex = newRequestIndex &amp; (CoreMAX - 1) - 1;</span><br>        <span class="hljs-keyword">int</span> newTaskIndex = TaskIndex.incrementAndGet();<br>        TaskIndex.compareAndSet(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">"NewRequest["</span> + newRequestIndex + <span class="hljs-string">"] =&gt; ["</span> + newTaskIndex + <span class="hljs-string">"] "</span> + requestStr);<br>        <span class="hljs-comment">// 如果有空余的位子存放新请求那么就存放，否则会抛弃新请求</span><br>        <span class="hljs-keyword">if</span>(Task[newTaskIndex].equals(<span class="hljs-string">""</span>))&#123;<br>            Task[newTaskIndex] = requestStr;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步自动处理请求开始</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AutoListenStart</span><span class="hljs-params">()</span></span>&#123;<br>        executor.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">"new Thread AutoListenStart"</span>);<br>            <span class="hljs-comment">// 阻塞，循环扫描第0-1023处缓存</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">int</span> task_index = scanIndex.get();<br>                <span class="hljs-keyword">if</span>(!Task[task_index].equals(<span class="hljs-string">""</span>))&#123;<br>                    <span class="hljs-comment">// 有新任务</span><br>                    Thread.sleep(<span class="hljs-number">50</span>);<br>                    System.out.println(<span class="hljs-string">"TaskIndex = "</span> + task_index + <span class="hljs-string">" ["</span> + Task[task_index] + <span class="hljs-string">"]"</span> + <span class="hljs-string">" | 已处理"</span>);<br>                    Task[task_index] = <span class="hljs-string">""</span>;<br>                &#125;<br>                scanIndex.incrementAndGet();<br>                scanIndex.compareAndSet(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 停止listen</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shutdownNow</span><span class="hljs-params">()</span></span>&#123;<br>        executor.shutdownNow();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>我们建立了一个 1024 长度的缓存池，可以承载 1024 个并发。</li><li>NewRequest 方法：并发线程提交请求，即[并发接收池=&gt;存入缓存]。</li><li>AutoListenStart 方法是一个独立的线程，当其被启动后，它会在后台持续扫描缓存池，以单线程的方式处理新请求。</li><li>AutoListenStart 方法处理新请求完毕后，会清空对应的缓存块，这也是判断缓存块中是否有未处理请求的依据。</li><li>AutoListenStart 方法在处理请求的时候，延时 50ms，假设处理数据花了 50ms。</li></ul><p>下面我们测试一下：</p><p>新建 DemoTest1 类，模拟并发请求：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>DemoTest1.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ExecutorService executor1 = Executors.newCachedThreadPool();<br>        BankCore bankCore = <span class="hljs-keyword">new</span> BankCore();<br>        TransMoneyProducer transMoneyProducer = <span class="hljs-keyword">new</span> TransMoneyProducer();<br><br>        bankCore.AutoListenStart();<br><br>        <span class="hljs-comment">// 开启并发线程模拟</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">int</span> ii = i;<br>            executor1.submit(() -&gt; &#123;<br>                bankCore.NewRequest(transMoneyProducer.test(ii));<br>            &#125;);<br>        &#125;<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">"RequestIndex Max: "</span>+ BankCore.RequestIndex.get());<br>        System.out.println(<span class="hljs-string">"TaskIndex Max: "</span>+ BankCore.TaskIndex.get());<br><br>        executor1.shutdownNow();<br>        bankCore.shutdownNow();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><p>运行，看下 Console 输出如下：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720080252.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720080252.png" class="lazyload" title></a></p><p>我们可以看到并发产生的请求 NewRequest 有条不紊的被我们的 AutoListenStart 处理成功，10 个并发线程一个都没有丢失，都被正确的处理了。</p><h3 id="3、应用上述算法处理并发转账引起的脏数据"><a href="#3、应用上述算法处理并发转账引起的脏数据" class="headerlink" title="3、应用上述算法处理并发转账引起的脏数据"></a>3、应用上述算法处理并发转账引起的脏数据</h3><blockquote><p>Ⅰ、TransMoneyProducer 生产者</p></blockquote><p>一个正式方法：newTrans</p><p><strong>TransMoneyProducer.newTrans(senderCardNumber, receiverCardNumber, transCount)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>TransMoneyProducer.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransMoneyProducer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">newTrans</span><span class="hljs-params">(String senderCardNumber, String receiverCardNumber, <span class="hljs-keyword">int</span> transCount)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> senderCardNumber + <span class="hljs-string">"#"</span> + receiverCardNumber + <span class="hljs-string">"#"</span> + transCount;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> for_id)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"for_id = "</span> + for_id + <span class="hljs-string">" is waiting for deal"</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>Ⅱ、TransMoneyConsumer 消费者</p></blockquote><p>消费者类不需要支持多线程，按照单线程正常的代码结构即可</p><p>使用方法：直接调用 TransMoneyConsumer 对象，传入发送者卡号、接收者卡号、金额即可</p><p><strong>new TransMoneyConsumer(senderCardNumber, receiverCardNumber, transCount)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>TransMoneyConsumer.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">import</span> Bank.dbBean.accountSuper;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 转战类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TransMoneyConsumer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 参数配置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String dbName    =   <span class="hljs-string">"studyjpa"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String URL       =   <span class="hljs-string">"jdbc:mysql://127.0.0.1:3306/"</span> + dbName + <span class="hljs-string">"?useUnicode=true&amp;characterEncoding=UTF-8"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String user      =   <span class="hljs-string">"root"</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String password  =   <span class="hljs-string">"root"</span>;<br>    <span class="hljs-comment">// 数据库句柄</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Connection conn;<br>    <span class="hljs-comment">// SQL模板</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PreparedStatement sql;<br>    <span class="hljs-comment">// res</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ResultSet res;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账操作初始化</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String senderCardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String receiverCardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> int transCount</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TransMoneyConsumer</span><span class="hljs-params">(String senderCardNumber, String receiverCardNumber, <span class="hljs-keyword">int</span> transCount)</span></span>&#123;<br>        openConn();<br>        doTrans(senderCardNumber, receiverCardNumber, transCount);<br>        System.out.println(<span class="hljs-string">"------------------------"</span>);<br>        System.out.println(<span class="hljs-string">"TransMoney1 is Construct"</span>);<br>        System.out.println(<span class="hljs-string">"receiverCardNumber: "</span> + receiverCardNumber);<br>        System.out.println(<span class="hljs-string">"------------------------"</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 打开数据库连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openConn</span><span class="hljs-params">()</span></span>&#123;<br>        pl(<span class="hljs-string">"openConn"</span>);<br>        <span class="hljs-keyword">try</span>&#123;<br>            Class.forName(<span class="hljs-string">"com.mysql.jdbc.Driver"</span>); <span class="hljs-comment">// 加载驱动</span><br>        &#125;<span class="hljs-keyword">catch</span>(ClassNotFoundException e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(<span class="hljs-string">"ClassNotFoundException!"</span> + e);<br>        &#125;<br>        <span class="hljs-comment">// 连接至数据库</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            conn = DriverManager.getConnection(URL, user, password);<br>            conn.setAutoCommit(<span class="hljs-keyword">false</span>);<br><span class="hljs-comment">//            System.out.println(dbName + " opened SUCCESS");</span><br>        &#125;<span class="hljs-keyword">catch</span>(SQLException e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(dbName + <span class="hljs-string">" opened error!"</span> + e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过卡号查询信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> String cardNumber</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> account account</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> accountSuper <span class="hljs-title">findByCardNumber</span><span class="hljs-params">(String cardNumber)</span></span>&#123;<br>        accountSuper r = <span class="hljs-keyword">new</span> accountSuper();<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">// 执行SQL语句</span><br>            sql = conn.prepareStatement(<span class="hljs-string">"SELECT  `id`, `balance`, `card_number`, `customer`, `version` FROM `bank_account` WHERE `card_number`=?"</span>);<br>            sql.setString(<span class="hljs-number">1</span>, cardNumber);<br>            res = sql.executeQuery();<br>            <span class="hljs-keyword">if</span>(res.next())&#123;<br>                r.setId(res.getInt(<span class="hljs-string">"id"</span>));<br>                r.setBalance(res.getInt(<span class="hljs-string">"balance"</span>));<br>                r.setCard_number(res.getString(<span class="hljs-string">"card_number"</span>));<br>                r.setCustomer(res.getString(<span class="hljs-string">"customer"</span>));<br>                r.setVersion(res.getInt(<span class="hljs-string">"version"</span>));<br>            &#125;<br>            res.close();<br>            <span class="hljs-keyword">if</span>(conn.isClosed())&#123;<br>                openConn();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<br>            <span class="hljs-comment">// 捕捉到错误</span><br>            System.out.println(<span class="hljs-string">"Exception! FROM SELECT : "</span> + e + <span class="hljs-string">" card_number: "</span> + cardNumber);<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 转账</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doTrans</span><span class="hljs-params">(String senderCardNumber, String receiverCardNumber, <span class="hljs-keyword">int</span> transCount)</span></span>&#123;<br>        accountSuper sender = findByCardNumber(senderCardNumber);<br>        accountSuper receiver = findByCardNumber(receiverCardNumber);<br>        <span class="hljs-keyword">int</span> sender_id = sender.getId();<br>        <span class="hljs-keyword">int</span> receiver_id = receiver.getId();<br>        <span class="hljs-comment">// 执行转账</span><br>        <span class="hljs-keyword">int</span> senderBalance = sender.getBalance();<br>        <span class="hljs-keyword">int</span> receiverBalance = receiver.getBalance();<br>        <span class="hljs-comment">// sender 账户余额是否充足</span><br>        <span class="hljs-keyword">if</span> (senderBalance - transCount &gt;= <span class="hljs-number">0</span>) &#123;<br>            senderBalance -= transCount;<br>            receiverBalance += transCount;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 构造sender-SQL模板</span><br>                PreparedStatement sender_sql =<br>                        conn.prepareStatement(<span class="hljs-string">"UPDATE `bank_account` SET `balance`=?, version=version+1 WHERE `id`=?"</span>);<br>                <span class="hljs-comment">// 填充模板</span><br>                sender_sql.setInt(<span class="hljs-number">1</span>, senderBalance);<br>                sender_sql.setInt(<span class="hljs-number">2</span>, sender_id);<br>                sender_sql.executeUpdate();<br><br>                <span class="hljs-comment">// 构造receiver-SQL模板</span><br>                PreparedStatement receiver_sql =<br>                        conn.prepareStatement(<span class="hljs-string">"UPDATE `bank_account` SET `balance`=?, version=version+1 WHERE `id`=?"</span>);<br>                <span class="hljs-comment">// 填充模板</span><br>                receiver_sql.setInt(<span class="hljs-number">1</span>, receiverBalance);<br>                receiver_sql.setInt(<span class="hljs-number">2</span>, receiver_id);<br>                receiver_sql.executeUpdate();<br>                <span class="hljs-comment">// 执行事务</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.commit();<br>                    getTradePrint(<span class="hljs-string">"√ TransMoney Success"</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    <span class="hljs-comment">// 捕捉到错误</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        conn.rollback();<br>                        getTradePrint(<span class="hljs-string">"×× new Thread update fail: "</span> + e + <span class="hljs-string">", been rollback!"</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>                        getTradePrint(<span class="hljs-string">"××× new Thread update fail: "</span> + e + <span class="hljs-string">", rollback fail!: "</span> + e1);<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                <span class="hljs-comment">// 捕捉到错误</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    conn.rollback();<br>                    getTradePrint(<span class="hljs-string">"×× SQLException: "</span> + e + <span class="hljs-string">", been rollback! "</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e1) &#123;<br>                    getTradePrint(<span class="hljs-string">"××× SQLException: "</span> + e + <span class="hljs-string">", rollback fail: "</span> + e1);<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 余额不足</span><br>            getTradePrint(sender.getCard_number() + <span class="hljs-string">"=&gt;Trans=&gt;"</span> + receiver.getCard_number() + <span class="hljs-string">" Balance cannot afford"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getTradePrint</span><span class="hljs-params">(String resString)</span></span>&#123;<br><span class="hljs-comment">//        System.out.println("------------------------");</span><br><span class="hljs-comment">//        System.out.println("&gt;&gt;&gt;" + resString);</span><br><span class="hljs-comment">//        System.out.println("Sender: " + sender.getCard_number() + "receiver: " + receiver.getCard_number());</span><br><span class="hljs-comment">//        System.out.println("SenderName: " + sender.getCustomer() + "receiverName: " + receiver.getCustomer());</span><br><span class="hljs-comment">//        System.out.println("TransMoney: ￥" + deltaMoney);</span><br><span class="hljs-comment">//        System.out.println("sender balance: ￥" + sender.getBalance() + " =&gt; ￥" + findByCardNumber(sender.getCard_number()).getBalance());</span><br><span class="hljs-comment">//        System.out.println("receiver balance: ￥" + receiver.getBalance() + " =&gt; ￥" + findByCardNumber(receiver.getCard_number()).getBalance());</span><br><span class="hljs-comment">//        System.out.println("------------------------");</span><br>        System.out.println(resString);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pl</span><span class="hljs-params">(String s)</span></span>&#123;<br>        System.out.println(s);<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>Ⅲ、并行=&gt;串行转换核心代码</p></blockquote><p>BankCore1 类</p><p>使用方法：初始化对象后，首先调用 AutoListenStart 进行后台扫描缓存，有新请调用 NewRequest 方法</p><p><strong>BankCore1.AutoListenStart()</strong></p><p><strong>BankCore1.NewRequest(requestStr)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>BankCore1.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicInteger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BankCore1</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> CoreMAX = <span class="hljs-number">1024</span>;                         <span class="hljs-comment">// 最大支持缓存数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger TaskIndex = <span class="hljs-keyword">new</span> AtomicInteger();    <span class="hljs-comment">// 循环自增原子计数，为每个请求标上序号(0-1023-0-1023-...)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger RequestIndex = <span class="hljs-keyword">new</span> AtomicInteger(); <span class="hljs-comment">// 自增原子计数，为每个请求标上序号(用途就是和写入数组的TaskIndex对比，查看请求是否有丢失)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicInteger scanIndex = <span class="hljs-keyword">new</span> AtomicInteger();    <span class="hljs-comment">// 扫描服务</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] Task = <span class="hljs-keyword">new</span> String[CoreMAX];              <span class="hljs-comment">// 缓存，支持1024个并发转换</span><br><br>    ExecutorService executor;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BankCore1</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// 初始化1024个缓存</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; CoreMAX; i++)&#123;<br>            Task[i] = <span class="hljs-string">""</span>;<br>        &#125;<br>        <span class="hljs-comment">// 初始化</span><br>        TaskIndex.compareAndSet(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        RequestIndex.compareAndSet(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        executor = Executors.newCachedThreadPool();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NewRequest</span><span class="hljs-params">(String requestStr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> newRequestIndex = RequestIndex.incrementAndGet();<br><span class="hljs-comment">//        int newTaskIndex = newRequestIndex &amp; (CoreMAX - 1) - 1;</span><br>        <span class="hljs-keyword">int</span> newTaskIndex = TaskIndex.incrementAndGet();<br>        TaskIndex.compareAndSet(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">"NewRequest["</span> + newRequestIndex + <span class="hljs-string">"] =&gt; ["</span> + newTaskIndex + <span class="hljs-string">"] "</span> + requestStr);<br>        <span class="hljs-comment">// 如果有空余的位子存放新请求那么就存放，否则会抛弃新请求</span><br>        <span class="hljs-keyword">if</span>(Task[newTaskIndex].equals(<span class="hljs-string">""</span>))&#123;<br>            Task[newTaskIndex] = requestStr;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步自动处理请求开始</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AutoListenStart</span><span class="hljs-params">()</span></span>&#123;<br>        executor.submit(() -&gt; &#123;<br>            System.out.println(<span class="hljs-string">"new Thread AutoListenStart"</span>);<br>            <span class="hljs-comment">// 阻塞，循环扫描第0-1023处缓存</span><br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">int</span> task_index = scanIndex.get();<br>                <span class="hljs-keyword">if</span>(!Task[task_index].equals(<span class="hljs-string">""</span>))&#123;<br>                    <span class="hljs-comment">// 分割信息</span><br>                    <span class="hljs-comment">// 任务格式 转账卡号#收款卡号#金额</span><br>                    String[] deal = Task[task_index].split(<span class="hljs-string">"#"</span>);<br>                    String senderCardNumber = deal[<span class="hljs-number">0</span>];<br>                    String receiverCardNumber = deal[<span class="hljs-number">1</span>];<br>                    <span class="hljs-keyword">int</span> transCount = Integer.parseInt(deal[<span class="hljs-number">2</span>]);<br>                    <span class="hljs-keyword">new</span> TransMoneyConsumer(senderCardNumber, receiverCardNumber, transCount);<br>                    System.out.println(<span class="hljs-string">"TaskIndex = "</span> + task_index + <span class="hljs-string">" ["</span> + Task[task_index] + <span class="hljs-string">"]"</span> + <span class="hljs-string">" | 已处理"</span>);<br>                    Task[task_index] = <span class="hljs-string">""</span>;<br>                &#125;<br>                scanIndex.incrementAndGet();<br>                scanIndex.compareAndSet(<span class="hljs-number">1024</span>, <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 停止listen</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shutdownNow</span><span class="hljs-params">()</span></span>&#123;<br>        executor.shutdownNow();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><blockquote><p>Ⅳ、组合 Ⅰ,Ⅱ,Ⅲ，即生产者=&gt;缓存池=&gt;消费者 模式</p></blockquote><p>DemoTest2 类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><figcaption><span>DemoTest2.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Bank.demo1;<br><br><br><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;<br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoTest2</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br><br>        ExecutorService executor1 = Executors.newCachedThreadPool();<br>        String sender = <span class="hljs-string">"1000"</span>;<br>        String Lisi = <span class="hljs-string">"1001"</span>;<br>        String WangWu = <span class="hljs-string">"1002"</span>;<br>        String ZhaoLiu = <span class="hljs-string">"1003"</span>;<br>        String[] acc = <span class="hljs-keyword">new</span> String[<span class="hljs-number">3</span>];<br>        acc[<span class="hljs-number">0</span>] = Lisi;<br>        acc[<span class="hljs-number">1</span>] = WangWu;<br>        acc[<span class="hljs-number">2</span>] = ZhaoLiu;<br><br>        BankCore1 bankCore = <span class="hljs-keyword">new</span> BankCore1();<br>        TransMoneyProducer transMoneyProducer = <span class="hljs-keyword">new</span> TransMoneyProducer();<br>        bankCore.AutoListenStart();<br><br>        <span class="hljs-comment">// 开启并发线程模拟</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>; i++)&#123;<br>            <span class="hljs-keyword">int</span> ii = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">3</span>)&#123;<br>                ii = i;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                ii = i - <span class="hljs-number">3</span>;<br>            &#125;<br>            String receiver = acc[ii];<br>            executor1.submit(() -&gt; &#123;<br>                bankCore.NewRequest(transMoneyProducer.newTrans(sender, receiver, <span class="hljs-number">100</span>));<br>            &#125;);<br>        &#125;<br><br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        System.out.println(<span class="hljs-string">"RequestIndex Max: "</span>+ BankCore1.RequestIndex.get());<br>        System.out.println(<span class="hljs-string">"TaskIndex Max: "</span>+ BankCore1.TaskIndex.get());<br><br>        executor1.shutdownNow();<br>        bankCore.shutdownNow();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><p>我们这次进行 6 线程并发测试，张三并发向李四、王五、赵六转账两次，即</p><a href="https://img.webpro.ltd/picbed/img/20210720080545.png" data-fancybox="group" data-caption="undefined" class="fancybox"><img width="318" height="493" style data-src="https://img.webpro.ltd/picbed/img/20210720080545.png" class="lazyload"></a><p>理论上讲，转账过后，张三的余额为 0，李四/王五/赵六的其中两人账户余额为 100，另外一个人账户余额为 0，Console 会有账户余额不足提示 4 次。</p><p>重置数据库中的数据：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720080558.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720080558.png" class="lazyload" title></a></p><p>我们接下来运行一下，得到 Console 打印结果：</p><pre>new Thread AutoListenStartNewRequest[2] => [2] 1000#1002#100NewRequest[1] => [1] 1000#1001#100NewRequest[3] => [3] 1000#1003#100NewRequest[4] => [4] 1000#1001#100NewRequest[5] => [5] 1000#1002#100NewRequest[6] => [6] 1000#1003#100openConn√ TransMoney Success------------------------TransMoney1 is ConstructreceiverCardNumber: 1001------------------------TaskIndex = 1 [1000#1001#100] | 已处理openConn√ TransMoney Success------------------------TransMoney1 is ConstructreceiverCardNumber: 1002------------------------TaskIndex = 2 [1000#1002#100] | 已处理openConn1000=>Trans=>1003 Balance cannot afford------------------------TransMoney1 is ConstructreceiverCardNumber: 1003------------------------TaskIndex = 3 [1000#1003#100] | 已处理openConn1000=>Trans=>1001 Balance cannot afford------------------------TransMoney1 is ConstructreceiverCardNumber: 1001------------------------TaskIndex = 4 [1000#1001#100] | 已处理openConn1000=>Trans=>1002 Balance cannot afford------------------------TransMoney1 is ConstructreceiverCardNumber: 1002------------------------TaskIndex = 5 [1000#1002#100] | 已处理openConn1000=>Trans=>1003 Balance cannot afford------------------------TransMoney1 is ConstructreceiverCardNumber: 1003------------------------TaskIndex = 6 [1000#1003#100] | 已处理RequestIndex Max: 6TaskIndex Max: 6Process finished with exit code 1</pre><p>数据表数据变化如下：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720081223.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720081223.png" class="lazyload" title></a></p><p>经过多次运行测试，均是正常的转出两次 100，再转出开始提示余额不足（最后那个版本号 version 暂时没有用到，因为我们并行转串行后就不需要考虑数据版本的问题了）</p><p>可见我们这种并行转串行的算法生效了。下面我们通过几个示意图总结一下上述算法的流程：</p><p><a href="https://img.webpro.ltd/picbed/img/20210720081244.png" data-fancybox="group" data-caption class="fancybox"><img alt data-src="https://img.webpro.ltd/picbed/img/20210720081244.png" class="lazyload" title></a></p><p>===</p><p>当然并行转串行只是众多方法的一种。</p><p>===</p><h1 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h1><ul><li><p>该方法最大的特点就是实现无锁高并发，适用于一些小规模的并发场景。</p></li><li><p>TaskTool 扫描 Task 的方法比较耗费资源，当高并发条件下当然没有问题，但是当并发数较低或没有并发时，应当适当降低扫描消耗。</p></li><li><p>基于 2 条，应当为 TaskPool 设置自动调速算法，合理利用计算机资源。</p></li><li><p>学海无涯，仍然有很多知识等待我们去学习思考。</p></li></ul><p>===</p><p>===</p><blockquote><p>2019-06-10 18:18:23 毕</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;场景简述&quot;&gt;&lt;a href=&quot;#场景简述&quot; class=&quot;headerlink&quot; title=&quot;场景简述&quot;&gt;&lt;/a&gt;场景简述&lt;/h1&gt;&lt;p&gt;假设用户 A 线上消费，其账户内有余额 100 元，现在他给 B 商户付款 99 元，写成最简单的业务逻辑大概是这样的：&lt;/
      
    
    </summary>
    
    
      <category term="并发" scheme="http://blog.webpro.ltd/categories/%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="并发" scheme="http://blog.webpro.ltd/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>写个网站流量统计插件</title>
    <link href="http://blog.webpro.ltd/2019/05/29/get-my-site-pageview/"/>
    <id>http://blog.webpro.ltd/2019/05/29/get-my-site-pageview/</id>
    <published>2019-05-28T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:15.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="插件效果"><a href="#插件效果" class="headerlink" title="插件效果"></a>插件效果</h1><ul><li>闲来无事写个简易网站流量统计插件:</li><li>开发用到: php mysql js html</li><li>效果如下</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200310162203.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200310162203.png" class="lazyload"></a></p><ul><li><input checked disabled type="checkbox"> 简易的流量统计插件，数据大致参考即可，没有高级算法，仅统计下 IP 和 PV</li><li><input checked disabled type="checkbox"> 不防刷，用软件数据分分钟刷上去</li><li><input checked disabled type="checkbox"> 插件非常轻，对网站加载速度影响大概在 5ms 左右</li></ul><h1 id="统计数据分析"><a href="#统计数据分析" class="headerlink" title="统计数据分析"></a>统计数据分析</h1><ol><li>今日 IP</li><li>今日 PV</li><li>昨日 IP</li><li>昨日 PV</li><li>当前在线</li></ol><h1 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h1><h2 id="如何准确获取到客户端-IP"><a href="#如何准确获取到客户端-IP" class="headerlink" title="如何准确获取到客户端 IP"></a>如何准确获取到客户端 IP</h2><blockquote><p>统计 IP 需要获取到客户端真实的 IP 地址，仅 js 实现效果并不好。在这里我采用了[搜狐]的接口</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;&lt;<span class="hljs-regexp">/script&gt;</span><br></code></pre></td></tr></table></figure></div><h3 id="将搜狐提供的-js-嵌入到网页，访问结果如下"><a href="#将搜狐提供的-js-嵌入到网页，访问结果如下" class="headerlink" title="将搜狐提供的 js 嵌入到网页，访问结果如下:"></a>将搜狐提供的 js 嵌入到网页，访问结果如下:</h3><p><a href="https://img.webpro.ltd/picbed/img/20200310162450.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200310162450.png" class="lazyload"></a></p><ul><li>直接返回了一个 returnCitySN 对象，我们可以获得准确的 IP 地址、cid(cid 是什么给我留言)、地区</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> returnCitySN = &#123; <span class="hljs-attr">cip</span>: <span class="hljs-string">"223.241.141.73"</span>, <span class="hljs-attr">cid</span>: <span class="hljs-string">"340000"</span>, <span class="hljs-attr">cname</span>: <span class="hljs-string">"安徽省"</span> &#125;;<br></code></pre></td></tr></table></figure></div><h3 id="通过-returnCitySN-获取-ip、cname"><a href="#通过-returnCitySN-获取-ip、cname" class="headerlink" title="通过 returnCitySN 获取 ip、cname"></a>通过 returnCitySN 获取 ip、cname</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ip = returnCitySN.cip;<br><span class="hljs-keyword">var</span> cname = returnCitySN.cname;<br></code></pre></td></tr></table></figure></div><blockquote><p>至此，IP 已经拿到</p></blockquote><h2 id="后端存储方法"><a href="#后端存储方法" class="headerlink" title="后端存储方法"></a>后端存储方法</h2><ul><li>前端将 IP、cname、访问的 url 传输到后端</li></ul><h3 id="wnzz-visit-表（直接存储访问记录）"><a href="#wnzz-visit-表（直接存储访问记录）" class="headerlink" title="wnzz_visit 表（直接存储访问记录）"></a>wnzz_visit 表（直接存储访问记录）</h3><table><thead><tr><th>键名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>自动编号</td><td>int11</td></tr><tr><td>ip</td><td>ip 地址</td><td>varchar128</td></tr><tr><td>cname</td><td>地区</td><td>varchar255</td></tr><tr><td>url</td><td>访问地址</td><td>varchar255</td></tr><tr><td>time</td><td>访问时间戳</td><td>int11</td></tr><tr><td>siteid</td><td>统计站点编号</td><td>int11</td></tr></tbody></table><ul><li>字段 siteid，用来标记和区分不同的站点，这样可以实现多站点统计，只需要确保 siteid 不重复即可</li></ul><h3 id="wnzz-cal-表（聚合一天的数据，存储计算结果）"><a href="#wnzz-cal-表（聚合一天的数据，存储计算结果）" class="headerlink" title="wnzz_cal 表（聚合一天的数据，存储计算结果）"></a>wnzz_cal 表（聚合一天的数据，存储计算结果）</h3><ul><li>该表的作用是，当某一天已经过去时，自动计算某一天 IP 和 PV 总值，记录在这个表中</li></ul><blockquote><p>为什么需要这个表？因为当日统计的 IP 和 PV 都是动态计算的，php 从数据库读出所有访问的数据，然后再对数据进行统计，如此方法加大了服务器的开销，所以对于一些不必要的重复计算，我们计算一次，存储其即可，下次需要直接读取。</p></blockquote><table><thead><tr><th>键名</th><th>说明</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>自动编号</td><td>int11</td></tr><tr><td>timestamp</td><td>某一天 0 点的时间戳</td><td>int11</td></tr><tr><td>timestr</td><td>某一天用字符表示，例如 2019-05-05</td><td>varchar255</td></tr><tr><td>ips</td><td>IP 总数</td><td>int11</td></tr><tr><td>pvs</td><td>PV 总数</td><td>int11</td></tr><tr><td>siteid</td><td>统计站点编号</td><td>int11</td></tr></tbody></table><h2 id="计算-IP、PV"><a href="#计算-IP、PV" class="headerlink" title="计算 IP、PV"></a>计算 IP、PV</h2><ul><li>首先需要确认 siteid 和统计事件的区间</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//设置北京时间为默认时区</span><br>date_default_timezone_set(<span class="hljs-string">'PRC'</span>);<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 现在对应今日0点的时间戳</span><br>$today = strtotime(date(<span class="hljs-string">"Y-m-d"</span>), $now);<br><span class="hljs-comment">// 现在对应昨日0点的时间戳</span><br>$yesterday = $today - <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 现在对应明日0点的时间戳</span><br>$tomorrow = $today + <span class="hljs-number">86400</span>;<br></code></pre></td></tr></table></figure></div><ul><li>动态统计一下今天的数据，即 <code>today&lt;=time&lt;tomorrow</code>，执行如下 sql 语句</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">- 原生SQL写法<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`wnzz_visit`</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`time`</span>&gt;&#123;$today&#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`time`</span>&lt;&#123;$tomorrow&#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`siteid`</span>=&#123;$siteid&#125;;<br></code></pre></td></tr></table></figure></div><ul><li>持久层框架写法(下面提供)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">$res_t = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$today&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$tomorrow&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br></code></pre></td></tr></table></figure></div><ul><li>从数据库读出的数据形如如下:</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">coq</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coq">datas=&gt;[<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.1"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.2"</span>],<br><br>    [<span class="hljs-string">"ip"</span>=&gt;<span class="hljs-string">"127.0.0.3"</span>]<br><br>]<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200310163423.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200310163423.png" class="lazyload"></a></p><ul><li>用 PHP 实现</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array(ips, pvs)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal_ipandpv</span><span class="hljs-params">($datas)</span></span>&#123;<br>    <span class="hljs-comment">// echo "emmm&lt;br/&gt;";</span><br>    <span class="hljs-comment">// print_r($datas);</span><br>    <span class="hljs-comment">// $ip['192.168.1.1'] = 10;</span><br>    $ip = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span>($datas <span class="hljs-keyword">as</span> $index =&gt; $item)&#123;<br>        <span class="hljs-keyword">if</span>(array_key_exists($item[<span class="hljs-string">'ip'</span>], $ip))&#123;<br>            <span class="hljs-comment">// 统计过</span><br>            $ip[$item[<span class="hljs-string">'ip'</span>]] += <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// 没统计过</span><br>            $ip[$item[<span class="hljs-string">'ip'</span>]] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 累加IP和PV</span><br>    $ips = <span class="hljs-number">0</span>;<br>    $pvs = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">foreach</span>($ip <span class="hljs-keyword">as</span> $keyip =&gt; $count)&#123;<br>        $ips++;<br>        $pvs += $count;<br>    &#125;<br>    <span class="hljs-keyword">return</span> [$ips, $pvs];<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="计算当前在线人数"><a href="#计算当前在线人数" class="headerlink" title="计算当前在线人数"></a>计算当前在线人数</h2><ul><li><p>访问记录在十分钟以内的即算作在线</p></li><li><p>SQL 语句</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`wnzz_visit`</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-string">`time`</span>&gt;&#123;$onlineMin &#125; <span class="hljs-keyword">AND</span> <span class="hljs-string">`siteid`</span>=&#123;$siteid&#125;;<br></code></pre></td></tr></table></figure></div><h1 id="插件总体代码实现"><a href="#插件总体代码实现" class="headerlink" title="插件总体代码实现"></a>插件总体代码实现</h1><h2 id="前端（js）"><a href="#前端（js）" class="headerlink" title="前端（js）"></a>前端（js）</h2><ul><li>domain 变量是后端接口地址，这里我开发用的本地 IP</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// https://pv.sohu.com/cityjson?ie=utf-8</span><br><span class="hljs-keyword">var</span> domain = <span class="hljs-string">"http://127.0.0.1/vsCode/wnzz/"</span>;<br><span class="hljs-keyword">var</span> url = <span class="hljs-built_in">window</span>.location.href;<br><span class="hljs-keyword">var</span> siteid = <span class="hljs-number">1000</span>;<br><br>$.<span class="hljs-keyword">get</span>(<br>  domain +<br>    "?ip=" +<br>    returnCitySN["cip"] +<br>    "&amp;cname=" +<br>    returnCitySN["cname"] +<br>    "&amp;url=" +<br>    url +<br>    "&amp;siteid=" +<br>    siteid,<br>  function (result) &#123;<br>    <span class="hljs-built_in">console</span>.log(result);<br>  &#125;<br>);<br><br>$.<span class="hljs-keyword">get</span>(domain + "?act=<span class="hljs-keyword">get</span>&amp;siteid=" + siteid, function (result) &#123;<br>  $(<span class="hljs-string">"#wnzz"</span>).text(result);<br>&#125;);<br></code></pre></td></tr></table></figure></div><ul><li>在引入上面的脚本之前要先引入 jQuery 库和下面的搜狐库</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>访问结果会显示在 ID 为 wnzz 的标签中</li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><p>后端使用 PHP</p></li><li><p>在下面的代码之前需要引用<a href="/pan/BeanANDTools.zip">Bean.class.php、Tools.class.php</a>，下载之后直接引用。即可以下为 wnzz 服务端接口</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// ============================ //</span><br><span class="hljs-comment">//                              //</span><br><span class="hljs-comment">//        数据库参数配置         //</span><br><span class="hljs-comment">//                              //</span><br><span class="hljs-comment">// ============================ //</span><br>define(<span class="hljs-string">"DB_HOST"</span>, <span class="hljs-string">"127.0.0.1"</span>);<br><span class="hljs-comment">// 数据库地址</span><br>define(<span class="hljs-string">"DB_USER"</span>, <span class="hljs-string">"root"</span>);<br><span class="hljs-comment">// 数据库用户名</span><br>define(<span class="hljs-string">"DB_PASSWD"</span>, <span class="hljs-string">"root"</span>);<br><span class="hljs-comment">// 数据库密码</span><br>define(<span class="hljs-string">"DB_NAME"</span>, <span class="hljs-string">"wnzz"</span>);<br><span class="hljs-comment">// 数据库名</span><br><span class="hljs-comment">//设置北京时间为默认时区</span><br>date_default_timezone_set(<span class="hljs-string">'PRC'</span>);<br><span class="hljs-comment">//输出当前时间</span><br><span class="hljs-comment">// echo date("Y-m-d H:i:s",time());  //2016-08-11 10:30:32</span><br><span class="hljs-comment">//获得当日凌晨的时间戳</span><br><span class="hljs-comment">// $today = strtotime(date("Y-m-d"),time());</span><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"./Tools.class.php"</span>;<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">"./Bean.class.php"</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ip</span><br><span class="hljs-comment"> * cname</span><br><span class="hljs-comment"> * url</span><br><span class="hljs-comment"> * siteid</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">siteid</span><br><span class="hljs-comment">1000-1999 我的字段</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 存储访客数据</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'ip'</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'cname'</span>]) &amp;&amp; $_GET[<span class="hljs-string">'url'</span>] &amp;&amp; $_GET[<span class="hljs-string">'siteid'</span>]) &#123;<br>$ip = anti_sqlin($_GET[<span class="hljs-string">'ip'</span>]);<br>$cname = anti_sqlin($_GET[<span class="hljs-string">'cname'</span>]);<br>$url = anti_sqlin($_GET[<span class="hljs-string">'url'</span>]);<br>$siteid = (int)$_GET[<span class="hljs-string">'siteid'</span>];<br>$bean = <span class="hljs-keyword">new</span> Bean();<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 存储</span><br>$bean-&gt;save(<span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"ip=&#123;$ip&#125;"</span>, <span class="hljs-string">"cname=&#123;$cname&#125;"</span>, <span class="hljs-string">"url=&#123;$url&#125;"</span>, <span class="hljs-string">"time=&#123;$now&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-comment">// 获取访问记录</span><br>&#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'act'</span>]) &amp;&amp; $_GET[<span class="hljs-string">'act'</span>] == <span class="hljs-string">'get'</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'siteid'</span>])) &#123;<br>$siteid = (int)$_GET[<span class="hljs-string">'siteid'</span>];<br><span class="hljs-comment">// init</span><br>$y_ips = <span class="hljs-number">0</span>;<br>$y_pvs = <span class="hljs-number">0</span>;<br>$t_ips = <span class="hljs-number">0</span>;<br>$t_pvs = <span class="hljs-number">0</span>;<br>$online = <span class="hljs-number">0</span>;<br>$bean = <span class="hljs-keyword">new</span> Bean();<br><span class="hljs-comment">// 现在的时间戳</span><br>$now = time();<br><span class="hljs-comment">// 现在对应今日0点的时间戳</span><br>$today = strtotime(date(<span class="hljs-string">"Y-m-d"</span>), $now);<br><span class="hljs-comment">// 现在对应昨日0点的时间戳</span><br>$yesterday = $today - <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 现在对应明日0点的时间戳</span><br>$tomorrow = $today + <span class="hljs-number">86400</span>;<br><span class="hljs-comment">// 查找昨天的记录</span><br>$res = $bean-&gt;findByX([<span class="hljs-string">'timestr'</span>, <span class="hljs-string">'ips'</span>, <span class="hljs-string">'pvs'</span>], <span class="hljs-string">"wnzz_cal"</span>, [<span class="hljs-string">"timestamp=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-keyword">if</span>($res[<span class="hljs-string">'status'</span>] == <span class="hljs-string">'data'</span>) &#123;<br><span class="hljs-comment">// 有数据直接读</span><br>$y_ips = $res[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'ips'</span>];<br>$y_pvs = $res[<span class="hljs-string">'data'</span>][<span class="hljs-number">0</span>][<span class="hljs-string">'pvs'</span>];<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 计算并存储</span><br>$res_m = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$today&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas = $res_m[<span class="hljs-string">'data'</span>];<br>$ipsandpvs = cal_ipandpv($datas);<br><span class="hljs-comment">// 存储</span><br><span class="hljs-comment">// $ips</span><br><span class="hljs-comment">// $pvs</span><br><span class="hljs-comment">// $yesterday</span><br><span class="hljs-comment">// $yesterday_timestamp</span><br>$ips = $ipsandpvs[<span class="hljs-number">0</span>];<br>$pvs = $ipsandpvs[<span class="hljs-number">1</span>];<br>$yesterday_timestamp = date(<span class="hljs-string">"Y-m-d"</span>, $yesterday);<br>$y_ips = $ips;<br>$y_pvs = $pvs;<br>$res1 = $bean-&gt;save(<span class="hljs-string">"wnzz_cal"</span>, [<span class="hljs-string">"ips=&#123;$ips&#125;"</span>, <span class="hljs-string">"pvs=&#123;$pvs&#125;"</span>, <span class="hljs-string">"timestamp=&#123;$yesterday&#125;"</span>, <span class="hljs-string">"timestr=&#123;$yesterday_timestamp&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br><span class="hljs-comment">// print_r($res1);</span><br>&#125;<br><span class="hljs-comment">// 查找今天的记录</span><br>$res_t = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$today&#125;"</span>, <span class="hljs-string">"time&lt;&#123;$tomorrow&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas_t = $res_t[<span class="hljs-string">'data'</span>];<br>$ipsandpvs_t = cal_ipandpv($datas_t);<br>$ips_t = $ipsandpvs_t[<span class="hljs-number">0</span>];<br>$pvs_t = $ipsandpvs_t[<span class="hljs-number">1</span>];<br>$t_ips = $ips_t;<br>$t_pvs = $pvs_t;<br><span class="hljs-comment">// 获取当前在线，10min内为在线</span><br><span class="hljs-comment">// 用PV计算当前在线数</span><br>$onlineMin = $now - <span class="hljs-number">600</span>;<br>$res_o = $bean-&gt;findByX([<span class="hljs-string">'ip'</span>], <span class="hljs-string">"wnzz_visit"</span>, [<span class="hljs-string">"time&gt;&#123;$onlineMin&#125;"</span>, <span class="hljs-string">"siteid=&#123;$siteid&#125;"</span>]);<br>$datas_o = $res_o[<span class="hljs-string">'data'</span>];<br>$ipsandpvs_o = cal_ipandpv($datas_o);<br>$ips_o = $ipsandpvs_o[<span class="hljs-number">0</span>];<br>$pvs_o = $ipsandpvs_o[<span class="hljs-number">1</span>];<br><span class="hljs-comment">// $t_ips = $ips_o;</span><br>$online = $pvs_o;<br><span class="hljs-comment">// $y_ips = 0;</span><br><span class="hljs-comment">// $y_pvs = 0;</span><br><span class="hljs-comment">// $t_ips = 0;</span><br><span class="hljs-comment">// $t_pvs = 0;</span><br><span class="hljs-comment">// $online = 0;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">"webpro统计|今日IP[&#123;$t_ips&#125;]|今日PV[&#123;$t_pvs&#125;]|昨日IP[&#123;$y_ips&#125;]|昨日PV[&#123;$y_pvs&#125;]|当前在线[&#123;$online&#125;]"</span>;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> array(ips, pvs)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cal_ipandpv</span><span class="hljs-params">($datas)</span> </span>&#123;<br><span class="hljs-comment">// echo "emmm&lt;br/&gt;";</span><br><span class="hljs-comment">// print_r($datas);</span><br><span class="hljs-comment">// $ip['192.168.1.1'] = 10;</span><br>$ip = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>($datas <span class="hljs-keyword">as</span> $index =&gt; $item) &#123;<br><span class="hljs-keyword">if</span>(array_key_exists($item[<span class="hljs-string">'ip'</span>], $ip)) &#123;<br><span class="hljs-comment">// 统计过</span><br>$ip[$item[<span class="hljs-string">'ip'</span>]] += <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 没统计过</span><br>$ip[$item[<span class="hljs-string">'ip'</span>]] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 累加IP和PV</span><br>$ips = <span class="hljs-number">0</span>;<br>$pvs = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">foreach</span>($ip <span class="hljs-keyword">as</span> $keyip =&gt; $count) &#123;<br>$ips++;<br>$pvs += $count;<br>&#125;<br><span class="hljs-keyword">return</span> [$ips, $pvs];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anti_sqlin</span><span class="hljs-params">($data)</span> </span>&#123;<br>$data = str_replace(<span class="hljs-string">"'"</span>, <span class="hljs-string">""</span>, $data);<br><span class="hljs-keyword">return</span> $data;<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="在要统计的页面中安装"><a href="#在要统计的页面中安装" class="headerlink" title="在要统计的页面中安装"></a>在要统计的页面中安装</h1><h2 id="在合适位置添加统计代码"><a href="#在合适位置添加统计代码" class="headerlink" title="在合适位置添加统计代码"></a>在合适位置添加统计代码</h2><ul><li>在 head 代码处添加、或者有的网站后台管理中留有网站统计填写等合适位置，添加如下代码(xxx/xxx.js 改成自己的服务器上的 JS 地址)</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://pv.sohu.com/cityjson?ie=utf-8"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://xxx/xxx.js"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200310164440.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200310164440.png" class="lazyload"></a></p><ul><li>然后在你需要显示统计数据的地方添加如下 div 标签</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"wnzz"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></div><h2 id="插件测试"><a href="#插件测试" class="headerlink" title="插件测试"></a>插件测试</h2><ul><li>安装好后，刷新网站进行测试</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200310162203.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200310162203.png" class="lazyload"></a></p><blockquote><p>安装成功！</p></blockquote><ul><li>如果要实现多网站统计，设置不同的 siteid，避免 siteid 重复即可！</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;插件效果&quot;&gt;&lt;a href=&quot;#插件效果&quot; class=&quot;headerlink&quot; title=&quot;插件效果&quot;&gt;&lt;/a&gt;插件效果&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;闲来无事写个简易网站流量统计插件:&lt;/li&gt;
&lt;li&gt;开发用到: php mysql js html&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="php" scheme="http://blog.webpro.ltd/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.webpro.ltd/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu1604在安装gcc时(build-essential)遇到依赖问题的解决办法</title>
    <link href="http://blog.webpro.ltd/2019/05/28/ubuntu1604-install-gcc-has-problem/"/>
    <id>http://blog.webpro.ltd/2019/05/28/ubuntu1604-install-gcc-has-problem/</id>
    <published>2019-05-27T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.235Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>是 apt 源太旧的导致的。更换 apt 源就可解决。另外国外的 apt 源下载速度比较慢，也可以参照此教程换下 apt 源。</p></blockquote><h1 id="更换一下-apt-源"><a href="#更换一下-apt-源" class="headerlink" title="更换一下 apt 源"></a>更换一下 apt 源</h1><h2 id="root-用户下-gt-备份一下"><a href="#root-用户下-gt-备份一下" class="headerlink" title="root 用户下-&gt;备份一下"></a>root 用户下-&gt;备份一下</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span>  /etc/apt<br>cp  sources.list  sources.list.backup<br></code></pre></td></tr></table></figure></div><h2 id="编辑-sources-list、显示行号-set-nu"><a href="#编辑-sources-list、显示行号-set-nu" class="headerlink" title="编辑 sources.list、显示行号:set nu"></a>编辑 sources.list、显示行号<code>:set nu</code></h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim  sources.list<br></code></pre></td></tr></table></figure></div><h2 id="vim-删除指定定行数：假设文件一共-15-行，删除所有文本。按-ESC"><a href="#vim-删除指定定行数：假设文件一共-15-行，删除所有文本。按-ESC" class="headerlink" title="vim 删除指定定行数：假设文件一共 15 行，删除所有文本。按 ESC"></a>vim 删除指定定行数：假设文件一共 15 行，删除所有文本。按 ESC</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:1,15d<br></code></pre></td></tr></table></figure></div><h2 id="打开-https-mirror-tuna-tsinghua-edu-cn-help-ubuntu-清华apt源地址，选择你的Ubuntu版本，例如我的是1604"><a href="#打开-https-mirror-tuna-tsinghua-edu-cn-help-ubuntu-清华apt源地址，选择你的Ubuntu版本，例如我的是1604" class="headerlink" title="打开 https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604"></a>打开 <a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/清华apt源地址，选择你的Ubuntu版本，例如我的是1604</a></h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><figcaption><span>sources.list</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 默认注释了源码镜像以提高 apt  update  速度，如有需要可自行取消注释<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-updates  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-updates  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-backports  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-backports  main  restricted  universe  multiverse<br><br>deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-security  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-security  main  restricted  universe  multiverse<br><br># 预发布软件源，不建议启用<br><br># deb  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-proposed  main  restricted  universe  multiverse<br><br># deb-src  https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; xenial-proposed  main  restricted  universe  multiverse<br></code></pre></td></tr></table></figure></div><h2 id="直接复制粘贴即可，然后更新-apt-源"><a href="#直接复制粘贴即可，然后更新-apt-源" class="headerlink" title="直接复制粘贴即可，然后更新 apt 源"></a>直接复制粘贴即可，然后更新 apt 源</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br></code></pre></td></tr></table></figure></div><h1 id="安装-gcc"><a href="#安装-gcc" class="headerlink" title="安装 gcc"></a>安装 gcc</h1><h2 id="更新成功，然后执行如下命令安装-gcc"><a href="#更新成功，然后执行如下命令安装-gcc" class="headerlink" title="更新成功，然后执行如下命令安装 gcc"></a>更新成功，然后执行如下命令安装 gcc</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install build-essential<br></code></pre></td></tr></table></figure></div><h2 id="等一会儿，安装成功，查询-gcc-版本"><a href="#等一会儿，安装成功，查询-gcc-版本" class="headerlink" title="等一会儿，安装成功，查询 gcc 版本"></a>等一会儿，安装成功，查询 gcc 版本</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -v<br></code></pre></td></tr></table></figure></div><p><a href="https://img.webpro.ltd/picbed/img/20200322182206.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200322182206.png" class="lazyload"></a></p><blockquote><p>直接看最后一行，gcc 5.5.0 安装成功。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;是 apt 源太旧的导致的。更换 apt 源就可解决。另外国外的 apt 源下载速度比较慢，也可以参照此教程换下 apt 源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;更换一下-apt-源&quot;&gt;&lt;a href=&quot;#更换一下-apt-源&quot; 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blog.webpro.ltd/categories/linux/"/>
    
    
      <category term="Ubuntu16.04" scheme="http://blog.webpro.ltd/tags/Ubuntu16-04/"/>
    
  </entry>
  
  <entry>
    <title>OrangePi Zero嵌入式板搭建微服务网关[Ubuntu_Server1504+JDK1.8]</title>
    <link href="http://blog.webpro.ltd/2019/05/26/OrangePi-Zero-run-springboot/"/>
    <id>http://blog.webpro.ltd/2019/05/26/OrangePi-Zero-run-springboot/</id>
    <published>2019-05-25T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.743Z</updated>
    
    <content type="html"><![CDATA[<!-- https://img.webpro.ltd/picbed/img/20200309195907.png --><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="配件清单"><a href="#配件清单" class="headerlink" title="配件清单"></a>配件清单</h2><h3 id="必选清单"><a href="#必选清单" class="headerlink" title="必选清单"></a>必选清单</h3><table><thead><tr><th align="left">名称</th><th align="left">配置</th></tr></thead><tbody><tr><td align="left">OragePi Zero 主板</td><td align="left">4 核 ARM CPU + 512M DDR3(与显存共享)，带 1 个板载 WiFi(及天线)、1 个 USB2.0 接口、1 个标准网线插口、TF 卡槽、OTG 电源口、兼容树莓派的 GPIO 接口等等</td></tr><tr><td align="left">OragePi Zero 扩展版</td><td align="left">扩展了 2 个 USB2.0，1 个红外线信号接收器、1 个 AV 显示器信号模拟输出</td></tr><tr><td align="left">orangepi zero</td><td align="left">黑色壳可装下开发板和扩展板 若板子上电启动正常，各个接口输出正常，就可把板子安装在壳子中，保护其零件。(谨慎安装，安装好后板子基本上就拆卸不出来了)</td></tr><tr><td align="left">0.2 毫米移动石墨散热片</td><td align="left">裁剪贴在 CPU 和 DDR 上，裁剪剩下的可以贴在主板的背面</td></tr><tr><td align="left">32GB TF 卡 Class10</td><td align="left">32GB 性价比较高，Class10 级及以上速度，稍后系统将烧录在内，需要读卡器</td></tr><tr><td align="left">5V2A 电源、OTG 充电线</td><td align="left">给开发板供电</td></tr><tr><td align="left">操作环境</td><td align="left">win10 + Ubuntu(主要用于 ssh) + 局域网(路由器等内网环境)</td></tr></tbody></table><h3 id="可选清单"><a href="#可选清单" class="headerlink" title="可选清单"></a>可选清单</h3><table><thead><tr><th align="left">名称</th><th align="left">配置</th></tr></thead><tbody><tr><td align="left">鼠标</td><td align="left">USB 串口</td></tr><tr><td align="left">键盘</td><td align="left">USB 串口</td></tr><tr><td align="left">AV 转 HDMI</td><td align="left">可将板子输出的信号直接插在支持 HDMI 的显示器上</td></tr><tr><td align="left">AV 线</td><td align="left">可将板子输出 AV 信号直接插在支持 AV 的显示器上</td></tr></tbody></table><h2 id="软件及镜像准备"><a href="#软件及镜像准备" class="headerlink" title="软件及镜像准备"></a>软件及镜像准备</h2><table><thead><tr><th align="left">名称</th><th align="left">下载地址</th></tr></thead><tbody><tr><td align="left">SDFormatter</td><td align="left">TF 卡格式化<br><a href="https://pan.baidu.com/s/1uezMmj4rY4sMo3dZD_JMNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1uezMmj4rY4sMo3dZD_JMNA</a><br>提取码：jufm</td></tr><tr><td align="left">Win32DiskImager</td><td align="left">镜像烧录软件<br><a href="https://pan.baidu.com/s/1net3qS-tmrhKnAimyat0iA" target="_blank" rel="noopener">https://pan.baidu.com/s/1net3qS-tmrhKnAimyat0iA</a><br>提取码：u4lg</td></tr><tr><td align="left">ubuntu_server.img</td><td align="left">系统镜像 MD5<br> 474f0b497dafd9368a7d3cfe7961ea16<br><a href="https://pan.baidu.com/s/1l3FEdj9UJvFi5GSwUrUvlQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1l3FEdj9UJvFi5GSwUrUvlQ</a><br>提取码：nnap</td></tr><tr><td align="left">jdk-8u211-linux-arm32-vfp-hflt.tar.gz</td><td align="left">JDK8 从 Oracle 官网下载即可</td></tr></tbody></table><h1 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像"></a>烧录镜像</h1><ol><li>将 TF 卡插在读卡器上，插入电脑。</li></ol><ul><li>打开 SDFormatter，选择参数后，格式化 TF 卡。</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309184342.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309184342.png" class="lazyload"></a></p><ol start="2"><li>打开 Win32DiskImager，选择镜像地址，选择 Device（TF 卡的盘符），选择成功后，Write 按钮处于可点击状态，点击 Write 按钮进行烧录</li></ol><p><a href="https://img.webpro.ltd/picbed/img/20200309184405.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309184405.png" class="lazyload"></a></p><ol start="3"><li>提示烧录成功后，win10 系统会提示 TF 卡格式错误，忽略提示（烧录后的 TF 卡格式 win10 系统不支持），直接拔掉 TF 卡即可。</li></ol><h1 id="启动开发板"><a href="#启动开发板" class="headerlink" title="启动开发板"></a>启动开发板</h1><ol><li><p>将 TF 卡插到开发板的 TF 卡槽中，插入网线，接通电源（5V2A），系统会自动开机，等待 2 分钟。</p></li><li><p>从路由器管理页面查新设备的 IP 地址，我查到我的设备 IP 地址为 192.168.31.73 ，注意这是内网地址，外网不能直接访问</p></li></ol><p><a href="https://img.webpro.ltd/picbed/img/20200309184520.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309184520.png" class="lazyload"></a></p><ol start="3"><li>打开 Ubuntu 命令行，输入指令</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@192.168.31.73<br></code></pre></td></tr></table></figure></div><ul><li>远程连接（该系统已经集成了 ssh，新镜像开机即可使用 ssh）</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309184625.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309184625.png" class="lazyload"></a></p><ul><li><p>默认密码为 orangepi</p></li><li><p>登陆上去后输入指令</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure></div><ul><li>更改当前账户密码</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309184717.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309184717.png" class="lazyload"></a></p><ul><li>成功登陆到 Ubuntu_Server，首次登陆会提示 需要执行 sudo fs_resize 命令，重划空间分配</li></ul><h1 id="配置-JDK1-8-环境"><a href="#配置-JDK1-8-环境" class="headerlink" title="配置 JDK1.8 环境"></a>配置 JDK1.8 环境</h1><ul><li><p>从官网下载 jdk-8u211-linux-arm32-vfp-hflt.tar.gz</p></li><li><p>具体安装方法详见<a href="/2019/02/17/WSL-Install/#配置JDK环境">WSL,Ubuntu16.04 配置 JDK1.8</a> (注意两者下载的 JDK 包不同)</p></li></ul><h1 id="运行第一个-jar-包"><a href="#运行第一个-jar-包" class="headerlink" title="运行第一个 jar 包"></a>运行第一个 jar 包</h1><ol><li>我使用 spingboot 写了一个简单的 HelloWorld 程序:</li></ol><p><a href="https://img.webpro.ltd/picbed/img/20200309195156.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309195156.png" class="lazyload"></a></p><ul><li>执行 mvn install 将项目打包成 jar 包</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309195221.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309195221.png" class="lazyload"></a></p><ul><li>smarthome1-0.0.1-SNAPSHOT.jar</li></ul><ol start="2"><li>我在/usr 目录下新建 me 文件夹，将我的项目都上传到此</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /usr/me<br><span class="hljs-built_in">cd</span> /usr/me<br></code></pre></td></tr></table></figure></div><ul><li>将 smarthome1-0.0.1-SNAPSHOT.jar 上传到该文件夹中即可</li></ul><ol start="3"><li>运行 jar 包</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar smarthome1-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure></div><ul><li>jar 包启动成功，如下所示:</li></ul><p><a href="https://img.webpro.ltd/picbed/img/20200309195341.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309195341.png" class="lazyload"></a></p><ol start="4"><li>访问测试，访问:</li></ol><p><code>http://192.168.31.73:8080/hello</code></p><p><a href="https://img.webpro.ltd/picbed/img/20200309195408.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309195408.png" class="lazyload"></a></p><blockquote><p>访问成功！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- https://img.webpro.ltd/picbed/img/20200309195907.png --&gt;

&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h
      
    
    </summary>
    
    
      <category term="OrangePi" scheme="http://blog.webpro.ltd/categories/OrangePi/"/>
    
    
      <category term="OrangePi" scheme="http://blog.webpro.ltd/tags/OrangePi/"/>
    
  </entry>
  
  <entry>
    <title>springboot快速入门</title>
    <link href="http://blog.webpro.ltd/2019/02/21/springboot-fast-study/"/>
    <id>http://blog.webpro.ltd/2019/02/21/springboot-fast-study/</id>
    <published>2019-02-20T16:00:00.000Z</published>
    <updated>2021-07-17T11:50:16.232Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-介绍"><a href="#SpringBoot-介绍" class="headerlink" title="SpringBoot 介绍"></a>SpringBoot 介绍</h1><ul><li><h2 id="SpringBoot-特性"><a href="#SpringBoot-特性" class="headerlink" title="SpringBoot 特性"></a>SpringBoot 特性</h2><ul><li>创建独立的 Spring 应用程序</li><li>嵌入的 Tomcat，无需部署 war 文件</li><li>简化 maven 配置</li><li>自动配置 Spring</li><li>提供生产就绪型功能，如指标、健康、检查和外部配置</li><li>开箱即用没有代码生成，也无需配置 XML 文件</li></ul></li><li><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><ul><li>环境 Windows10 - JDK1.8</li><li>开发工具 IDEA</li><li>项目管理工具 maven(3.6.0)</li></ul></li><li><h2 id="开发准备-1"><a href="#开发准备-1" class="headerlink" title="开发准备"></a>开发准备</h2><ul><li>环境 JDK1.8</li><li>开发工具 IDEA</li><li>项目管理工具 maven(3.6.0)</li></ul></li></ul><h1 id="HelloWorld-创建"><a href="#HelloWorld-创建" class="headerlink" title="HelloWorld 创建"></a>HelloWorld 创建</h1><ol><li>通过 file –&gt; new –&gt; project 打开 new project 窗口</li><li>创建 Spring Initializr，next，next，选择 web –&gt; web 组件，完成项目创建</li><li>等待 项目从 maven 库更新</li><li>新建 Controller 类，写入如下代码</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">* HelloWorld创建</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span> </span>&#123;<br>  <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello world"</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><ol start="5"><li>启动 主程序</li></ol><p>出现形如下面图片则启动成功</p><p>访问 <a href="http://127.0.0.1:8080/hello" target="_blank" rel="noopener">http://127.0.0.1:8080/hello</a></p><p><a href="https://img.webpro.ltd/picbed/img/20200309180359.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img.webpro.ltd/picbed/img/20200309180359.png" class="lazyload"></a></p><ol start="6"><li>步骤总结</li></ol><ul><li>a. 新建 Controller</li><li>b. 编写 springboot 启动类（IDEA）自动创建</li><li>c. 访问</li></ul><p>说明: 下面两种写法等价</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br></code></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@ResponseBody</span><br></code></pre></td></tr></table></figure></div><h1 id="启动-springboot-项目"><a href="#启动-springboot-项目" class="headerlink" title="启动 springboot 项目"></a>启动 springboot 项目</h1><h2 id="启动-springboot-项目的方式"><a href="#启动-springboot-项目的方式" class="headerlink" title="启动 springboot 项目的方式"></a>启动 springboot 项目的方式</h2><ol><li>直接在 IDEA 中启动</li><li>在 cmd 中输入如下命令启动</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn spring-boot:run<br></code></pre></td></tr></table></figure></div><ol start="3"><li>在 cmd 中输入如下命令启动</li></ol><ul><li>win 下运行方法（阻塞）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn install<br><span class="hljs-built_in">cd</span> target<br>java -jar package-name.jar<br></code></pre></td></tr></table></figure></div><ul><li>linux 下 dev/test 运行方法（阻塞）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar package-name.jar<br></code></pre></td></tr></table></figure></div><ul><li>linux 下 prod(生产环境)运行方法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nohup java -jar package-name.jar &amp;<br></code></pre></td></tr></table></figure></div><h1 id="RESTful-API-规范"><a href="#RESTful-API-规范" class="headerlink" title="RESTful API 规范"></a>RESTful API 规范</h1><table><thead><tr><th align="left">方法</th><th align="left">路由</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">/girls</td><td align="left">获取列表</td></tr><tr><td align="left">POST</td><td align="left">/girls</td><td align="left">创建女生</td></tr><tr><td align="left">GET</td><td align="left">/girls/{id}</td><td align="left">通过 id 查询</td></tr><tr><td align="left">GET</td><td align="left">/girls/age/{age}</td><td align="left">通过年龄查询</td></tr><tr><td align="left">PUT</td><td align="left">/girls/{id}</td><td align="left">通过 id 更新</td></tr><tr><td align="left">DELETE</td><td align="left">/girls/{id}</td><td align="left">通过 id 删除</td></tr></tbody></table><h1 id="spring-boot-starter-data-jpa"><a href="#spring-boot-starter-data-jpa" class="headerlink" title="spring-boot-starter-data-jpa"></a>spring-boot-starter-data-jpa</h1><ol><li>添加依赖（这里用 MySQL 数据库演示）、查看 pom.xml 版本</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>对于 pom.xml，设置其版本，我的版本 1.5.7</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure></div><ul><li>（不超过 2.0 即可，2.0 以后版本 jpa 语法略有不同）</li></ul><ol start="2"><li>配置 application.properties / application.yml</li></ol><ul><li>application.properties</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><figcaption><span>application.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://127.0.0.1:3306/studyjpa?charset=utf8mb4&amp;serverTimezone=PRC</span><br><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">spring.jpa.hibernate.ddl-auto</span>=<span class="hljs-string">update</span><br><span class="hljs-meta">spring.jpa.show-sql</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></div><ul><li>application.yml（建议使用 YML，比较简洁）</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><figcaption><span>application.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/studyjpa?charset=utf8mb4&amp;serverTimezone=PRC</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">hibernate:</span><br>      <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br>    <span class="hljs-attr">show-sql:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></div><ol start="3"><li>创建 Girl 类，映射到 MySQL 数据库的实体</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> javax.persistence.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span>(name = <span class="hljs-string">"Girl"</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Girl</span> </span>&#123;<br><br>  <span class="hljs-meta">@Id</span><br>  <span class="hljs-meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<br>  <span class="hljs-keyword">private</span> Integer id;<br><br>  <span class="hljs-keyword">private</span> String cupSize;<br><br>  <span class="hljs-keyword">private</span> Integer age;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> id;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.id = id;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getCupSize</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> cupSize;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCupSize</span><span class="hljs-params">(String cupSize)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.cupSize = cupSize;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.age = age;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><ul><li>说明:<ul><li><code>javax.persistence.*</code>:必须引入的包</li><li><code>@Entity</code>:表示该类实体与 MySQL 数据表对应</li><li><code>@Table(name = &quot;Girl&quot;)</code>:指定表名，不指定则使用类名作为表名</li><li><code>@GeneratedValue</code> 或 <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>: 该类型（通常指 Integer）为自增型</li></ul></li></ul><ol start="4"><li>启动项目，在数据库中会新建出一个表，则运行成功</li></ol><h1 id="JPA-对数据库增删改查"><a href="#JPA-对数据库增删改查" class="headerlink" title="JPA 对数据库增删改查"></a>JPA 对数据库增删改查</h1><h2 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h2><h3 id="新建-GirlRespository-类-继承-JpaRepository"><a href="#新建-GirlRespository-类-继承-JpaRepository" class="headerlink" title="新建 GirlRespository 类 继承 JpaRepository"></a>新建 GirlRespository 类 继承 JpaRepository</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GirlRespository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">JpaRepository</span></span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="新建-GirlController-类-引入-GirlRespository-实体"><a href="#新建-GirlController-类-引入-GirlRespository-实体" class="headerlink" title="新建 GirlController 类 引入 GirlRespository 实体"></a>新建 GirlController 类 引入 GirlRespository 实体</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by admin</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GirlController</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> GirlRespository girlRespository;<br><br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="符合-RESTful-API-规范-的增删改查-GirlController-类"><a href="#符合-RESTful-API-规范-的增删改查-GirlController-类" class="headerlink" title="符合 RESTful API 规范 的增删改查(GirlController 类)"></a>符合 RESTful API 规范 的增删改查(GirlController 类)</h2><h3 id="获取列表"><a href="#获取列表" class="headerlink" title="获取列表"></a>获取列表</h3><ul><li>GET</li><li>127.0.0.1:8080/girls</li><li>return List<girl></girl></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 查询所有列表</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Girl&gt; <span class="hljs-title">girlList</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findAll();<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="新增一条记录"><a href="#新增一条记录" class="headerlink" title="新增一条记录"></a>新增一条记录</h3><ul><li>POST</li><li>127.0.0.1:8080/girls</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 新增一个女生</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/girls"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlAdd</span><span class="hljs-params">(@RequestParam(<span class="hljs-string">"cupSize"</span>)</span> String cupSize,@<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setCupSize(cupSize);<br>  girl.setAge(age);<br>  <span class="hljs-keyword">return</span> girlRespository.save(girl);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-查询一条记录"><a href="#通过-id-查询一条记录" class="headerlink" title="通过 id 查询一条记录"></a>通过 id 查询一条记录</h3><ul><li>GET</li><li>127.0.0.1:8080/girls/{id}</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过 id查询一个女生</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlFindOne</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findOne(id);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-更新一条记录"><a href="#通过-id-更新一条记录" class="headerlink" title="通过 id 更新一条记录"></a>通过 id 更新一条记录</h3><ul><li>PUT</li><li>127.0.0.1:8080/girls/{id}</li><li>return Girl</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 更新</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PutMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> Girl <span class="hljs-title">girlUpdate</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id,</span><br><span class="hljs-function">    @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"cupSize"</span>)</span> String cupSize,</span><br><span class="hljs-function">    @<span class="hljs-title">RequestParam</span><span class="hljs-params">(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setId(id);<br>  girl.setCupSize(cupSize);<br>  girl.setAge(age);<br>  <span class="hljs-keyword">return</span> girlRespository.save(girl);<br>&#125;<br></code></pre></td></tr></table></figure></div><h3 id="通过-id-删除一条记录"><a href="#通过-id-删除一条记录" class="headerlink" title="通过 id 删除一条记录"></a>通过 id 删除一条记录</h3><ul><li>DELETE</li><li>127.0.0.1:8080/girls/{id}</li><li>no return</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 删除</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@DeleteMapping</span>(value = <span class="hljs-string">"/girls/&#123;id&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">girlDelete</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"id"</span>)</span> Integer id)</span>&#123;<br>  Girl girl = <span class="hljs-keyword">new</span> Girl();<br>  girl.setId(id);<br>  girlRespository.delete(id);<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="通过指定字段（age）查询列表"><a href="#通过指定字段（age）查询列表" class="headerlink" title="通过指定字段（age）查询列表"></a>通过指定字段（age）查询列表</h2><ul><li>GET</li><li>127.0.0.1:8080/girls/age/{age}</li><li>return List<girl></girl></li></ul><h3 id="在-GirlRespository-类中增加如下"><a href="#在-GirlRespository-类中增加如下" class="headerlink" title="在 GirlRespository 类中增加如下"></a>在 GirlRespository 类中增加如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过年龄查询</span><br><span class="hljs-function">List <span class="hljs-title">findByAge</span><span class="hljs-params">(Integer age)</span></span>;<br></code></pre></td></tr></table></figure></div><h3 id="在-GirlController-中编写如下"><a href="#在-GirlController-中编写如下" class="headerlink" title="在 GirlController 中编写如下"></a>在 GirlController 中编写如下</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 通过年龄查询</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GetMapping</span>(value = <span class="hljs-string">"/girls/age/&#123;age&#125;"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> List <span class="hljs-title">girlFindByAge</span><span class="hljs-params">(@PathVariable(<span class="hljs-string">"age"</span>)</span> Integer age)</span>&#123;<br>  <span class="hljs-keyword">return</span> girlRespository.findByAge(age);<br>&#125;<br></code></pre></td></tr></table></figure></div><h1 id="JPA-事务管理（数据回滚）"><a href="#JPA-事务管理（数据回滚）" class="headerlink" title="JPA 事务管理（数据回滚）"></a>JPA 事务管理（数据回滚）</h1><blockquote><p>例如当简化用户购买一件商品时，需要减少库存和用户扣款两种操作，可能出现如下情况</p></blockquote><table><thead><tr><th align="left">减少库存</th><th align="left">用户扣款</th><th align="left">是否成功</th><th align="left">应采取的操作</th></tr></thead><tbody><tr><td align="left">成功</td><td align="left">失败</td><td align="left">否</td><td align="left">撤回减少库存操作</td></tr><tr><td align="left">失败</td><td align="left">成功</td><td align="left">否</td><td align="left">撤回用户扣款操作</td></tr><tr><td align="left">失败</td><td align="left">失败</td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left">成功</td><td align="left">成功</td><td align="left">是</td><td align="left">无</td></tr></tbody></table><ul><li>我们希望当操作失败时，对另外一个已经成功的操作进行撤回，即事物回滚操作</li><li>首先需要查看数据库是否支持回滚操作，查看表引擎，若非 InnoDB 引擎，修改引擎为 InnoDB 即可</li></ul><h2 id="新建-GirlService-模拟-有两个相关联的数据库操作"><a href="#新建-GirlService-模拟-有两个相关联的数据库操作" class="headerlink" title="新建 GirlService 模拟 有两个相关联的数据库操作"></a>新建 GirlService 模拟 有两个相关联的数据库操作</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jpaexample;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.Transactional;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Created by suxia on 2019/2/21/021.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GirlService</span> </span>&#123;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> GirlRespository girlRespository;<br><br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertTwo</span><span class="hljs-params">()</span></span>&#123;<br>    Girl girlA = <span class="hljs-keyword">new</span> Girl();<br>    girlA.setAge(<span class="hljs-number">18</span>);<br>    girlA.setCupSize(<span class="hljs-string">"A"</span>);<br>    girlRespository.save(girlA);<br><br>    Girl girlB = <span class="hljs-keyword">new</span> Girl();<br>    girlB.setAge(<span class="hljs-number">19</span>);<br>    girlB.setCupSize(<span class="hljs-string">"BBBB"</span>);<br>    girlRespository.save(girlB);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></div><p><code>@Transactional</code>事务管理声明</p><h2 id="编写-测试-控制器-GirlController-类"><a href="#编写-测试-控制器-GirlController-类" class="headerlink" title="编写 测试 控制器(GirlController 类)"></a>编写 测试 控制器(GirlController 类)</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 同时插入两个数据，失败回滚</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/girls/two"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">girlTwo</span><span class="hljs-params">()</span></span>&#123;<br>  girlService.insertTwo();<br>&#125;<br></code></pre></td></tr></table></figure></div><h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><ul><li>测试原理：<br>修改了 Girl 表中的 cupSize 字段，令其长度为 1，那么 <code>girlB.setCupSize(&quot;BBBB&quot;);</code> 语句必定会引起数据库插入失败。 如果运行后数据库出现了 1 条记录，那么事务回滚失败，如果没有出现记录那么数据回滚成功。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot-介绍&quot;&gt;&lt;a href=&quot;#SpringBoot-介绍&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot 介绍&quot;&gt;&lt;/a&gt;SpringBoot 介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;SpringBoot-特
      
    
    </summary>
    
    
      <category term="springboot" scheme="http://blog.webpro.ltd/categories/springboot/"/>
    
    
      <category term="Java" scheme="http://blog.webpro.ltd/tags/Java/"/>
    
      <category term="springboot" scheme="http://blog.webpro.ltd/tags/springboot/"/>
    
  </entry>
  
</feed>
